{
  "address": "0x666738678c6FbdE71bb7Ca7B4DD1d41AFF218d7F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "DisableVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeExcluded",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "FeeExclusion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldEligManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEligManager",
          "type": "address"
        }
      ],
      "name": "NewEligibilityManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDistributor",
          "type": "address"
        }
      ],
      "name": "NewFeeDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        }
      ],
      "name": "NewVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldZap",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newZap",
          "type": "address"
        }
      ],
      "name": "NewZapContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isGuardian",
          "type": "bool"
        }
      ],
      "name": "SetIsGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomRedeemFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetRedeemFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomSwapFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetSwapFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateFactoryFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomRedeemFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetRedeemFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomSwapFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetSwapFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "zap",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "UpdatedZapContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "childImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "__NFTXVaultFactory_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childImplementation_",
          "type": "address"
        }
      ],
      "name": "__UpgradeableBeacon__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "is1155",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "allowAllItems",
          "type": "bool"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "disableVaultFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "excludedFromFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryMintFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRandomRedeemFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRandomSwapFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryTargetRedeemFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryTargetSwapFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "onlyOwnerIfPaused",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eligibilityManager",
          "type": "address"
        }
      ],
      "name": "setEligibilityManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setFactoryFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "setFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_excludedAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "setFeeExclusion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isGuardian",
          "type": "bool"
        }
      ],
      "name": "setIsGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setVaultFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zapContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_excluded",
          "type": "bool"
        }
      ],
      "name": "setZapContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newChildImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeChildTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "vaultFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        }
      ],
      "name": "vaultsForAsset",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zapContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "zapContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc11ac333cfbad55f7912dab7f2981ec9aee7b8d63fd0a42af5b437872e39cbe8",
  "receipt": {
    "to": null,
    "from": "0xb06a64615842CbA9b3Bdb7e6F726F3a5BD20daC2",
    "contractAddress": "0x666738678c6FbdE71bb7Ca7B4DD1d41AFF218d7F",
    "transactionIndex": 95,
    "gasUsed": "2623356",
    "logsBloom": "0x
    "blockHash": "0x63ba6ca76c227f10e32d4e0486a3c9e9f8bb68d27dcc27d2fe5a32766c6ef294",
    "transactionHash": "0xc11ac333cfbad55f7912dab7f2981ec9aee7b8d63fd0a42af5b437872e39cbe8",
    "logs": [],
    "blockNumber": 8688010,
    "cumulativeGasUsed": "11799733",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bec004d9b1b2142a40b20f41be4e23d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"DisableVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeExcluded\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"FeeExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEligManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEligManager\",\"type\":\"address\"}],\"name\":\"NewEligibilityManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"NewFeeDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"NewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldZap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newZap\",\"type\":\"address\"}],\"name\":\"NewZapContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGuardian\",\"type\":\"bool\"}],\"name\":\"SetIsGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"UpdateFactoryFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"UpdateVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"UpdatedZapContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"__NFTXVaultFactory_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childImplementation_\",\"type\":\"address\"}],\"name\":\"__UpgradeableBeacon__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowAllItems\",\"type\":\"bool\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"disableVaultFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryMintFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRandomRedeemFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRandomSwapFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryTargetRedeemFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryTargetSwapFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onlyOwnerIfPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eligibilityManager\",\"type\":\"address\"}],\"name\":\"setEligibilityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"setFactoryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_excludedAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setFeeExclusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGuardian\",\"type\":\"bool\"}],\"name\":\"setIsGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"setVaultFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zapContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"setZapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildImplementation\",\"type\":\"address\"}],\"name\":\"upgradeChildTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"vaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"vaultsForAsset\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zapContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"zapContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__UpgradeableBeacon__init(address)\":{\"details\":\"Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon.\"},\"childImplementation()\":{\"details\":\"Returns the current child implementation address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeChildTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newChildImplementation` must be a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v2/NFTXVaultFactoryUpgradeable.sol\":\"NFTXVaultFactoryUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[\":@mocks/=src/mocks/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@src/=src/\",\":@uni-core/=src/uniswap/v3-core/\",\":@uni-periphery/=src/uniswap/v3-periphery/\",\":@uniswap/lib/=lib/solidity-lib/\",\":@uniswap/v2-core/=lib/v2-core/\",\":@uniswap/v3-core/contracts/=src/uniswap/v3-core/\",\":base64-sol/=src/uniswap/v3-periphery/libraries/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solidity-lib/=lib/solidity-lib/contracts/\",\":v2-core/=lib/v2-core/contracts/\"]},\"sources\":{\"src/v2/NFTXVaultFactoryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/PausableUpgradeable.sol\\\";\\nimport \\\"./proxy/UpgradeableBeacon.sol\\\";\\nimport \\\"./proxy/BeaconProxy.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./interface/INFTXFeeDistributor.sol\\\";\\nimport \\\"./NFTXVaultUpgradeable.sol\\\";\\n\\n// Authors: @0xKiwi_ and @alexgausman.\\n\\ncontract NFTXVaultFactoryUpgradeable is\\n    PausableUpgradeable,\\n    UpgradeableBeacon,\\n    INFTXVaultFactory\\n{\\n    uint256 private NOT_USED1; // Removed, no longer needed.\\n    address public override zapContract; // No longer needed, but keeping for compatibility.\\n    address public override feeDistributor;\\n    address public override eligibilityManager;\\n\\n    mapping(uint256 => address) private NOT_USED3; // Removed, no longer needed.\\n    mapping(address => address[]) _vaultsForAsset;\\n\\n    address[] internal vaults;\\n\\n    // v1.0.1\\n    mapping(address => bool) public override excludedFromFees;\\n\\n    // v1.0.2\\n    struct VaultFees {\\n        bool active;\\n        uint64 mintFee;\\n        uint64 randomRedeemFee;\\n        uint64 targetRedeemFee;\\n        uint64 randomSwapFee;\\n        uint64 targetSwapFee;\\n    }\\n    mapping(uint256 => VaultFees) private _vaultFees;\\n    uint64 public override factoryMintFee;\\n    uint64 public override factoryRandomRedeemFee;\\n    uint64 public override factoryTargetRedeemFee;\\n    uint64 public override factoryRandomSwapFee;\\n    uint64 public override factoryTargetSwapFee;\\n\\n    // v1.0.3\\n    mapping(address => bool) public override zapContracts;\\n\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) public override initializer {\\n        __Pausable_init();\\n        // We use a beacon proxy so that every child contract follows the same implementation code.\\n        __UpgradeableBeacon__init(_vaultImpl);\\n        setFeeDistributor(_feeDistributor);\\n        setFactoryFees(0.1 ether, 0.05 ether, 0.1 ether, 0.05 ether, 0.1 ether);\\n    }\\n\\n    function createVault(\\n        string memory name,\\n        string memory symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external virtual override returns (uint256) {\\n        onlyOwnerIfPaused(0);\\n        require(feeDistributor != address(0), \\\"NFTX: Fee receiver unset\\\");\\n        require(\\n            childImplementation() != address(0),\\n            \\\"NFTX: Vault implementation unset\\\"\\n        );\\n        address vaultAddr = deployVault(\\n            name,\\n            symbol,\\n            _assetAddress,\\n            is1155,\\n            allowAllItems\\n        );\\n        uint256 _vaultId = vaults.length;\\n        _vaultsForAsset[_assetAddress].push(vaultAddr);\\n        vaults.push(vaultAddr);\\n        INFTXFeeDistributor(feeDistributor).initializeVaultReceivers(_vaultId);\\n        emit NewVault(_vaultId, vaultAddr, _assetAddress);\\n        return _vaultId;\\n    }\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) public virtual override onlyOwner {\\n        require(mintFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(randomRedeemFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(targetRedeemFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(randomSwapFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(targetSwapFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n\\n        factoryMintFee = uint64(mintFee);\\n        factoryRandomRedeemFee = uint64(randomRedeemFee);\\n        factoryTargetRedeemFee = uint64(targetRedeemFee);\\n        factoryRandomSwapFee = uint64(randomSwapFee);\\n        factoryTargetSwapFee = uint64(targetSwapFee);\\n\\n        emit UpdateFactoryFees(\\n            mintFee,\\n            randomRedeemFee,\\n            targetRedeemFee,\\n            randomSwapFee,\\n            targetSwapFee\\n        );\\n    }\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) public virtual override {\\n        if (msg.sender != owner()) {\\n            address vaultAddr = vaults[vaultId];\\n            require(msg.sender == vaultAddr, \\\"Not from vault\\\");\\n        }\\n        require(mintFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(randomRedeemFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(targetRedeemFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(randomSwapFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n        require(targetSwapFee <= 0.5 ether, \\\"Cannot > 0.5 ether\\\");\\n\\n        _vaultFees[vaultId] = VaultFees(\\n            true,\\n            uint64(mintFee),\\n            uint64(randomRedeemFee),\\n            uint64(targetRedeemFee),\\n            uint64(randomSwapFee),\\n            uint64(targetSwapFee)\\n        );\\n        emit UpdateVaultFees(\\n            vaultId,\\n            mintFee,\\n            randomRedeemFee,\\n            targetRedeemFee,\\n            randomSwapFee,\\n            targetSwapFee\\n        );\\n    }\\n\\n    function disableVaultFees(uint256 vaultId) public virtual override {\\n        if (msg.sender != owner()) {\\n            address vaultAddr = vaults[vaultId];\\n            require(msg.sender == vaultAddr, \\\"Not vault\\\");\\n        }\\n        delete _vaultFees[vaultId];\\n        emit DisableVaultFees(vaultId);\\n    }\\n\\n    function setFeeDistributor(address _feeDistributor)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        require(_feeDistributor != address(0));\\n        emit NewFeeDistributor(feeDistributor, _feeDistributor);\\n        feeDistributor = _feeDistributor;\\n    }\\n\\n    function setZapContract(address _zapContract, bool _excluded)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        emit UpdatedZapContract(_zapContract, _excluded);\\n        zapContracts[_zapContract] = _excluded;\\n    }\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        emit FeeExclusion(_excludedAddr, excluded);\\n        excludedFromFees[_excludedAddr] = excluded;\\n    }\\n\\n    function setEligibilityManager(address _eligibilityManager)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        emit NewEligibilityManager(eligibilityManager, _eligibilityManager);\\n        eligibilityManager = _eligibilityManager;\\n    }\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        VaultFees memory fees = _vaultFees[vaultId];\\n        if (fees.active) {\\n            return (\\n                uint256(fees.mintFee),\\n                uint256(fees.randomRedeemFee),\\n                uint256(fees.targetRedeemFee),\\n                uint256(fees.randomSwapFee),\\n                uint256(fees.targetSwapFee)\\n            );\\n        }\\n\\n        return (\\n            uint256(factoryMintFee),\\n            uint256(factoryRandomRedeemFee),\\n            uint256(factoryTargetRedeemFee),\\n            uint256(factoryRandomSwapFee),\\n            uint256(factoryTargetSwapFee)\\n        );\\n    }\\n\\n    function isLocked(uint256 lockId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return isPaused[lockId];\\n    }\\n\\n    function vaultsForAsset(address assetAddress)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        return _vaultsForAsset[assetAddress];\\n    }\\n\\n    function vault(uint256 vaultId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return vaults[vaultId];\\n    }\\n\\n    function allVaults()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        return vaults;\\n    }\\n\\n    function numVaults() external view virtual override returns (uint256) {\\n        return vaults.length;\\n    }\\n\\n    function deployVault(\\n        string memory name,\\n        string memory symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) internal returns (address) {\\n        address newBeaconProxy = address(new BeaconProxy(address(this), \\\"\\\"));\\n        NFTXVaultUpgradeable(newBeaconProxy).__NFTXVault_init(\\n            name,\\n            symbol,\\n            _assetAddress,\\n            is1155,\\n            allowAllItems\\n        );\\n        // Manager for configuration.\\n        NFTXVaultUpgradeable(newBeaconProxy).setManager(msg.sender);\\n        // Owner for administrative functions.\\n        NFTXVaultUpgradeable(newBeaconProxy).transferOwnership(owner());\\n        return newBeaconProxy;\\n    }\\n}\\n\",\"keccak256\":\"0x7af12c1b2484763944b073761e9d5b288204132c42b431cb919bb94db4259404\",\"license\":\"MIT\"},\"src/v2/NFTXVaultUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/OwnableUpgradeable.sol\\\";\\nimport \\\"./util/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./util/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./token/ERC20FlashMintUpgradeable.sol\\\";\\nimport \\\"./token/ERC721SafeHolderUpgradeable.sol\\\";\\nimport \\\"./token/ERC1155SafeHolderUpgradeable.sol\\\";\\nimport \\\"./token/IERC1155Upgradeable.sol\\\";\\nimport \\\"./token/IERC721Upgradeable.sol\\\";\\nimport \\\"./interface/INFTXVault.sol\\\";\\nimport \\\"./interface/INFTXEligibilityManager.sol\\\";\\nimport \\\"./interface/INFTXFeeDistributor.sol\\\";\\n\\n// Authors: @0xKiwi_ and @alexgausman.\\n\\n// TODO: organize using comment blocks\\ncontract NFTXVaultUpgradeable is\\n    OwnableUpgradeable,\\n    ERC20FlashMintUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC721SafeHolderUpgradeable,\\n    ERC1155SafeHolderUpgradeable,\\n    INFTXVault\\n{\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    uint256 constant base = 10 ** 18;\\n\\n    uint256 public override vaultId;\\n    address public override manager;\\n    address public override assetAddress;\\n    INFTXVaultFactory public override vaultFactory;\\n    INFTXEligibility public override eligibilityStorage;\\n\\n    uint256 randNonce;\\n    uint256 private UNUSED_FEE1;\\n    uint256 private UNUSED_FEE2;\\n    uint256 private UNUSED_FEE3;\\n\\n    bool public override is1155;\\n    bool public override allowAllItems;\\n    bool public override enableMint;\\n    bool public override enableRandomRedeem;\\n    bool public override enableTargetRedeem;\\n\\n    EnumerableSetUpgradeable.UintSet holdings;\\n    mapping(uint256 => uint256) quantity1155;\\n\\n    bool public override enableRandomSwap;\\n    bool public override enableTargetSwap;\\n\\n    function __NFTXVault_init(\\n        string memory _name,\\n        string memory _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) public virtual override initializer {\\n        __Ownable_init();\\n        __ERC20_init(_name, _symbol);\\n        require(_assetAddress != address(0), \\\"Asset != address(0)\\\");\\n        assetAddress = _assetAddress;\\n        vaultFactory = INFTXVaultFactory(msg.sender);\\n        vaultId = vaultFactory.numVaults();\\n        is1155 = _is1155;\\n        allowAllItems = _allowAllItems;\\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\\n        setVaultFeatures(\\n            true /*enableMint*/,\\n            true /*enableRandomRedeem*/,\\n            true /*enableTargetRedeem*/,\\n            true /*enableRandomSwap*/,\\n            true /*enableTargetSwap*/\\n        );\\n    }\\n\\n    function finalizeVault() external virtual override {\\n        setManager(address(0));\\n    }\\n\\n    // Added in v1.0.3.\\n    function setVaultMetadata(\\n        string calldata name_,\\n        string calldata symbol_\\n    ) external virtual override {\\n        onlyPrivileged();\\n        _setMetadata(name_, symbol_);\\n    }\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) public virtual override {\\n        onlyPrivileged();\\n        enableMint = _enableMint;\\n        enableRandomRedeem = _enableRandomRedeem;\\n        enableTargetRedeem = _enableTargetRedeem;\\n        enableRandomSwap = _enableRandomSwap;\\n        enableTargetSwap = _enableTargetSwap;\\n\\n        emit EnableMintUpdated(_enableMint);\\n        emit EnableRandomRedeemUpdated(_enableRandomRedeem);\\n        emit EnableTargetRedeemUpdated(_enableTargetRedeem);\\n        emit EnableRandomSwapUpdated(_enableRandomSwap);\\n        emit EnableTargetSwapUpdated(_enableTargetSwap);\\n    }\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) public virtual override {\\n        onlyPrivileged();\\n        vaultFactory.setVaultFees(\\n            vaultId,\\n            _mintFee,\\n            _randomRedeemFee,\\n            _targetRedeemFee,\\n            _randomSwapFee,\\n            _targetSwapFee\\n        );\\n    }\\n\\n    function disableVaultFees() public virtual override {\\n        onlyPrivileged();\\n        vaultFactory.disableVaultFees(vaultId);\\n    }\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external virtual override returns (address) {\\n        onlyPrivileged();\\n        require(\\n            address(eligibilityStorage) == address(0),\\n            \\\"NFTXVault: eligibility already set\\\"\\n        );\\n        INFTXEligibilityManager eligManager = INFTXEligibilityManager(\\n            vaultFactory.eligibilityManager()\\n        );\\n        address _eligibility = eligManager.deployEligibility(\\n            moduleIndex,\\n            initData\\n        );\\n        eligibilityStorage = INFTXEligibility(_eligibility);\\n        // Toggle this to let the contract know to check eligibility now.\\n        allowAllItems = false;\\n        emit EligibilityDeployed(moduleIndex, _eligibility);\\n        return _eligibility;\\n    }\\n\\n    // // This function allows for the manager to set their own arbitrary eligibility contract.\\n    // // Once eligiblity is set, it cannot be unset or changed.\\n    // Disabled for launch.\\n    // function setEligibilityStorage(address _newEligibility) public virtual {\\n    //     onlyPrivileged();\\n    //     require(\\n    //         address(eligibilityStorage) == address(0),\\n    //         \\\"NFTXVault: eligibility already set\\\"\\n    //     );\\n    //     eligibilityStorage = INFTXEligibility(_newEligibility);\\n    //     // Toggle this to let the contract know to check eligibility now.\\n    //     allowAllItems = false;\\n    //     emit CustomEligibilityDeployed(address(_newEligibility));\\n    // }\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) public virtual override {\\n        onlyPrivileged();\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external virtual override returns (uint256) {\\n        return mintTo(tokenIds, amounts, msg.sender);\\n    }\\n\\n    function mintTo(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts /* ignored for ERC721 vaults */,\\n        address to\\n    ) public virtual override nonReentrant returns (uint256) {\\n        onlyOwnerIfPaused(1);\\n        require(enableMint, \\\"Minting not enabled\\\");\\n        // Take the NFTs.\\n        uint256 count = receiveNFTs(tokenIds, amounts);\\n\\n        // Mint to the user.\\n        _mint(to, base * count);\\n        uint256 totalFee = mintFee() * count;\\n        _chargeAndDistributeFees(to, totalFee);\\n\\n        emit Minted(tokenIds, amounts, to);\\n        return count;\\n    }\\n\\n    function redeem(\\n        uint256 amount,\\n        uint256[] calldata specificIds\\n    ) external virtual override returns (uint256[] memory) {\\n        return redeemTo(amount, specificIds, msg.sender);\\n    }\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] memory specificIds,\\n        address to\\n    ) public virtual override nonReentrant returns (uint256[] memory) {\\n        onlyOwnerIfPaused(2);\\n        require(\\n            amount == specificIds.length || enableRandomRedeem,\\n            \\\"NFTXVault: Random redeem not enabled\\\"\\n        );\\n        require(\\n            specificIds.length == 0 || enableTargetRedeem,\\n            \\\"NFTXVault: Target redeem not enabled\\\"\\n        );\\n\\n        // We burn all from sender and mint to fee receiver to reduce costs.\\n        _burn(msg.sender, base * amount);\\n\\n        // Pay the tokens + toll.\\n        (\\n            ,\\n            uint256 _randomRedeemFee,\\n            uint256 _targetRedeemFee,\\n            ,\\n\\n        ) = vaultFees();\\n        uint256 totalFee = (_targetRedeemFee * specificIds.length) +\\n            (_randomRedeemFee * (amount - specificIds.length));\\n        _chargeAndDistributeFees(msg.sender, totalFee);\\n\\n        // Withdraw from vault.\\n        uint256[] memory redeemedIds = withdrawNFTsTo(amount, specificIds, to);\\n        emit Redeemed(redeemedIds, specificIds, to);\\n        return redeemedIds;\\n    }\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\\n        uint256[] calldata specificIds\\n    ) external virtual override returns (uint256[] memory) {\\n        return swapTo(tokenIds, amounts, specificIds, msg.sender);\\n    }\\n\\n    function swapTo(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts /* ignored for ERC721 vaults */,\\n        uint256[] memory specificIds,\\n        address to\\n    ) public virtual override nonReentrant returns (uint256[] memory) {\\n        onlyOwnerIfPaused(3);\\n        uint256 count;\\n        if (is1155) {\\n            for (uint256 i; i < tokenIds.length; ++i) {\\n                uint256 amount = amounts[i];\\n                require(amount != 0, \\\"NFTXVault: transferring < 1\\\");\\n                count += amount;\\n            }\\n        } else {\\n            count = tokenIds.length;\\n        }\\n\\n        require(\\n            count == specificIds.length || enableRandomSwap,\\n            \\\"NFTXVault: Random swap disabled\\\"\\n        );\\n        require(\\n            specificIds.length == 0 || enableTargetSwap,\\n            \\\"NFTXVault: Target swap disabled\\\"\\n        );\\n\\n        (, , , uint256 _randomSwapFee, uint256 _targetSwapFee) = vaultFees();\\n        uint256 totalFee = (_targetSwapFee * specificIds.length) +\\n            (_randomSwapFee * (count - specificIds.length));\\n        _chargeAndDistributeFees(msg.sender, totalFee);\\n\\n        // Give the NFTs first, so the user wont get the same thing back, just to be nice.\\n        uint256[] memory ids = withdrawNFTsTo(count, specificIds, to);\\n\\n        receiveNFTs(tokenIds, amounts);\\n\\n        emit Swapped(tokenIds, amounts, specificIds, ids, to);\\n        return ids;\\n    }\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override returns (bool) {\\n        onlyOwnerIfPaused(4);\\n        return super.flashLoan(receiver, token, amount, data);\\n    }\\n\\n    function mintFee() public view virtual override returns (uint256) {\\n        (uint256 _mintFee, , , , ) = vaultFactory.vaultFees(vaultId);\\n        return _mintFee;\\n    }\\n\\n    function randomRedeemFee() public view virtual override returns (uint256) {\\n        (, uint256 _randomRedeemFee, , , ) = vaultFactory.vaultFees(vaultId);\\n        return _randomRedeemFee;\\n    }\\n\\n    function targetRedeemFee() public view virtual override returns (uint256) {\\n        (, , uint256 _targetRedeemFee, , ) = vaultFactory.vaultFees(vaultId);\\n        return _targetRedeemFee;\\n    }\\n\\n    function randomSwapFee() public view virtual override returns (uint256) {\\n        (, , , uint256 _randomSwapFee, ) = vaultFactory.vaultFees(vaultId);\\n        return _randomSwapFee;\\n    }\\n\\n    function targetSwapFee() public view virtual override returns (uint256) {\\n        (, , , , uint256 _targetSwapFee) = vaultFactory.vaultFees(vaultId);\\n        return _targetSwapFee;\\n    }\\n\\n    function vaultFees()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256, uint256, uint256, uint256, uint256)\\n    {\\n        return vaultFactory.vaultFees(vaultId);\\n    }\\n\\n    function allValidNFTs(\\n        uint256[] memory tokenIds\\n    ) public view virtual override returns (bool) {\\n        if (allowAllItems) {\\n            return true;\\n        }\\n\\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\\n        if (address(_eligibilityStorage) == address(0)) {\\n            return false;\\n        }\\n        return _eligibilityStorage.checkAllEligible(tokenIds);\\n    }\\n\\n    function nftIdAt(\\n        uint256 holdingsIndex\\n    ) external view virtual override returns (uint256) {\\n        return holdings.at(holdingsIndex);\\n    }\\n\\n    // Added in v1.0.3.\\n    function allHoldings()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = holdings.length();\\n        uint256[] memory idArray = new uint256[](len);\\n        for (uint256 i; i < len; ++i) {\\n            idArray[i] = holdings.at(i);\\n        }\\n        return idArray;\\n    }\\n\\n    // Added in v1.0.3.\\n    function totalHoldings() external view virtual override returns (uint256) {\\n        return holdings.length();\\n    }\\n\\n    // Added in v1.0.3.\\n    function version() external pure returns (string memory) {\\n        return \\\"v1.0.5\\\";\\n    }\\n\\n    // We set a hook to the eligibility module (if it exists) after redeems in case anything needs to be modified.\\n    function afterRedeemHook(uint256[] memory tokenIds) internal virtual {\\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\\n        if (address(_eligibilityStorage) == address(0)) {\\n            return;\\n        }\\n        _eligibilityStorage.afterRedeemHook(tokenIds);\\n    }\\n\\n    function receiveNFTs(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) internal virtual returns (uint256) {\\n        require(allValidNFTs(tokenIds), \\\"NFTXVault: not eligible\\\");\\n        uint256 length = tokenIds.length;\\n        if (is1155) {\\n            // This is technically a check, so placing it before the effect.\\n            IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\\n                msg.sender,\\n                address(this),\\n                tokenIds,\\n                amounts,\\n                \\\"\\\"\\n            );\\n\\n            uint256 count;\\n            for (uint256 i; i < length; ++i) {\\n                uint256 tokenId = tokenIds[i];\\n                uint256 amount = amounts[i];\\n                require(amount != 0, \\\"NFTXVault: transferring < 1\\\");\\n                if (quantity1155[tokenId] == 0) {\\n                    holdings.add(tokenId);\\n                }\\n                quantity1155[tokenId] += amount;\\n                count += amount;\\n            }\\n            return count;\\n        } else {\\n            address _assetAddress = assetAddress;\\n            for (uint256 i; i < length; ++i) {\\n                uint256 tokenId = tokenIds[i];\\n                // We may already own the NFT here so we check in order:\\n                // Does the vault own it?\\n                //   - If so, check if its in holdings list\\n                //      - If so, we reject. This means the NFT has already been claimed for.\\n                //      - If not, it means we have not yet accounted for this NFT, so we continue.\\n                //   -If not, we \\\"pull\\\" it from the msg.sender and add to holdings.\\n                transferFromERC721(_assetAddress, tokenId);\\n                holdings.add(tokenId);\\n            }\\n            return length;\\n        }\\n    }\\n\\n    function withdrawNFTsTo(\\n        uint256 amount,\\n        uint256[] memory specificIds,\\n        address to\\n    ) internal virtual returns (uint256[] memory) {\\n        bool _is1155 = is1155;\\n        address _assetAddress = assetAddress;\\n        uint256[] memory redeemedIds = new uint256[](amount);\\n        uint256 specificLength = specificIds.length;\\n        for (uint256 i; i < amount; ++i) {\\n            // This will always be fine considering the validations made above.\\n            uint256 tokenId = i < specificLength\\n                ? specificIds[i]\\n                : getRandomTokenIdFromVault();\\n            redeemedIds[i] = tokenId;\\n\\n            if (_is1155) {\\n                quantity1155[tokenId] -= 1;\\n                if (quantity1155[tokenId] == 0) {\\n                    holdings.remove(tokenId);\\n                }\\n\\n                IERC1155Upgradeable(_assetAddress).safeTransferFrom(\\n                    address(this),\\n                    to,\\n                    tokenId,\\n                    1,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                holdings.remove(tokenId);\\n                transferERC721(_assetAddress, to, tokenId);\\n            }\\n        }\\n        afterRedeemHook(redeemedIds);\\n        return redeemedIds;\\n    }\\n\\n    function _chargeAndDistributeFees(\\n        address user,\\n        uint256 amount\\n    ) internal virtual {\\n        // Do not charge fees if the zap contract is calling\\n        // Added in v1.0.3. Changed to mapping in v1.0.5.\\n\\n        INFTXVaultFactory _vaultFactory = vaultFactory;\\n\\n        if (_vaultFactory.excludedFromFees(msg.sender)) {\\n            return;\\n        }\\n\\n        // Mint fees directly to the distributor and distribute.\\n        if (amount > 0) {\\n            address feeDistributor = _vaultFactory.feeDistributor();\\n            // Changed to a _transfer() in v1.0.3.\\n            _transfer(user, feeDistributor, amount);\\n            INFTXFeeDistributor(feeDistributor).distribute(vaultId);\\n        }\\n    }\\n\\n    function transferERC721(\\n        address assetAddr,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Changed in v1.0.4.\\n            data = abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                to,\\n                tokenId\\n            );\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            data = abi.encodeWithSignature(\\n                \\\"transferPunk(address,uint256)\\\",\\n                to,\\n                tokenId\\n            );\\n        } else {\\n            // Default.\\n            data = abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256)\\\",\\n                address(this),\\n                to,\\n                tokenId\\n            );\\n        }\\n        (bool success, bytes memory returnData) = address(assetAddr).call(data);\\n        require(success, string(returnData));\\n    }\\n\\n    function transferFromERC721(\\n        address assetAddr,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Cryptokitties.\\n            data = abi.encodeWithSignature(\\n                \\\"transferFrom(address,address,uint256)\\\",\\n                msg.sender,\\n                address(this),\\n                tokenId\\n            );\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            // Fix here for frontrun attack. Added in v1.0.2.\\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\\n                \\\"punkIndexToAddress(uint256)\\\",\\n                tokenId\\n            );\\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\\n                .staticcall(punkIndexToAddress);\\n            address nftOwner = abi.decode(result, (address));\\n            require(\\n                checkSuccess && nftOwner == msg.sender,\\n                \\\"Not the NFT owner\\\"\\n            );\\n            data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n        } else {\\n            // Default.\\n            // Allow other contracts to \\\"push\\\" into the vault, safely.\\n            // If we already have the token requested, make sure we don't have it in the list to prevent duplicate minting.\\n            if (\\n                IERC721Upgradeable(assetAddress).ownerOf(tokenId) ==\\n                address(this)\\n            ) {\\n                require(\\n                    !holdings.contains(tokenId),\\n                    \\\"Trying to use an owned NFT\\\"\\n                );\\n                return;\\n            } else {\\n                data = abi.encodeWithSignature(\\n                    \\\"safeTransferFrom(address,address,uint256)\\\",\\n                    msg.sender,\\n                    address(this),\\n                    tokenId\\n                );\\n            }\\n        }\\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n        require(success, string(resultData));\\n    }\\n\\n    function getRandomTokenIdFromVault() internal virtual returns (uint256) {\\n        uint256 randomIndex = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    blockhash(block.number - 1),\\n                    randNonce,\\n                    block.coinbase,\\n                    block.difficulty,\\n                    block.timestamp\\n                )\\n            )\\n        ) % holdings.length();\\n        ++randNonce;\\n        return holdings.at(randomIndex);\\n    }\\n\\n    function onlyPrivileged() internal view {\\n        if (manager == address(0)) {\\n            require(msg.sender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(msg.sender == manager, \\\"Not manager\\\");\\n        }\\n    }\\n\\n    function onlyOwnerIfPaused(uint256 lockId) internal view {\\n        require(\\n            !vaultFactory.isLocked(lockId) || msg.sender == owner(),\\n            \\\"Paused\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2645d5f07a9a17baebabcb23171303633a153b5d90ac720894f8505626cb74b4\",\"license\":\"MIT\"},\"src/v2/interface/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"src/v2/interface/IERC3156Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n */\\ninterface IERC3156FlashBorrowerUpgradeable {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n */\\ninterface IERC3156FlashLenderUpgradeable {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc3dd354cf226f6ef2e87cae8e262c74dce01a1bc6d90557b9c64eb736293a19a\",\"license\":\"MIT\"},\"src/v2/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"src/v2/interface/INFTXEligibilityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibilityManager {\\n    function nftxVaultFactory() external returns (address);\\n\\n    function eligibilityImpl() external returns (address);\\n\\n    function deployEligibility(uint256 vaultId, bytes calldata initData)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x750a9fd711c960997a5027eaac03d77385b1e1cc0d608f629e807233b1731262\",\"license\":\"MIT\"},\"src/v2/interface/INFTXFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXFeeDistributor {\\n    struct FeeReceiver {\\n        uint256 allocPoint;\\n        address receiver;\\n        bool isContract;\\n    }\\n\\n    function nftxVaultFactory() external returns (address);\\n\\n    function lpStaking() external returns (address);\\n\\n    function treasury() external returns (address);\\n\\n    function defaultTreasuryAlloc() external returns (uint256);\\n\\n    function defaultLPAlloc() external returns (uint256);\\n\\n    function allocTotal(uint256 vaultId) external returns (uint256);\\n\\n    function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\\n\\n    // Write functions.\\n    function __FeeDistributor__init__(address _lpStaking, address _treasury)\\n        external;\\n\\n    function rescueTokens(address token) external;\\n\\n    function distribute(uint256 vaultId) external;\\n\\n    function addReceiver(\\n        uint256 _vaultId,\\n        uint256 _allocPoint,\\n        address _receiver,\\n        bool _isContract\\n    ) external;\\n\\n    function initializeVaultReceivers(uint256 _vaultId) external;\\n\\n    function changeMultipleReceiverAlloc(\\n        uint256[] memory _vaultIds,\\n        uint256[] memory _receiverIdxs,\\n        uint256[] memory allocPoints\\n    ) external;\\n\\n    function changeMultipleReceiverAddress(\\n        uint256[] memory _vaultIds,\\n        uint256[] memory _receiverIdxs,\\n        address[] memory addresses,\\n        bool[] memory isContracts\\n    ) external;\\n\\n    function changeReceiverAlloc(\\n        uint256 _vaultId,\\n        uint256 _idx,\\n        uint256 _allocPoint\\n    ) external;\\n\\n    function changeReceiverAddress(\\n        uint256 _vaultId,\\n        uint256 _idx,\\n        address _address,\\n        bool _isContract\\n    ) external;\\n\\n    function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\\n\\n    // Configuration functions.\\n    function setTreasuryAddress(address _treasury) external;\\n\\n    function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\\n\\n    function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint)\\n        external;\\n\\n    function setLPStakingAddress(address _lpStaking) external;\\n\\n    function setNFTXVaultFactory(address _factory) external;\\n\\n    function setDefaultLPAlloc(uint256 _allocPoint) external;\\n}\\n\",\"keccak256\":\"0x7ef389ef9a6316b3f0c414b629de700774ebbbc76cef2427506dcfa5b523c10e\",\"license\":\"MIT\"},\"src/v2/interface/INFTXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"./INFTXVaultFactory.sol\\\";\\nimport \\\"./INFTXEligibility.sol\\\";\\n\\n// TODO: organize using comment blocks\\ninterface INFTXVault is IERC20Upgradeable {\\n    function manager() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function eligibilityStorage() external view returns (INFTXEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees()\\n        external\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n    event EnableRandomSwapUpdated(bool enabled);\\n    event EnableTargetSwapUpdated(bool enabled);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(\\n        string memory name_,\\n        string memory symbol_\\n    ) external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(\\n        uint256 amount,\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(\\n        uint256[] calldata tokenIds\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7a16086f8385181df9f1fa2c3c6e3556e19c3511f33e84df4d94a057347c7dc\",\"license\":\"MIT\"},\"src/v2/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function zapContracts(address addr) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event UpdatedZapContract(address zap, bool excluded);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract, bool _excluded) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0xb6d64ca7f387cb11b1a345add3556c21d2b3c9fa9b8d8645a3312bcbb33ce9bb\",\"license\":\"MIT\"},\"src/v2/proxy/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../util/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(\\n            _BEACON_SLOT ==\\n                bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1)\\n        );\\n        _setBeacon(beacon, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return IBeacon(_beacon()).childImplementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).childImplementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(\\n                _implementation(),\\n                data,\\n                \\\"BeaconProxy: function call failed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c221e7697ffcf03a409a98edbbab1d465c7ef10ab4f30ac53171fd667045399\",\"license\":\"MIT\"},\"src/v2/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0x9992f3a4f9a6162af7eb1ef2267eb6c7e2af32f1acd623eab1aa732e315720fe\",\"license\":\"MIT\"},\"src/v2/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"},\"src/v2/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x32b48b65e8bceba29c50212376de0cd9c69e61617557ecb783d3a79a175db58c\",\"license\":\"MIT\"},\"src/v2/proxy/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../util/Address.sol\\\";\\nimport \\\"../util/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, OwnableUpgradeable {\\n    address private _childImplementation;\\n\\n    /**\\n     * @dev Emitted when the child implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed childImplementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    function __UpgradeableBeacon__init(address childImplementation_)\\n        public\\n        initializer\\n    {\\n        _setChildImplementation(childImplementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current child implementation address.\\n     */\\n    function childImplementation()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _childImplementation;\\n    }\\n\\n    function implementation() public view virtual override returns (address) {\\n        return _childImplementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function upgradeChildTo(address newChildImplementation)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        _setChildImplementation(newChildImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function _setChildImplementation(address newChildImplementation) private {\\n        require(\\n            Address.isContract(newChildImplementation),\\n            \\\"UpgradeableBeacon: child implementation is not a contract\\\"\\n        );\\n        _childImplementation = newChildImplementation;\\n        emit Upgraded(newChildImplementation);\\n    }\\n}\\n\",\"keccak256\":\"0x58154b6e0db31ad06f429c0b0e756928f2b7b697efe1348e1efedbc18005a77a\",\"license\":\"MIT\"},\"src/v2/token/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/ERC165Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is\\n    ERC165Upgradeable,\\n    IERC1155ReceiverUpgradeable\\n{\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd7f7789da0b41f951db4f53a48f704c1b22e3b248d8455a5e52ee1becf564673\",\"license\":\"MIT\"},\"src/v2/token/ERC1155SafeHolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155SafeHolderUpgradeable is ERC1155ReceiverUpgradeable {\\n    function onERC1155Received(\\n        address /** operator */,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address /** operator */,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x79367a9a3c7ad02c8b1250ae5aeb6ac38f3661d07dc408b7f7fd068b1cdffaba\",\"license\":\"MIT\"},\"src/v2/token/ERC20FlashMintUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../interface/IERC3156Upgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n */\\nabstract contract ERC20FlashMintUpgradeable is\\n    Initializable,\\n    ERC20Upgradeable,\\n    IERC3156FlashLenderUpgradeable\\n{\\n    function __ERC20FlashMint_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20FlashMint_init_unchained();\\n    }\\n\\n    function __ERC20FlashMint_init_unchained() internal initializer {}\\n\\n    bytes32 private constant RETURN_VALUE =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amont of token that can be loaned.\\n     */\\n    function maxFlashLoan(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\\n    }\\n\\n    /**\\n     * @dev Returns the fee applied when doing flash loans. By default this\\n     * implementation has 0 fees. This function can be overloaded to make\\n     * the flash loan mechanism deflationary.\\n     * @param token The token to be flash loaned.\\n     * @param amount The amount of tokens to be loaned.\\n     * @return The fees applied to the corresponding flash loan.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(token == address(this), \\\"ERC20FlashMint: wrong token\\\");\\n        // silence warning about unused variable without the addition of bytecode.\\n        amount;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Performs a flash loan. New tokens are minted and sent to the\\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\\n     * interface. By the end of the flash loan, the receiver is expected to own\\n     * amount + fee tokens and have them approved back to the token contract itself so\\n     * they can be burned.\\n     * @param receiver The receiver of the flash loan. Should implement the\\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\\n     * @param token The token to be flash loaned. Only `address(this)` is\\n     * supported.\\n     * @param amount The amount of tokens to be loaned.\\n     * @param data An arbitrary datafield that is passed to the receiver.\\n     * @return `true` is the flash loan was successfull.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override returns (bool) {\\n        uint256 fee = flashFee(token, amount);\\n        _mint(address(receiver), amount);\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) ==\\n                RETURN_VALUE,\\n            \\\"ERC20FlashMint: invalid return value\\\"\\n        );\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        require(\\n            currentAllowance >= amount + fee,\\n            \\\"ERC20FlashMint: allowance does not allow refund\\\"\\n        );\\n        _approve(\\n            address(receiver),\\n            address(this),\\n            currentAllowance - amount - fee\\n        );\\n        _burn(address(receiver), amount + fee);\\n        return true;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd3d57c0b7fa17a6f13fd29de9b7c1cdb7e2459fcaf79cd8fc04044f74f1aeac9\",\"license\":\"MIT\"},\"src/v2/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../util/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IERC20Upgradeable,\\n    IERC20Metadata\\n{\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xbf251e6b6effb5717664c474e2adda144585a5d45da12f7c24c3df05797de67f\",\"license\":\"MIT\"},\"src/v2/token/ERC721SafeHolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721SafeHolderUpgradeable is IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address /** operator */,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8ef4146754a5a9e5e9a7935fb0c4df5cfae23f889141d53febd740d316090bc5\",\"license\":\"MIT\"},\"src/v2/token/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6d374da0f9e9acbfa496ca04a6828efe7cf00845bb4918e3bdf794701efabde8\",\"license\":\"MIT\"},\"src/v2/token/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdef1a66125379a97fe41534944cc128c8b93287690b114df5365033d385c148e\",\"license\":\"MIT\"},\"src/v2/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1e18474180ce77dc747bb185501fd4d5395cb6096274d3d8f4977d9ed11619c9\",\"license\":\"MIT\"},\"src/v2/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"src/v2/token/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"src/v2/token/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x77a17ee7d78abd229ded2dd4470e9a45287cc66b73ffca0b3dc2bbba5f7c82c1\",\"license\":\"MIT\"},\"src/v2/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"src/v2/util/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d6fce5d0897740611b909a023e797e08d324503881d9839969124076fe9eb44\",\"license\":\"MIT\"},\"src/v2/util/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x556f1630ad6f0c8e666a674dc9bd279ca2eeb3d20fb2211c05ba7fdb9ed5ca53\",\"license\":\"MIT\"},\"src/v2/util/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xfb89cba6a09fb76fc81f2ecbb1a666d8c90645a634ff1ebf417d4b47418c8feb\",\"license\":\"MIT\"},\"src/v2/util/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x76303f728817d84e7de3b7bb8839a3b30f5e078e223c7dbbbcc45da3d4dc905c\",\"license\":\"MIT\"},\"src/v2/util/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\ncontract PausableUpgradeable is OwnableUpgradeable {\\n    function __Pausable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    event SetPaused(uint256 lockId, bool paused);\\n    event SetIsGuardian(address addr, bool isGuardian);\\n\\n    mapping(address => bool) public isGuardian;\\n    mapping(uint256 => bool) public isPaused;\\n\\n    // 0 : createVault\\n    // 1 : mint\\n    // 2 : redeem\\n    // 3 : swap\\n    // 4 : flashloan\\n\\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\\n        require(!isPaused[lockId] || msg.sender == owner(), \\\"Paused\\\");\\n    }\\n\\n    function unpause(uint256 lockId) public virtual onlyOwner {\\n        isPaused[lockId] = false;\\n        emit SetPaused(lockId, false);\\n    }\\n\\n    function pause(uint256 lockId) public virtual {\\n        require(isGuardian[msg.sender], \\\"Can't pause\\\");\\n        isPaused[lockId] = true;\\n        emit SetPaused(lockId, true);\\n    }\\n\\n    function setIsGuardian(address addr, bool _isGuardian)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        isGuardian[addr] = _isGuardian;\\n        emit SetIsGuardian(addr, _isGuardian);\\n    }\\n}\\n\",\"keccak256\":\"0xd540474b3adf43fe5c4a47b11b89a452c1f16f36b05e3f4ca626b71a1e33b689\",\"license\":\"MIT\"},\"src/v2/util/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa9f12a4d5b2176c3699ea7fe4234ffa276c461c89400242cd2f85e32e92bd627\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e9f806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620002c75760003560e01c80637c0f44a2116200017c578063c6172ecd11620000e9578063ef8658db1162000097578063f6aacfb1116200007a578063f6aacfb1146200067e578063fabc1cbc14620006a4578063fc21c3f814620006bb57600080fd5b8063ef8658db1462000650578063f2fde38b146200066757600080fd5b8063da52571611620000cc578063da52571614620004bd578063dbe66ca01462000613578063e5956027146200063957600080fd5b8063c6172ecd14620005d6578063ccfc2e8d14620005fc57600080fd5b806390f434d811620001475780639e1a8824116200012a5780639e1a88241462000584578063bdf2a43c1462000599578063c182f2b214620005bf57600080fd5b806390f434d814620005565780639b084d1b146200056d57600080fd5b80637c0f44a214620004f55780637c77b616146200051657806381a36fb6146200052d5780638da5cb5b146200054457600080fd5b806323845fb511620002385780633ec93d9c11620001e65780635c60da1b11620001c95780635c60da1b14620004bd5780636d14584614620004cf578063715018a614620004eb57600080fd5b80633ec93d9c146200048f57806340f2d55514620004a657600080fd5b8063264a6208116200021b578063264a6208146200044e57806330b94cd5146200046157806336b92a23146200047857600080fd5b806323845fb514620004235780632549dad9146200043a57600080fd5b8063136439dd11620002965780631f1713fc11620002795780631f1713fc14620003b5578063219962d214620003cc5780632206137914620003e357600080fd5b8063136439dd146200038857806314c77faa14620003a157600080fd5b8063063effeb14620002cc57806309d25e7914620002ee5780630c68ba2114620003245780630d43e8ad146200035b575b600080fd5b620002d6620006d0565b604051620002e5919062002212565b60405180910390f35b6071546200030a90600160801b900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001620002e5565b6200034a620003353660046200227e565b60656020526000908152604090205460ff1681565b6040519015158152602001620002e5565b606a546200036f906001600160a01b031681565b6040516001600160a01b039091168152602001620002e5565b6200039f62000399366004620022a3565b62000734565b005b606b546200036f906001600160a01b031681565b6200039f620003c63660046200227e565b620007f1565b6200039f620003dd366004620022bd565b6200084a565b620003fa620003f4366004620022a3565b62000c5a565b604080519586526020860194909452928401919091526060830152608082015260a001620002e5565b6200039f6200043436600462002312565b62000d9a565b6069546200036f906001600160a01b031681565b606e545b604051908152602001620002e5565b6200039f6200047236600462002312565b62000e48565b6200039f6200048936600462002312565b62000f01565b6200039f620004a03660046200234a565b62000fba565b6200039f620004b73660046200227e565b620010c9565b6067546001600160a01b03166200036f565b6071546200030a90600160c01b900467ffffffffffffffff1681565b6200039f6200117d565b6071546200030a9068010000000000000000900467ffffffffffffffff1681565b6200039f62000527366004620022a3565b62001212565b6200036f6200053e366004620022a3565b62001289565b6033546001600160a01b03166200036f565b620002d6620005673660046200227e565b620012bc565b6200039f6200057e36600462002379565b62001334565b6071546200030a9067ffffffffffffffff1681565b6200034a620005aa366004620022a3565b60666020526000908152604090205460ff1681565b6200039f620005d0366004620022a3565b620015f3565b6200034a620005e73660046200227e565b60736020526000908152604090205460ff1681565b6200039f6200060d3660046200227e565b62001709565b6200034a620006243660046200227e565b606f6020526000908152604090205460ff1681565b6200039f6200064a3660046200227e565b620017d1565b620004526200066136600462002460565b62001895565b6200039f620006783660046200227e565b62001aa8565b6200034a6200068f366004620022a3565b60009081526066602052604090205460ff1690565b6200039f620006b5366004620022a3565b62001bcd565b6072546200030a9067ffffffffffffffff1681565b6060606e8054806020026020016040519081016040528092919081815260200182805480156200072a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200070b575b5050505050905090565b3360009081526065602052604090205460ff16620007995760405162461bcd60e51b815260206004820152600b60248201527f43616e277420706175736500000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b6033546001600160a01b031633146200083c5760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b620008478162001c66565b50565b6033546001600160a01b03163314620008df576000606e878154811062000875576200087562002503565b6000918252602090912001546001600160a01b03169050338114620008dd5760405162461bcd60e51b815260206004820152600e60248201527f4e6f742066726f6d207661756c74000000000000000000000000000000000000604482015260640162000790565b505b6706f05b59d3b200008511156200092e5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008411156200097d5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b20000831115620009cc5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b2000082111562000a1b5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b2000081111562000a6a5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6040518060c001604052806001151581526020018667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681526020018267ffffffffffffffff168152506070600088815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160116101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fd9ffbc90281646bcb01af117b3e6cd6ad280ffe01a9b09f6576155b4fa3f45c986868686868660405162000c4a96959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405180910390a1505050505050565b6000818152607060209081526040808320815160c081018352815460ff8116158015835267ffffffffffffffff61010083048116968401969096526901000000000000000000820486169483019490945271010000000000000000000000000000000000900484166060820152600190910154808416608083015268010000000000000000900490921660a0830152829182918291829162000d5257806020015167ffffffffffffffff16816040015167ffffffffffffffff16826060015167ffffffffffffffff16836080015167ffffffffffffffff168460a0015167ffffffffffffffff16955095509550955095505062000d91565b505060715460725467ffffffffffffffff808316965068010000000000000000830481169550600160801b830481169450600160c01b90920482169250165b91939590929450565b6033546001600160a01b0316331462000de55760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b6033546001600160a01b0316331462000e935760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b604080516001600160a01b038416815282151560208201527f7091fe081ceb2a09a20e86451ff5cba0b3ed3a6fc7fb6557147601a616459035910160405180910390a16001600160a01b03919091166000908152606f60205260409020805460ff1916911515919091179055565b6033546001600160a01b0316331462000f4c5760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b604080516001600160a01b038416815282151560208201527f076cbcb8e3c3f3f0bded4ccdaa7a15ce585507cb08d4b919280e3b691b8aec30910160405180910390a16001600160a01b03919091166000908152607360205260409020805460ff1916911515919091179055565b600054610100900460ff168062000fd4575060005460ff16155b620010395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff161580156200105c576000805461ffff19166101011790555b6200106662001d26565b6200107183620017d1565b6200107c8262001709565b620010b167016345785d8a000066b1a2bc2ec5000067016345785d8a000066b1a2bc2ec5000067016345785d8a000062001334565b8015620010c4576000805461ff00191690555b505050565b6033546001600160a01b03163314620011145760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b606b54604080516001600160a01b03928316815291831660208301527fdd1b73e02786644d6e9994c9d513f1058320c4ff857e1a76ded4c77f83ab3ea9910160405180910390a1606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314620011c85760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60008181526066602052604090205460ff1615806200123b57506033546001600160a01b031633145b620008475760405162461bcd60e51b815260206004820152600660248201527f5061757365640000000000000000000000000000000000000000000000000000604482015260640162000790565b6000606e8281548110620012a157620012a162002503565b6000918252602090912001546001600160a01b031692915050565b6001600160a01b0381166000908152606d60209081526040918290208054835181840281018401909452808452606093928301828280156200132857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001309575b50505050509050919050565b6033546001600160a01b031633146200137f5760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6706f05b59d3b20000851115620013ce5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008411156200141d5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008311156200146c5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b20000821115620014bb5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008111156200150a5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6071805467ffffffffffffffff8781166fffffffffffffffffffffffffffffffff19909216919091176801000000000000000087831602176fffffffffffffffffffffffffffffffff16600160801b8683160277ffffffffffffffffffffffffffffffffffffffffffffffff1617600160c01b85831602179091556072805467ffffffffffffffff1916918316919091179055604080518681526020810186905290810184905260608101839052608081018290527f5ece4b6d3e9829ead7e8adb5ab3a10f91b8547a80e9e96264fc5fe012f10937a9060a00160405180910390a15050505050565b6033546001600160a01b0316331462001688576000606e82815481106200161e576200161e62002503565b6000918252602090912001546001600160a01b03169050338114620016865760405162461bcd60e51b815260206004820152600960248201527f4e6f74207661756c740000000000000000000000000000000000000000000000604482015260640162000790565b505b6000818152607060205260409081902080547fffffffffffffff0000000000000000000000000000000000000000000000000016815560010180546fffffffffffffffffffffffffffffffff19169055517f52fa46cefef72586d9ef48406d9aa3772833013b97e06ad9bbb4f812b105aa6890620007e69083815260200190565b6033546001600160a01b03163314620017545760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6001600160a01b0381166200176857600080fd5b606a54604080516001600160a01b03928316815291831660208301527ff50858c0e53e1daa79884af03c6b676de789362564e7c27ff542914c0b513ea7910160405180910390a1606a80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680620017eb575060005460ff16155b620018505760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562001873576000805461ffff19166101011790555b6200187e8262001c66565b801562001891576000805461ff00191690555b5050565b6000620018a3600062001212565b606a546001600160a01b0316620018fd5760405162461bcd60e51b815260206004820152601860248201527f4e4654583a2046656520726563656976657220756e7365740000000000000000604482015260640162000790565b6000620019126067546001600160a01b031690565b6001600160a01b0316036200196a5760405162461bcd60e51b815260206004820181905260248201527f4e4654583a205661756c7420696d706c656d656e746174696f6e20756e736574604482015260640162000790565b60006200197b878787878762001de7565b606e80546001600160a01b038881166000908152606d6020908152604080832080546001808201835591855292842090920180548886166001600160a01b0319918216811790925587549384018855969093527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a9091018054909516909117909355606a549251630674f4a960e21b81526004810183905293945090929116906319d3d2a490602401600060405180830381600087803b15801562001a3f57600080fd5b505af115801562001a54573d6000803e3d6000fd5b5050604080516001600160a01b0380871682528a1660208201528493507fb94e8fc8ad4a054390a833a774eabcd7c0547c9a62d1fafb5c54dd761c6f0aac92500160405180910390a2979650505050505050565b6033546001600160a01b0316331462001af35760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6001600160a01b03811662001b715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840162000790565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331462001c185760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d749101620007e6565b803b62001cdc5760405162461bcd60e51b815260206004820152603960248201527f5570677261646561626c65426561636f6e3a206368696c6420696d706c656d6560448201527f6e746174696f6e206973206e6f74206120636f6e747261637400000000000000606482015260840162000790565b606780546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff168062001d40575060005460ff16155b62001da55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562001dc8576000805461ffff19166101011790555b62001dd262001f9e565b801562000847576000805461ff001916905550565b6000803060405162001df99062002204565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562001e35573d6000803e3d6000fd5b506040516339e1163160e21b81529091506001600160a01b0382169063e78458c49062001e6f908a908a908a908a908a9060040162002569565b600060405180830381600087803b15801562001e8a57600080fd5b505af115801562001e9f573d6000803e3d6000fd5b505060405163d0ebdbe760e01b81523360048201526001600160a01b038416925063d0ebdbe79150602401600060405180830381600087803b15801562001ee557600080fd5b505af115801562001efa573d6000803e3d6000fd5b50505050806001600160a01b031663f2fde38b62001f206033546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801562001f7a57600080fd5b505af115801562001f8f573d6000803e3d6000fd5b50929998505050505050505050565b600054610100900460ff168062001fb8575060005460ff16155b6200201d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562002040576000805461ffff19166101011790555b6200204a62002054565b62001dd26200210a565b600054610100900460ff16806200206e575060005460ff16155b620020d35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562001dd2576000805461ffff1916610101179055801562000847576000805461ff001916905550565b600054610100900460ff168062002124575060005460ff16155b620021895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff16158015620021ac576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801562000847576000805461ff001916905550565b6108b780620025bc83390190565b6020808252825182820181905260009190848201906040850190845b81811015620022555783516001600160a01b0316835292840192918401916001016200222e565b50909695505050505050565b80356001600160a01b03811681146200227957600080fd5b919050565b6000602082840312156200229157600080fd5b6200229c8262002261565b9392505050565b600060208284031215620022b657600080fd5b5035919050565b60008060008060008060c08789031215620022d757600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b803580151581146200227957600080fd5b600080604083850312156200232657600080fd5b620023318362002261565b9150620023416020840162002301565b90509250929050565b600080604083850312156200235e57600080fd5b620023698362002261565b9150620023416020840162002261565b600080600080600060a086880312156200239257600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620023dd57600080fd5b813567ffffffffffffffff80821115620023fb57620023fb620023b5565b604051601f8301601f19908116603f01168101908282118183101715620024265762002426620023b5565b816040528381528660208588010111156200244057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156200247957600080fd5b853567ffffffffffffffff808211156200249257600080fd5b620024a089838a01620023cb565b96506020880135915080821115620024b757600080fd5b50620024c688828901620023cb565b945050620024d76040870162002261565b9250620024e76060870162002301565b9150620024f76080870162002301565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015620025415760208185018101518683018201520162002523565b8181111562002554576000602083870101525b50601f01601f19169290920160200192915050565b60a0815260006200257e60a083018862002519565b828103602084015262002592818862002519565b6001600160a01b039690961660408401525050911515606083015215156080909101529291505056fe60806040526040516108b73803806108b783398101604081905261002291610418565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516104d8565b60008051602061087683398151915214610069576100696104fd565b610073828261007a565b505061057d565b61008d8261022660201b6100291760201c565b6100ec5760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610160826001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561012d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101519190610513565b61022660201b6100291760201c565b6101d25760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100e3565b6000805160206108768339815191528281558151156102215761021f6101f661022c565b83604051806060016040528060218152602001610896602191396102aa60201b61002f1760201c565b505b505050565b3b151590565b60006102446000805160206108768339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a59190610513565b905090565b6060833b6103095760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100e3565b600080856001600160a01b031685604051610324919061052e565b600060405180830381855af49150503d806000811461035f576040519150601f19603f3d011682016040523d82523d6000602084013e610364565b606091505b509092509050610375828286610381565b925050505b9392505050565b6060831561039057508161037a565b8251156103a05782518084602001fd5b8160405162461bcd60e51b81526004016100e3919061054a565b80516001600160a01b03811681146103d157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156104075781810151838201526020016103ef565b8381111561021f5750506000910152565b6000806040838503121561042b57600080fd5b610434836103ba565b60208401519092506001600160401b038082111561045157600080fd5b818501915085601f83011261046557600080fd5b815181811115610477576104776103d6565b604051601f8201601f19908116603f0116810190838211818310171561049f5761049f6103d6565b816040528281528860208487010111156104b857600080fd5b6104c98360208301602088016103ec565b80955050505050509250929050565b6000828210156104f857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561052557600080fd5b61037a826103ba565b600082516105408184602087016103ec565b9190910192915050565b60208152600082518060208401526105698160408501602087016103ec565b601f01601f19169190910160400192915050565b6102ea8061058c6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261012e565b6101cb565b565b3b151590565b6060833b6100aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100d29190610258565b600060405180830381855af49150503d806000811461010d576040519150601f19603f3d011682016040523d82523d6000602084013e610112565b606091505b50915091506101228282866101ef565b925050505b9392505050565b60006101587fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b73ffffffffffffffffffffffffffffffffffffffff1663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c69190610274565b905090565b3660008037600080366000845af43d6000803e8080156101ea573d6000f35b3d6000fd5b606083156101fe575081610127565b82511561020e5782518084602001fd5b8160405162461bcd60e51b81526004016100a191906102aa565b60005b8381101561024357818101518382015260200161022b565b83811115610252576000848401525b50505050565b6000825161026a818460208701610228565b9190910192915050565b60006020828403121561028657600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461012757600080fd5b60208152600082518060208401526102c9816040850160208701610228565b601f01601f1916919091016040019291505056fea164736f6c634300080f000aa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c634300080f000a",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002c75760003560e01c80637c0f44a2116200017c578063c6172ecd11620000e9578063ef8658db1162000097578063f6aacfb1116200007a578063f6aacfb1146200067e578063fabc1cbc14620006a4578063fc21c3f814620006bb57600080fd5b8063ef8658db1462000650578063f2fde38b146200066757600080fd5b8063da52571611620000cc578063da52571614620004bd578063dbe66ca01462000613578063e5956027146200063957600080fd5b8063c6172ecd14620005d6578063ccfc2e8d14620005fc57600080fd5b806390f434d811620001475780639e1a8824116200012a5780639e1a88241462000584578063bdf2a43c1462000599578063c182f2b214620005bf57600080fd5b806390f434d814620005565780639b084d1b146200056d57600080fd5b80637c0f44a214620004f55780637c77b616146200051657806381a36fb6146200052d5780638da5cb5b146200054457600080fd5b806323845fb511620002385780633ec93d9c11620001e65780635c60da1b11620001c95780635c60da1b14620004bd5780636d14584614620004cf578063715018a614620004eb57600080fd5b80633ec93d9c146200048f57806340f2d55514620004a657600080fd5b8063264a6208116200021b578063264a6208146200044e57806330b94cd5146200046157806336b92a23146200047857600080fd5b806323845fb514620004235780632549dad9146200043a57600080fd5b8063136439dd11620002965780631f1713fc11620002795780631f1713fc14620003b5578063219962d214620003cc5780632206137914620003e357600080fd5b8063136439dd146200038857806314c77faa14620003a157600080fd5b8063063effeb14620002cc57806309d25e7914620002ee5780630c68ba2114620003245780630d43e8ad146200035b575b600080fd5b620002d6620006d0565b604051620002e5919062002212565b60405180910390f35b6071546200030a90600160801b900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001620002e5565b6200034a620003353660046200227e565b60656020526000908152604090205460ff1681565b6040519015158152602001620002e5565b606a546200036f906001600160a01b031681565b6040516001600160a01b039091168152602001620002e5565b6200039f62000399366004620022a3565b62000734565b005b606b546200036f906001600160a01b031681565b6200039f620003c63660046200227e565b620007f1565b6200039f620003dd366004620022bd565b6200084a565b620003fa620003f4366004620022a3565b62000c5a565b604080519586526020860194909452928401919091526060830152608082015260a001620002e5565b6200039f6200043436600462002312565b62000d9a565b6069546200036f906001600160a01b031681565b606e545b604051908152602001620002e5565b6200039f6200047236600462002312565b62000e48565b6200039f6200048936600462002312565b62000f01565b6200039f620004a03660046200234a565b62000fba565b6200039f620004b73660046200227e565b620010c9565b6067546001600160a01b03166200036f565b6071546200030a90600160c01b900467ffffffffffffffff1681565b6200039f6200117d565b6071546200030a9068010000000000000000900467ffffffffffffffff1681565b6200039f62000527366004620022a3565b62001212565b6200036f6200053e366004620022a3565b62001289565b6033546001600160a01b03166200036f565b620002d6620005673660046200227e565b620012bc565b6200039f6200057e36600462002379565b62001334565b6071546200030a9067ffffffffffffffff1681565b6200034a620005aa366004620022a3565b60666020526000908152604090205460ff1681565b6200039f620005d0366004620022a3565b620015f3565b6200034a620005e73660046200227e565b60736020526000908152604090205460ff1681565b6200039f6200060d3660046200227e565b62001709565b6200034a620006243660046200227e565b606f6020526000908152604090205460ff1681565b6200039f6200064a3660046200227e565b620017d1565b620004526200066136600462002460565b62001895565b6200039f620006783660046200227e565b62001aa8565b6200034a6200068f366004620022a3565b60009081526066602052604090205460ff1690565b6200039f620006b5366004620022a3565b62001bcd565b6072546200030a9067ffffffffffffffff1681565b6060606e8054806020026020016040519081016040528092919081815260200182805480156200072a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200070b575b5050505050905090565b3360009081526065602052604090205460ff16620007995760405162461bcd60e51b815260206004820152600b60248201527f43616e277420706175736500000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b6033546001600160a01b031633146200083c5760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b620008478162001c66565b50565b6033546001600160a01b03163314620008df576000606e878154811062000875576200087562002503565b6000918252602090912001546001600160a01b03169050338114620008dd5760405162461bcd60e51b815260206004820152600e60248201527f4e6f742066726f6d207661756c74000000000000000000000000000000000000604482015260640162000790565b505b6706f05b59d3b200008511156200092e5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008411156200097d5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b20000831115620009cc5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b2000082111562000a1b5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b2000081111562000a6a5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6040518060c001604052806001151581526020018667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681526020018267ffffffffffffffff168152506070600088815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160116101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fd9ffbc90281646bcb01af117b3e6cd6ad280ffe01a9b09f6576155b4fa3f45c986868686868660405162000c4a96959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405180910390a1505050505050565b6000818152607060209081526040808320815160c081018352815460ff8116158015835267ffffffffffffffff61010083048116968401969096526901000000000000000000820486169483019490945271010000000000000000000000000000000000900484166060820152600190910154808416608083015268010000000000000000900490921660a0830152829182918291829162000d5257806020015167ffffffffffffffff16816040015167ffffffffffffffff16826060015167ffffffffffffffff16836080015167ffffffffffffffff168460a0015167ffffffffffffffff16955095509550955095505062000d91565b505060715460725467ffffffffffffffff808316965068010000000000000000830481169550600160801b830481169450600160c01b90920482169250165b91939590929450565b6033546001600160a01b0316331462000de55760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b6033546001600160a01b0316331462000e935760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b604080516001600160a01b038416815282151560208201527f7091fe081ceb2a09a20e86451ff5cba0b3ed3a6fc7fb6557147601a616459035910160405180910390a16001600160a01b03919091166000908152606f60205260409020805460ff1916911515919091179055565b6033546001600160a01b0316331462000f4c5760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b604080516001600160a01b038416815282151560208201527f076cbcb8e3c3f3f0bded4ccdaa7a15ce585507cb08d4b919280e3b691b8aec30910160405180910390a16001600160a01b03919091166000908152607360205260409020805460ff1916911515919091179055565b600054610100900460ff168062000fd4575060005460ff16155b620010395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff161580156200105c576000805461ffff19166101011790555b6200106662001d26565b6200107183620017d1565b6200107c8262001709565b620010b167016345785d8a000066b1a2bc2ec5000067016345785d8a000066b1a2bc2ec5000067016345785d8a000062001334565b8015620010c4576000805461ff00191690555b505050565b6033546001600160a01b03163314620011145760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b606b54604080516001600160a01b03928316815291831660208301527fdd1b73e02786644d6e9994c9d513f1058320c4ff857e1a76ded4c77f83ab3ea9910160405180910390a1606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314620011c85760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60008181526066602052604090205460ff1615806200123b57506033546001600160a01b031633145b620008475760405162461bcd60e51b815260206004820152600660248201527f5061757365640000000000000000000000000000000000000000000000000000604482015260640162000790565b6000606e8281548110620012a157620012a162002503565b6000918252602090912001546001600160a01b031692915050565b6001600160a01b0381166000908152606d60209081526040918290208054835181840281018401909452808452606093928301828280156200132857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001309575b50505050509050919050565b6033546001600160a01b031633146200137f5760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6706f05b59d3b20000851115620013ce5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008411156200141d5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008311156200146c5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b20000821115620014bb5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6706f05b59d3b200008111156200150a5760405162461bcd60e51b815260206004820152601260248201527121b0b73737ba101f1018171a9032ba3432b960711b604482015260640162000790565b6071805467ffffffffffffffff8781166fffffffffffffffffffffffffffffffff19909216919091176801000000000000000087831602176fffffffffffffffffffffffffffffffff16600160801b8683160277ffffffffffffffffffffffffffffffffffffffffffffffff1617600160c01b85831602179091556072805467ffffffffffffffff1916918316919091179055604080518681526020810186905290810184905260608101839052608081018290527f5ece4b6d3e9829ead7e8adb5ab3a10f91b8547a80e9e96264fc5fe012f10937a9060a00160405180910390a15050505050565b6033546001600160a01b0316331462001688576000606e82815481106200161e576200161e62002503565b6000918252602090912001546001600160a01b03169050338114620016865760405162461bcd60e51b815260206004820152600960248201527f4e6f74207661756c740000000000000000000000000000000000000000000000604482015260640162000790565b505b6000818152607060205260409081902080547fffffffffffffff0000000000000000000000000000000000000000000000000016815560010180546fffffffffffffffffffffffffffffffff19169055517f52fa46cefef72586d9ef48406d9aa3772833013b97e06ad9bbb4f812b105aa6890620007e69083815260200190565b6033546001600160a01b03163314620017545760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6001600160a01b0381166200176857600080fd5b606a54604080516001600160a01b03928316815291831660208301527ff50858c0e53e1daa79884af03c6b676de789362564e7c27ff542914c0b513ea7910160405180910390a1606a80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680620017eb575060005460ff16155b620018505760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562001873576000805461ffff19166101011790555b6200187e8262001c66565b801562001891576000805461ff00191690555b5050565b6000620018a3600062001212565b606a546001600160a01b0316620018fd5760405162461bcd60e51b815260206004820152601860248201527f4e4654583a2046656520726563656976657220756e7365740000000000000000604482015260640162000790565b6000620019126067546001600160a01b031690565b6001600160a01b0316036200196a5760405162461bcd60e51b815260206004820181905260248201527f4e4654583a205661756c7420696d706c656d656e746174696f6e20756e736574604482015260640162000790565b60006200197b878787878762001de7565b606e80546001600160a01b038881166000908152606d6020908152604080832080546001808201835591855292842090920180548886166001600160a01b0319918216811790925587549384018855969093527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a9091018054909516909117909355606a549251630674f4a960e21b81526004810183905293945090929116906319d3d2a490602401600060405180830381600087803b15801562001a3f57600080fd5b505af115801562001a54573d6000803e3d6000fd5b5050604080516001600160a01b0380871682528a1660208201528493507fb94e8fc8ad4a054390a833a774eabcd7c0547c9a62d1fafb5c54dd761c6f0aac92500160405180910390a2979650505050505050565b6033546001600160a01b0316331462001af35760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6001600160a01b03811662001b715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840162000790565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331462001c185760405162461bcd60e51b8152602060048201819052602482015260008051602062002e73833981519152604482015260640162000790565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d749101620007e6565b803b62001cdc5760405162461bcd60e51b815260206004820152603960248201527f5570677261646561626c65426561636f6e3a206368696c6420696d706c656d6560448201527f6e746174696f6e206973206e6f74206120636f6e747261637400000000000000606482015260840162000790565b606780546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff168062001d40575060005460ff16155b62001da55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562001dc8576000805461ffff19166101011790555b62001dd262001f9e565b801562000847576000805461ff001916905550565b6000803060405162001df99062002204565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562001e35573d6000803e3d6000fd5b506040516339e1163160e21b81529091506001600160a01b0382169063e78458c49062001e6f908a908a908a908a908a9060040162002569565b600060405180830381600087803b15801562001e8a57600080fd5b505af115801562001e9f573d6000803e3d6000fd5b505060405163d0ebdbe760e01b81523360048201526001600160a01b038416925063d0ebdbe79150602401600060405180830381600087803b15801562001ee557600080fd5b505af115801562001efa573d6000803e3d6000fd5b50505050806001600160a01b031663f2fde38b62001f206033546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801562001f7a57600080fd5b505af115801562001f8f573d6000803e3d6000fd5b50929998505050505050505050565b600054610100900460ff168062001fb8575060005460ff16155b6200201d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562002040576000805461ffff19166101011790555b6200204a62002054565b62001dd26200210a565b600054610100900460ff16806200206e575060005460ff16155b620020d35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff1615801562001dd2576000805461ffff1916610101179055801562000847576000805461ff001916905550565b600054610100900460ff168062002124575060005460ff16155b620021895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000790565b600054610100900460ff16158015620021ac576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801562000847576000805461ff001916905550565b6108b780620025bc83390190565b6020808252825182820181905260009190848201906040850190845b81811015620022555783516001600160a01b0316835292840192918401916001016200222e565b50909695505050505050565b80356001600160a01b03811681146200227957600080fd5b919050565b6000602082840312156200229157600080fd5b6200229c8262002261565b9392505050565b600060208284031215620022b657600080fd5b5035919050565b60008060008060008060c08789031215620022d757600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b803580151581146200227957600080fd5b600080604083850312156200232657600080fd5b620023318362002261565b9150620023416020840162002301565b90509250929050565b600080604083850312156200235e57600080fd5b620023698362002261565b9150620023416020840162002261565b600080600080600060a086880312156200239257600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620023dd57600080fd5b813567ffffffffffffffff80821115620023fb57620023fb620023b5565b604051601f8301601f19908116603f01168101908282118183101715620024265762002426620023b5565b816040528381528660208588010111156200244057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156200247957600080fd5b853567ffffffffffffffff808211156200249257600080fd5b620024a089838a01620023cb565b96506020880135915080821115620024b757600080fd5b50620024c688828901620023cb565b945050620024d76040870162002261565b9250620024e76060870162002301565b9150620024f76080870162002301565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015620025415760208185018101518683018201520162002523565b8181111562002554576000602083870101525b50601f01601f19169290920160200192915050565b60a0815260006200257e60a083018862002519565b828103602084015262002592818862002519565b6001600160a01b039690961660408401525050911515606083015215156080909101529291505056fe60806040526040516108b73803806108b783398101604081905261002291610418565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516104d8565b60008051602061087683398151915214610069576100696104fd565b610073828261007a565b505061057d565b61008d8261022660201b6100291760201c565b6100ec5760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610160826001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561012d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101519190610513565b61022660201b6100291760201c565b6101d25760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100e3565b6000805160206108768339815191528281558151156102215761021f6101f661022c565b83604051806060016040528060218152602001610896602191396102aa60201b61002f1760201c565b505b505050565b3b151590565b60006102446000805160206108768339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a59190610513565b905090565b6060833b6103095760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100e3565b600080856001600160a01b031685604051610324919061052e565b600060405180830381855af49150503d806000811461035f576040519150601f19603f3d011682016040523d82523d6000602084013e610364565b606091505b509092509050610375828286610381565b925050505b9392505050565b6060831561039057508161037a565b8251156103a05782518084602001fd5b8160405162461bcd60e51b81526004016100e3919061054a565b80516001600160a01b03811681146103d157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156104075781810151838201526020016103ef565b8381111561021f5750506000910152565b6000806040838503121561042b57600080fd5b610434836103ba565b60208401519092506001600160401b038082111561045157600080fd5b818501915085601f83011261046557600080fd5b815181811115610477576104776103d6565b604051601f8201601f19908116603f0116810190838211818310171561049f5761049f6103d6565b816040528281528860208487010111156104b857600080fd5b6104c98360208301602088016103ec565b80955050505050509250929050565b6000828210156104f857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561052557600080fd5b61037a826103ba565b600082516105408184602087016103ec565b9190910192915050565b60208152600082518060208401526105698160408501602087016103ec565b601f01601f19169190910160400192915050565b6102ea8061058c6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261012e565b6101cb565b565b3b151590565b6060833b6100aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100d29190610258565b600060405180830381855af49150503d806000811461010d576040519150601f19603f3d011682016040523d82523d6000602084013e610112565b606091505b50915091506101228282866101ef565b925050505b9392505050565b60006101587fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b73ffffffffffffffffffffffffffffffffffffffff1663da5257166040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c69190610274565b905090565b3660008037600080366000845af43d6000803e8080156101ea573d6000f35b3d6000fd5b606083156101fe575081610127565b82511561020e5782518084602001fd5b8160405162461bcd60e51b81526004016100a191906102aa565b60005b8381101561024357818101518382015260200161022b565b83811115610252576000848401525b50505050565b6000825161026a818460208701610228565b9190910192915050565b60006020828403121561028657600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461012757600080fd5b60208152600082518060208401526102c9816040850160208701610228565b601f01601f1916919091016040019291505056fea164736f6c634300080f000aa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c634300080f000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__UpgradeableBeacon__init(address)": {
        "details": "Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon."
      },
      "childImplementation()": {
        "details": "Returns the current child implementation address."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeChildTo(address)": {
        "details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newChildImplementation` must be a contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31626,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 31629,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 35493,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 36259,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 36378,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 36409,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "isGuardian",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 36413,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "isPaused",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 32319,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "_childImplementation",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 25150,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "NOT_USED1",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 25153,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "zapContract",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 25156,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "feeDistributor",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 25159,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "eligibilityManager",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 25163,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "NOT_USED3",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 25168,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "_vaultsForAsset",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 25171,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "vaults",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25176,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "excludedFromFees",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 25194,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "_vaultFees",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint256,t_struct(VaultFees)25189_storage)"
      },
      {
        "astId": 25197,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "factoryMintFee",
        "offset": 0,
        "slot": "113",
        "type": "t_uint64"
      },
      {
        "astId": 25200,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "factoryRandomRedeemFee",
        "offset": 8,
        "slot": "113",
        "type": "t_uint64"
      },
      {
        "astId": 25203,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "factoryTargetRedeemFee",
        "offset": 16,
        "slot": "113",
        "type": "t_uint64"
      },
      {
        "astId": 25206,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "factoryRandomSwapFee",
        "offset": 24,
        "slot": "113",
        "type": "t_uint64"
      },
      {
        "astId": 25209,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "factoryTargetSwapFee",
        "offset": 0,
        "slot": "114",
        "type": "t_uint64"
      },
      {
        "astId": 25214,
        "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
        "label": "zapContracts",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(VaultFees)25189_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTXVaultFactoryUpgradeable.VaultFees)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultFees)25189_storage"
      },
      "t_struct(VaultFees)25189_storage": {
        "encoding": "inplace",
        "label": "struct NFTXVaultFactoryUpgradeable.VaultFees",
        "members": [
          {
            "astId": 25178,
            "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25180,
            "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
            "label": "mintFee",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 25182,
            "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
            "label": "randomRedeemFee",
            "offset": 9,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 25184,
            "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
            "label": "targetRedeemFee",
            "offset": 17,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 25186,
            "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
            "label": "randomSwapFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25188,
            "contract": "src/v2/NFTXVaultFactoryUpgradeable.sol:NFTXVaultFactoryUpgradeable",
            "label": "targetSwapFee",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}