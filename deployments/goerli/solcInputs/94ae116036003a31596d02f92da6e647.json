{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2Upgradeable {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "src/interfaces/INFTXFeeDistributorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.15;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {INFTXVaultFactory} from \"@src/v2/interface/INFTXVaultFactory.sol\";\nimport {INFTXInventoryStakingV3} from \"@src/interfaces/INFTXInventoryStakingV3.sol\";\nimport {INFTXRouter} from \"./INFTXRouter.sol\";\n\ninterface INFTXFeeDistributorV3 {\n    enum ReceiverType {\n        INVENTORY,\n        POOL,\n        ADDRESS\n    }\n\n    struct FeeReceiver {\n        address receiver;\n        uint256 allocPoint;\n        ReceiverType receiverType; // NOTE: receiver address is ignored for `POOL` type, as each vaultId has different pool address\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    function nftxVaultFactory() external returns (INFTXVaultFactory);\n\n    function inventoryStaking() external returns (INFTXInventoryStakingV3);\n\n    function WETH() external returns (IERC20);\n\n    function REWARD_FEE_TIER() external returns (uint24);\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    function nftxRouter() external returns (INFTXRouter);\n\n    function treasury() external returns (address);\n\n    function allocTotal() external returns (uint256);\n\n    function feeReceivers(\n        uint256\n    )\n        external\n        view\n        returns (\n            address receiver,\n            uint256 allocPoint,\n            ReceiverType receiverType\n        );\n\n    function distributionPaused() external returns (bool);\n\n    // =============================================================\n    //                            EVENTS\n    // =============================================================\n\n    event UpdateTreasuryAddress(address newTreasury);\n    event PauseDistribution(bool paused);\n\n    event AddFeeReceiver(address receiver, uint256 allocPoint);\n    event UpdateFeeReceiverAlloc(address receiver, uint256 allocPoint);\n    event UpdateFeeReceiverAddress(address oldReceiver, address newReceiver);\n    event RemoveFeeReceiver(address receiver);\n\n    // =============================================================\n    //                            ERRORS\n    // =============================================================\n\n    error IdOutOfBounds();\n    error AddressIsZero();\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL WRITE\n    // =============================================================\n\n    function distribute(uint256 vaultId) external;\n\n    // =============================================================\n    //                        ONLY OWNER WRITE\n    // =============================================================\n\n    function addReceiver(\n        address receiver,\n        uint256 allocPoint,\n        ReceiverType receiverType\n    ) external;\n\n    function changeReceiverAlloc(\n        uint256 receiverId,\n        uint256 allocPoint\n    ) external;\n\n    function changeReceiverAddress(\n        uint256 receiverId,\n        address receiver,\n        ReceiverType receiverType\n    ) external;\n\n    function removeReceiver(uint256 receiverId) external;\n\n    function setTreasuryAddress(address treasury_) external;\n\n    function pauseFeeDistribution(bool pause) external;\n\n    function rescueTokens(IERC20 token) external;\n}\n"
    },
    "src/interfaces/INFTXInventoryStakingV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.15;\n\nimport {IERC721Upgradeable} from \"@openzeppelin-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {INFTXVaultFactory} from \"@src/v2/interface/INFTXVaultFactory.sol\";\nimport {ITimelockExcludeList} from \"@src/v2/interface/ITimelockExcludeList.sol\";\n\ninterface INFTXInventoryStakingV3 is IERC721Upgradeable {\n    // details about the staking position\n    struct Position {\n        // the nonce for permits\n        uint256 nonce; // TODO: add permit logic\n        // vaultId corresponding to the vTokens staked in this position\n        uint256 vaultId;\n        // timestamp at which the timelock expires\n        uint256 timelockedUntil;\n        // shares balance is used to track position's ownership of total vToken balance\n        uint256 vTokenShareBalance;\n        // used to evaluate weth fees accumulated per vTokenShare since this snapshot\n        uint256 wethFeesPerVTokenShareSnapshotX128;\n        // owed weth fees, updates when positions merged\n        uint256 wethOwed;\n    }\n\n    struct VaultGlobal {\n        uint256 netVTokenBalance; // vToken liquidity + earned fees\n        uint256 totalVTokenShares;\n        uint256 globalWethFeesPerVTokenShareX128;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\n\n    function timelockExcludeList() external view returns (ITimelockExcludeList);\n\n    function WETH() external view returns (IERC20);\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    function timelock() external view returns (uint256);\n\n    function earlyWithdrawPenaltyInWei() external view returns (uint256);\n\n    function positions(\n        uint256 positionId\n    )\n        external\n        view\n        returns (\n            uint256 nonce,\n            uint256 vaultId,\n            uint256 timelockedUntil,\n            uint256 vTokenShareBalance,\n            uint256 wethFeesPerVTokenShareSnapshotX128,\n            uint256 wethOwed\n        );\n\n    function vaultGlobal(\n        uint256 vaultId\n    )\n        external\n        view\n        returns (\n            uint256 netVTokenBalance,\n            uint256 totalVTokenShares,\n            uint256 globalWethFeesPerVTokenShareX128\n        );\n\n    // =============================================================\n    //                            EVENTS\n    // =============================================================\n\n    event Deposit(\n        uint256 indexed vaultId,\n        uint256 indexed positionId,\n        uint256 amount\n    );\n    event Withdraw(\n        uint256 indexed positionId,\n        uint256 vTokenShares,\n        uint256 vTokenAmount,\n        uint256 wethAmount\n    );\n    event CollectWethFees(uint256 indexed positionId, uint256 wethAmount);\n    event UpdateTimelock(uint256 newTimelock);\n    event UpdateEarlyWithdrawPenalty(uint256 newEarlyWithdrawPenaltyInWei);\n\n    // =============================================================\n    //                            ERRORS\n    // =============================================================\n\n    error TimelockTooLong();\n    error InvalidEarlyWithdrawPenalty();\n    error NotPositionOwner();\n    error Timelocked();\n    error VaultIdMismatch();\n    error ParentChildSame();\n\n    // =============================================================\n    //                           INIT\n    // =============================================================\n\n    function __NFTXInventoryStaking_init(\n        INFTXVaultFactory nftxVaultFactory_,\n        uint256 timelock_,\n        uint256 earlyWithdrawPenaltyInWei_,\n        ITimelockExcludeList timelockExcludeList_\n    ) external;\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL WRITE\n    // =============================================================\n\n    function deposit(\n        uint256 vaultId,\n        uint256 amount,\n        address recipient\n    ) external returns (uint256 tokenId);\n\n    function withdraw(uint256 positionId, uint256 vTokenShares) external;\n\n    function combinePositions(\n        uint256 parentPositionId,\n        uint256[] calldata childPositionIds\n    ) external;\n\n    function collectWethFees(uint256 positionId) external;\n\n    function receiveRewards(\n        uint256 vaultId,\n        uint256 amount,\n        bool isRewardWeth\n    ) external returns (bool);\n\n    // =============================================================\n    //                        ONLY OWNER WRITE\n    // =============================================================\n\n    function setTimelock(uint256 timelock_) external;\n\n    function setEarlyWithdrawPenalty(\n        uint256 earlyWithdrawPenaltyInWei_\n    ) external;\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL VIEW\n    // =============================================================\n\n    function pricePerShareVToken(\n        uint256 vaultId\n    ) external view returns (uint256);\n}\n"
    },
    "src/interfaces/INFTXRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.15;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {INonfungiblePositionManager} from \"@uni-periphery/interfaces/INonfungiblePositionManager.sol\";\nimport {SwapRouter} from \"@uni-periphery/SwapRouter.sol\";\nimport {IQuoterV2} from \"@uni-periphery/interfaces/IQuoterV2.sol\";\n\nimport {INFTXVaultFactory} from \"@src/v2/interface/INFTXVaultFactory.sol\";\n\ninterface INFTXRouter {\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    function WETH() external returns (address);\n\n    function CRYPTO_PUNKS() external returns (address);\n\n    function positionManager() external returns (INonfungiblePositionManager);\n\n    function router() external returns (SwapRouter);\n\n    function quoter() external returns (IQuoterV2);\n\n    function nftxVaultFactory() external returns (INFTXVaultFactory);\n\n    // =============================================================\n    //                            ERRORS\n    // =============================================================\n\n    error UnableToSendETH();\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL WRITE\n    // =============================================================\n\n    struct AddLiquidityParams {\n        address vtoken;\n        uint256 vTokensAmount; // user can provide just vTokens or NFTs or both\n        uint256[] nftIds;\n        int24 tickLower;\n        int24 tickUpper;\n        uint24 fee;\n        uint160 sqrtPriceX96;\n        uint256 deadline;\n    }\n\n    /**\n     * @notice User should have given NFT approval to vtoken contract, else revert\n     */\n    function addLiquidity(\n        AddLiquidityParams calldata params\n    ) external payable returns (uint256 positionId);\n\n    struct RemoveLiquidityParams {\n        uint256 positionId;\n        address vtoken;\n        uint256[] nftIds;\n        bool receiveVTokens; // directly receive vTokens, instead of redeeming for NFTs\n        uint128 liquidity;\n        uint24 swapPoolFee; // the pool through which the fractional vToken to ETH swap should go through\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    function removeLiquidity(RemoveLiquidityParams calldata params) external;\n\n    /**\n     * @param sqrtPriceLimitX96 the price limit, if reached, stop swapping\n     */\n    struct SellNFTsParams {\n        address vtoken;\n        uint256[] nftIds;\n        uint256 deadline;\n        uint24 fee;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /**\n     * @notice User should have given NFT approval to vtoken contract, else revert\n     */\n    function sellNFTs(\n        SellNFTsParams calldata params\n    ) external returns (uint256 wethReceived);\n\n    /**\n     * @param sqrtPriceLimitX96 the price limit, if reached, stop swapping\n     */\n    struct BuyNFTsParams {\n        address vtoken;\n        uint256[] nftIds;\n        uint256 deadline;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function buyNFTs(BuyNFTsParams calldata params) external payable;\n\n    // =============================================================\n    //                        ONLY OWNER WRITE\n    // =============================================================\n\n    /**\n     * @param token ERC20 token address or address(0) in case of ETH\n     */\n    function rescueTokens(IERC20 token) external;\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL VIEW\n    // =============================================================\n\n    /**\n     * @dev This function is not gas efficient and should _not_ be called on chain.\n     */\n    function quoteBuyNFTs(\n        address vtoken,\n        uint256[] memory nftIds,\n        uint24 fee,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 ethRequired);\n\n    /**\n     * @notice Get deployed pool address for vaultId. `exists` is false if pool doesn't exist. `vaultId` must be valid.\n     */\n    function getPoolExists(\n        uint256 vaultId,\n        uint24 fee\n    ) external view returns (address pool, bool exists);\n\n    /**\n     * @notice Get deployed pool address for vToken. Reverts if pool doesn't exist\n     */\n    function getPool(\n        address vToken_,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /**\n     * @notice Compute the pool address corresponding to vToken\n     */\n    function computePool(\n        address vToken_,\n        uint24 fee\n    ) external view returns (address);\n\n    /**\n     * @notice Checks if vToken is token0 or not\n     */\n    function isVToken0(address vtoken) external view returns (bool);\n}\n"
    },
    "src/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    constructor(uint256 amount) ERC20(\"MOCK\", \"MOCK\") {\n        _mint(msg.sender, amount);\n    }\n}\n"
    },
    "src/mocks/MockFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IUniswapV3Factory} from \"@uni-core/interfaces/IUniswapV3Factory.sol\";\nimport {IUniswapV3Pool} from \"@uni-core/interfaces/IUniswapV3Pool.sol\";\n\nimport {INFTXVaultFactory} from \"@src/v2/interface/INFTXVaultFactory.sol\";\nimport {INFTXVault} from \"@src/v2/NFTXVaultUpgradeable.sol\";\nimport {INFTXRouter} from \"@src/interfaces/INFTXRouter.sol\";\n\ncontract MockFeeDistributor {\n    INFTXRouter public nftxRouter;\n    INFTXVaultFactory public immutable nftxVaultFactory;\n\n    IERC20 public immutable WETH;\n    uint24 public constant REWARD_FEE_TIER = 10000;\n\n    constructor(INFTXRouter nftxRouter_, INFTXVaultFactory nftxVaultFactory_) {\n        WETH = IERC20(nftxRouter_.WETH());\n        nftxRouter = nftxRouter_;\n        nftxVaultFactory = nftxVaultFactory_;\n    }\n\n    function distribute(uint256 vaultId) external {\n        address vtoken = nftxVaultFactory.vault(vaultId);\n\n        IUniswapV3Pool pool = IUniswapV3Pool(\n            nftxRouter.getPool(vtoken, REWARD_FEE_TIER)\n        );\n\n        uint256 wethBalance = WETH.balanceOf(address(this));\n\n        // send rewards to pool\n        WETH.transfer(address(pool), wethBalance);\n        // distribute rewards with LPs\n        pool.distributeRewards(wethBalance, !nftxRouter.isVToken0(vtoken));\n    }\n}\n"
    },
    "src/mocks/MockNFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockNFT is ERC721 {\n    uint256 public nextTokenId;\n\n    constructor() ERC721(\"MOCK\", \"MOCK\") {}\n\n    function mint(uint256 count) external returns (uint256[] memory tokenIds) {\n        uint256 _nextTokenId = nextTokenId;\n\n        tokenIds = new uint256[](count);\n        for (uint256 i; i < count; i++) {\n            uint256 tokenId = _nextTokenId++;\n            tokenIds[i] = tokenId;\n            _mint(msg.sender, tokenId);\n        }\n\n        nextTokenId = _nextTokenId;\n    }\n}\n"
    },
    "src/mocks/MockVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\ncontract MockVaultFactory {\n    address[] internal vaults;\n\n    function addVault(address vToken) external {\n        vaults.push(vToken);\n    }\n\n    function vault(uint256 vaultId) external view returns (address) {\n        return vaults[vaultId];\n    }\n}\n"
    },
    "src/mocks/MockWETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockWETH is ERC20 {\n    constructor() ERC20(\"Wrapped Ether\", \"WETH\") {}\n\n    function deposit() external payable {\n        _mint(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 amount) external {\n        _burn(msg.sender, amount);\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success);\n    }\n}\n"
    },
    "src/mocks/vToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\n/**\n * @notice wrap ERC721 into fungible ERC20\n */\ncontract vToken is ERC20, ERC721Holder {\n    IERC721 public nft;\n\n    constructor(IERC721 nft_) ERC20(\"vToken\", \"vToken\") {\n        nft = nft_;\n    }\n\n    /**\n     * @param from address to transfer NFTs from\n     * @param to address to receive newly minted ERC20\n     * @return amount amount of ERC20 minted\n     */\n    function mint(\n        uint256[] calldata nftIds,\n        address from,\n        address to\n    ) external returns (uint256 amount) {\n        uint256 count = nftIds.length;\n        for (uint256 i; i < count; ++i) {\n            nft.safeTransferFrom(from, address(this), nftIds[i]);\n        }\n\n        amount = count * 1 ether;\n        _mint(to, amount);\n    }\n\n    /**\n     * @param from address to burn their ERC20\n     * @param to address to transfer NFTs to\n     */\n    function burn(\n        uint256[] calldata nftIds,\n        address from,\n        address to\n    ) external returns (uint256 amount) {\n        uint256 count = nftIds.length;\n        amount = count * 1 ether;\n        // check if sender is approved to perform this burn\n        require(\n            msg.sender == from || allowance(from, msg.sender) >= amount,\n            \"Not Approved\"\n        );\n        _burn(from, amount);\n\n        for (uint256 i; i < count; ++i) {\n            nft.safeTransferFrom(address(this), to, nftIds[i]);\n        }\n    }\n}\n"
    },
    "src/NFTXFeeDistributorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.15;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {INFTXVaultFactory} from \"@src/v2/interface/INFTXVaultFactory.sol\";\nimport {INFTXVault} from \"@src/v2/interface/INFTXVault.sol\";\nimport {INFTXInventoryStakingV3} from \"@src/interfaces/INFTXInventoryStakingV3.sol\";\nimport {IUniswapV3Pool} from \"@uni-core/interfaces/IUniswapV3Pool.sol\";\nimport {INFTXRouter} from \"./interfaces/INFTXRouter.sol\";\n\nimport {INFTXFeeDistributorV3} from \"./interfaces/INFTXFeeDistributorV3.sol\";\n\n/**\n * @title NFTX Fee Distributor V3\n * @author @apoorvlathey\n *\n * @notice Allows distribution of vault fees between multiple receivers including inventory stakers and NFTX AMM liquidity providers.\n */\ncontract NFTXFeeDistributorV3 is\n    INFTXFeeDistributorV3,\n    Ownable,\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    INFTXVaultFactory public immutable override nftxVaultFactory;\n    INFTXInventoryStakingV3 public immutable override inventoryStaking;\n    IERC20 public immutable override WETH;\n    uint24 public constant override REWARD_FEE_TIER = 10_000;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    INFTXRouter public override nftxRouter;\n    address public override treasury;\n\n    // Total of allocation points per feeReceiver.\n    uint256 public override allocTotal;\n    FeeReceiver[] public override feeReceivers;\n\n    bool public override distributionPaused;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(\n        INFTXVaultFactory nftxVaultFactory_,\n        INFTXInventoryStakingV3 inventoryStaking_,\n        INFTXRouter nftxRouter_,\n        address treasury_\n    ) {\n        nftxVaultFactory = nftxVaultFactory_;\n        inventoryStaking = inventoryStaking_;\n        WETH = IERC20(nftxRouter_.WETH());\n        nftxRouter = nftxRouter_;\n        treasury = treasury_;\n\n        // set 80% allocation to liquidity providers\n        _addReceiver(address(0), 0.8 ether, ReceiverType.POOL);\n    }\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL WRITE\n    // =============================================================\n\n    function distribute(uint256 vaultId) external override nonReentrant {\n        INFTXVault vault = INFTXVault(nftxVaultFactory.vault(vaultId));\n\n        uint256 wethBalance = WETH.balanceOf(address(this));\n\n        if (distributionPaused || allocTotal == 0) {\n            WETH.transfer(treasury, wethBalance);\n            return;\n        }\n\n        uint256 leftover;\n        for (uint256 i; i < feeReceivers.length; ) {\n            FeeReceiver storage feeReceiver = feeReceivers[i];\n\n            uint256 wethAmountToSend = leftover +\n                (wethBalance * feeReceiver.allocPoint) /\n                allocTotal;\n\n            bool tokenSent = _sendForReceiver(\n                feeReceiver,\n                wethAmountToSend,\n                vaultId,\n                vault\n            );\n            leftover = tokenSent ? 0 : wethAmountToSend;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (leftover > 0) {\n            WETH.transfer(treasury, leftover);\n        }\n    }\n\n    // =============================================================\n    //                        ONLY OWNER WRITE\n    // =============================================================\n\n    function addReceiver(\n        address receiver,\n        uint256 allocPoint,\n        ReceiverType receiverType\n    ) external override onlyOwner {\n        _addReceiver(receiver, allocPoint, receiverType);\n    }\n\n    function changeReceiverAlloc(\n        uint256 receiverId,\n        uint256 allocPoint\n    ) external override onlyOwner {\n        if (receiverId >= feeReceivers.length) revert IdOutOfBounds();\n\n        FeeReceiver storage feeReceiver = feeReceivers[receiverId];\n        allocTotal -= feeReceiver.allocPoint;\n        feeReceiver.allocPoint = allocPoint;\n        allocTotal += allocPoint;\n\n        emit UpdateFeeReceiverAlloc(feeReceiver.receiver, allocPoint);\n    }\n\n    function changeReceiverAddress(\n        uint256 receiverId,\n        address receiver,\n        ReceiverType receiverType\n    ) external override onlyOwner {\n        if (receiverId >= feeReceivers.length) revert IdOutOfBounds();\n\n        FeeReceiver storage feeReceiver = feeReceivers[receiverId];\n        address oldReceiver = feeReceiver.receiver;\n        feeReceiver.receiver = receiver;\n        feeReceiver.receiverType = receiverType;\n\n        emit UpdateFeeReceiverAddress(oldReceiver, receiver);\n    }\n\n    function removeReceiver(uint256 receiverId) external override onlyOwner {\n        uint256 arrLength = feeReceivers.length;\n        if (receiverId >= arrLength) revert IdOutOfBounds();\n\n        emit RemoveFeeReceiver(feeReceivers[receiverId].receiver);\n\n        allocTotal -= feeReceivers[receiverId].allocPoint;\n        // Copy the last element to what is being removed and remove the last element.\n        feeReceivers[receiverId] = feeReceivers[arrLength - 1];\n        feeReceivers.pop();\n    }\n\n    function setTreasuryAddress(address treasury_) external override onlyOwner {\n        if (treasury_ == address(0)) revert AddressIsZero();\n\n        treasury = treasury_;\n        emit UpdateTreasuryAddress(treasury_);\n    }\n\n    function pauseFeeDistribution(bool pause) external override onlyOwner {\n        distributionPaused = pause;\n        emit PauseDistribution(pause);\n    }\n\n    function rescueTokens(IERC20 token) external override onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(msg.sender, balance);\n    }\n\n    // =============================================================\n    //                      INTERNAL / PRIVATE\n    // =============================================================\n\n    function _addReceiver(\n        address receiver,\n        uint256 allocPoint,\n        ReceiverType receiverType\n    ) internal {\n        FeeReceiver memory feeReceiver = FeeReceiver({\n            receiver: receiver,\n            allocPoint: allocPoint,\n            receiverType: receiverType\n        });\n        feeReceivers.push(feeReceiver);\n        allocTotal += allocPoint;\n        emit AddFeeReceiver(receiver, allocPoint);\n    }\n\n    function _sendForReceiver(\n        FeeReceiver storage feeReceiver,\n        uint256 wethAmountToSend,\n        uint256 vaultId,\n        INFTXVault vault\n    ) internal returns (bool tokenSent) {\n        if (feeReceiver.receiverType == ReceiverType.INVENTORY) {\n            _maxWethApprove(feeReceiver.receiver, wethAmountToSend);\n\n            // TODO: update this comment for Inventory Staking V3\n            // Inventory Staking might not pull tokens in case where vaultGlobal[vaultId].totalVTokenShares is zero\n            bool pulledTokens = inventoryStaking.receiveRewards(\n                vaultId,\n                wethAmountToSend,\n                true\n            );\n\n            tokenSent = pulledTokens;\n        } else if (feeReceiver.receiverType == ReceiverType.POOL) {\n            (address pool, bool exists) = nftxRouter.getPoolExists(\n                vaultId,\n                REWARD_FEE_TIER\n            );\n\n            if (exists) {\n                uint256 liquidity = IUniswapV3Pool(pool).liquidity();\n\n                if (liquidity > 0) {\n                    WETH.transfer(pool, wethAmountToSend);\n                    IUniswapV3Pool(pool).distributeRewards(\n                        wethAmountToSend,\n                        !nftxRouter.isVToken0(address(vault))\n                    );\n\n                    tokenSent = true;\n                }\n            }\n        } else {\n            WETH.transfer(feeReceiver.receiver, wethAmountToSend);\n            tokenSent = true;\n        }\n    }\n\n    /**\n     * @dev Setting max allowance to save on gas on subsequent calls.\n     * As this contract doesn't hold funds, so this is safe. Also the spender address is only provided by owner via addReceiver.\n     */\n    function _maxWethApprove(address spender, uint256 amount) internal {\n        uint256 allowance = WETH.allowance(address(this), spender);\n\n        if (amount > allowance) {\n            WETH.approve(spender, type(uint256).max);\n        }\n    }\n}\n"
    },
    "src/NFTXInventoryStakingV3Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.15;\n\nimport {ERC721Upgradeable} from \"@openzeppelin-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\";\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {FullMath} from \"@uni-core/libraries/FullMath.sol\";\nimport {FixedPoint128} from \"@uni-core/libraries/FixedPoint128.sol\";\nimport {PausableUpgradeable} from \"./util/PausableUpgradeable.sol\";\n\nimport {INFTXVaultFactory} from \"@src/v2/interface/INFTXVaultFactory.sol\";\nimport {ITimelockExcludeList} from \"@src/v2/interface/ITimelockExcludeList.sol\";\nimport {INFTXFeeDistributorV3} from \"./interfaces/INFTXFeeDistributorV3.sol\";\nimport {INFTXInventoryStakingV3} from \"./interfaces/INFTXInventoryStakingV3.sol\";\n\n/**\n * @title NFTX Inventory Staking V3\n * @author @apoorvlathey\n *\n * @dev lockId's:\n * 0: deposit\n * 1: withdraw\n * 2: collectWethFees\n *\n * @notice Allows users to stake vTokens to earn fees in vTokens and WETH. The position is minted as xNFT.\n */\n\ncontract NFTXInventoryStakingV3Upgradeable is\n    INFTXInventoryStakingV3,\n    ERC721Upgradeable,\n    PausableUpgradeable\n{\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    INFTXVaultFactory public override nftxVaultFactory;\n    ITimelockExcludeList public override timelockExcludeList;\n    IERC20 public override WETH;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    /// @dev The ID of the next token that will be minted. Skips 0\n    uint256 private _nextId = 1;\n\n    /// @dev timelock in seconds\n    uint256 public override timelock;\n    /// @dev the max penalty applicable. The penalty goes down linearly as the `timelockedUntil` approaches\n    uint256 public override earlyWithdrawPenaltyInWei;\n\n    /// @dev The token ID position data\n    mapping(uint256 => Position) public override positions;\n\n    /// @dev vaultId => VaultGlobal\n    mapping(uint256 => VaultGlobal) public override vaultGlobal;\n\n    // =============================================================\n    //                           INIT\n    // =============================================================\n\n    function __NFTXInventoryStaking_init(\n        INFTXVaultFactory nftxVaultFactory_,\n        uint256 timelock_,\n        uint256 earlyWithdrawPenaltyInWei_,\n        ITimelockExcludeList timelockExcludeList_\n    ) external override initializer {\n        __ERC721_init(\"NFTX Inventory Staking\", \"xNFT\");\n        __Pausable_init();\n\n        nftxVaultFactory = nftxVaultFactory_;\n        WETH = INFTXFeeDistributorV3(nftxVaultFactory_.feeDistributor()).WETH();\n\n        if (timelock_ > 14 days) revert TimelockTooLong();\n        if (earlyWithdrawPenaltyInWei_ > 1 ether)\n            revert InvalidEarlyWithdrawPenalty();\n        timelock = timelock_;\n        earlyWithdrawPenaltyInWei = earlyWithdrawPenaltyInWei_;\n        timelockExcludeList = timelockExcludeList_;\n    }\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL WRITE\n    // =============================================================\n\n    function deposit(\n        uint256 vaultId,\n        uint256 amount,\n        address recipient\n    ) external override returns (uint256 positionId) {\n        onlyOwnerIfPaused(0);\n\n        address vToken = nftxVaultFactory.vault(vaultId);\n        VaultGlobal storage _vaultGlobal = vaultGlobal[vaultId];\n\n        uint256 preVTokenBalance = _vaultGlobal.netVTokenBalance;\n        IERC20(vToken).transferFrom(msg.sender, address(this), amount);\n        _vaultGlobal.netVTokenBalance = preVTokenBalance + amount;\n\n        _mint(recipient, (positionId = _nextId++));\n\n        uint256 vTokenShares;\n        if (_vaultGlobal.totalVTokenShares == 0) {\n            vTokenShares = amount;\n        } else {\n            vTokenShares =\n                (amount * _vaultGlobal.totalVTokenShares) /\n                preVTokenBalance;\n        }\n        _vaultGlobal.totalVTokenShares += vTokenShares;\n\n        positions[positionId] = Position({\n            nonce: 0,\n            vaultId: vaultId,\n            timelockedUntil: timelockExcludeList.isExcluded(msg.sender, vaultId)\n                ? 0\n                : block.timestamp + timelock,\n            vTokenShareBalance: vTokenShares,\n            wethFeesPerVTokenShareSnapshotX128: _vaultGlobal\n                .globalWethFeesPerVTokenShareX128,\n            wethOwed: 0\n        });\n\n        emit Deposit(vaultId, positionId, amount);\n    }\n\n    function withdraw(\n        uint256 positionId,\n        uint256 vTokenShares\n    ) external override {\n        onlyOwnerIfPaused(1);\n\n        if (ownerOf(positionId) != msg.sender) revert NotPositionOwner();\n\n        Position storage position = positions[positionId];\n\n        uint256 positionVTokenShareBalance = position.vTokenShareBalance;\n        require(positionVTokenShareBalance >= vTokenShares);\n\n        uint256 vaultId = position.vaultId;\n        VaultGlobal storage _vaultGlobal = vaultGlobal[vaultId];\n        // withdraw vTokens corresponding to the vTokenShares requested\n        uint256 vTokenOwed = (_vaultGlobal.netVTokenBalance * vTokenShares) /\n            _vaultGlobal.totalVTokenShares;\n        // withdraw all the weth fees accrued\n        uint256 wethOwed = _calcWethOwed(\n            _vaultGlobal.globalWethFeesPerVTokenShareX128,\n            position.wethFeesPerVTokenShareSnapshotX128,\n            vTokenShares\n        ) + position.wethOwed;\n        position.wethFeesPerVTokenShareSnapshotX128 = _vaultGlobal\n            .globalWethFeesPerVTokenShareX128;\n        position.wethOwed = 0;\n\n        if (block.timestamp <= position.timelockedUntil) {\n            // Eg: timelock = 10 days, vTokenOwed = 100, penalty% = 5%\n            // Case 1: Instant withdraw, with 10 days left\n            // penaltyAmt = 100 * 5% = 5\n            // Case 2: With 2 days timelock left\n            // penaltyAmt = (100 * 5%) * 2 / 10 = 1\n            uint256 vTokenPenalty = ((position.timelockedUntil -\n                block.timestamp) *\n                vTokenOwed *\n                earlyWithdrawPenaltyInWei) / (timelock * 1 ether);\n            vTokenOwed -= vTokenPenalty;\n        }\n\n        // in case of penalty, more shares are burned than the corresponding vToken balance\n        // resulting in an increase of `pricePerShareVToken`, hence the penalty collected is distributed amongst other stakers\n        _vaultGlobal.netVTokenBalance -= vTokenOwed;\n        _vaultGlobal.totalVTokenShares -= vTokenShares;\n        position.vTokenShareBalance -= vTokenShares;\n\n        // transfer tokens to the user\n        IERC20(nftxVaultFactory.vault(vaultId)).transfer(\n            msg.sender,\n            vTokenOwed\n        );\n        WETH.transfer(msg.sender, wethOwed);\n\n        emit Withdraw(positionId, vTokenShares, vTokenOwed, wethOwed);\n    }\n\n    // combine multiple xNFTs (if timelock expired)\n    function combinePositions(\n        uint256 parentPositionId,\n        uint256[] calldata childPositionIds\n    ) external override {\n        // `ownerOf` handles invalid positionId\n        if (ownerOf(parentPositionId) != msg.sender) revert NotPositionOwner();\n        Position storage parentPosition = positions[parentPositionId];\n        uint256 parentVaultId = parentPosition.vaultId;\n\n        VaultGlobal storage _vaultGlobal = vaultGlobal[parentVaultId];\n\n        if (block.timestamp <= parentPosition.timelockedUntil)\n            revert Timelocked();\n\n        // weth owed for the parent position\n        uint256 netWethOwed = _calcWethOwed(\n            _vaultGlobal.globalWethFeesPerVTokenShareX128,\n            parentPosition.wethFeesPerVTokenShareSnapshotX128,\n            parentPosition.vTokenShareBalance\n        );\n        uint256 childrenPositionsCount = childPositionIds.length;\n        for (uint256 i; i < childrenPositionsCount; ) {\n            if (childPositionIds[i] == parentPositionId)\n                revert ParentChildSame();\n            // `ownerOf` handles invalid positionId\n            if (ownerOf(childPositionIds[i]) != msg.sender)\n                revert NotPositionOwner();\n\n            Position storage childPosition = positions[childPositionIds[i]];\n            if (block.timestamp <= childPosition.timelockedUntil)\n                revert Timelocked();\n            if (childPosition.vaultId != parentVaultId)\n                revert VaultIdMismatch();\n\n            // add weth owed for this child position\n            netWethOwed +=\n                _calcWethOwed(\n                    _vaultGlobal.globalWethFeesPerVTokenShareX128,\n                    childPosition.wethFeesPerVTokenShareSnapshotX128,\n                    childPosition.vTokenShareBalance\n                ) +\n                childPosition.wethOwed;\n            // transfer vToken share balance to parent position\n            parentPosition.vTokenShareBalance += childPosition\n                .vTokenShareBalance;\n            childPosition.vTokenShareBalance = 0;\n            childPosition.wethOwed = 0;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // set new wethFeesPerVTokenShare snapshot\n        parentPosition.wethFeesPerVTokenShareSnapshotX128 = _vaultGlobal\n            .globalWethFeesPerVTokenShareX128;\n\n        // add net wethOwed to the parent position\n        parentPosition.wethOwed += netWethOwed;\n    }\n\n    function collectWethFees(uint256 positionId) external override {\n        onlyOwnerIfPaused(2);\n\n        if (ownerOf(positionId) != msg.sender) revert NotPositionOwner();\n\n        Position storage position = positions[positionId];\n        VaultGlobal storage _vaultGlobal = vaultGlobal[position.vaultId];\n        uint256 wethOwed = _calcWethOwed(\n            _vaultGlobal.globalWethFeesPerVTokenShareX128,\n            position.wethFeesPerVTokenShareSnapshotX128,\n            position.vTokenShareBalance\n        ) + position.wethOwed;\n        position.wethFeesPerVTokenShareSnapshotX128 = _vaultGlobal\n            .globalWethFeesPerVTokenShareX128;\n        position.wethOwed = 0;\n\n        WETH.transfer(msg.sender, wethOwed);\n\n        emit CollectWethFees(positionId, wethOwed);\n    }\n\n    /// @dev Can only be called by feeDistributor, after it sends the reward tokens to this contract\n    function receiveRewards(\n        uint256 vaultId,\n        uint256 amount,\n        bool isRewardWeth\n    ) external override returns (bool rewardsDistributed) {\n        require(msg.sender == nftxVaultFactory.feeDistributor());\n\n        VaultGlobal storage _vaultGlobal = vaultGlobal[vaultId];\n        if (_vaultGlobal.totalVTokenShares == 0) {\n            return false;\n        }\n        rewardsDistributed = true;\n\n        if (isRewardWeth) {\n            WETH.transferFrom(msg.sender, address(this), amount);\n            _vaultGlobal.globalWethFeesPerVTokenShareX128 += FullMath.mulDiv(\n                amount,\n                FixedPoint128.Q128,\n                _vaultGlobal.totalVTokenShares\n            );\n        } else {\n            address vToken = nftxVaultFactory.vault(vaultId);\n            IERC20(vToken).transferFrom(msg.sender, address(this), amount);\n            _vaultGlobal.netVTokenBalance += amount;\n        }\n    }\n\n    // =============================================================\n    //                        ONLY OWNER WRITE\n    // =============================================================\n\n    function setTimelock(uint256 timelock_) external override onlyOwner {\n        if (timelock_ > 14 days) revert TimelockTooLong();\n\n        timelock = timelock_;\n        emit UpdateTimelock(timelock_);\n    }\n\n    function setEarlyWithdrawPenalty(\n        uint256 earlyWithdrawPenaltyInWei_\n    ) external override onlyOwner {\n        if (earlyWithdrawPenaltyInWei_ > 1 ether)\n            revert InvalidEarlyWithdrawPenalty();\n\n        earlyWithdrawPenaltyInWei = earlyWithdrawPenaltyInWei_;\n        emit UpdateEarlyWithdrawPenalty(earlyWithdrawPenaltyInWei_);\n    }\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL VIEW\n    // =============================================================\n\n    function pricePerShareVToken(\n        uint256 vaultId\n    ) external view returns (uint256) {\n        VaultGlobal storage _vaultGlobal = vaultGlobal[vaultId];\n        return\n            (_vaultGlobal.netVTokenBalance * 1 ether) /\n            _vaultGlobal.totalVTokenShares;\n    }\n\n    // TODO: add tokenURI for these xNFTs\n\n    // =============================================================\n    //                        INTERNAL HELPERS\n    // =============================================================\n\n    function _calcWethOwed(\n        uint256 globalWethFeesPerVTokenShareX128,\n        uint256 positionWethFeesPerVTokenShareSnapshotX128,\n        uint256 positionVTokenShareBalance\n    ) internal pure returns (uint256 wethOwed) {\n        wethOwed = FullMath.mulDiv(\n            globalWethFeesPerVTokenShareX128 -\n                positionWethFeesPerVTokenShareSnapshotX128,\n            positionVTokenShareBalance,\n            FixedPoint128.Q128\n        );\n    }\n}\n"
    },
    "src/NFTXRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.15;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IUniswapV3Factory} from \"@uni-core/interfaces/IUniswapV3Factory.sol\";\nimport {INonfungiblePositionManager} from \"@uni-periphery/interfaces/INonfungiblePositionManager.sol\";\nimport {ISwapRouter, SwapRouter} from \"@uni-periphery/SwapRouter.sol\";\nimport {IQuoterV2} from \"@uni-periphery/interfaces/IQuoterV2.sol\";\nimport {IWETH9} from \"@uni-periphery/interfaces/external/IWETH9.sol\";\nimport {PoolAddress} from \"@uni-periphery/libraries/PoolAddress.sol\";\n\nimport {INFTXVaultFactory} from \"@src/v2/interface/INFTXVaultFactory.sol\";\nimport {INFTXVault} from \"@src/v2/interface/INFTXVault.sol\";\n\nimport {INFTXRouter} from \"./interfaces/INFTXRouter.sol\";\n\n/**\n * @title NFTX Router\n * @author @apoorvlathey\n *\n * @notice Router to facilitate vault tokens minting/burning + addition/removal of concentrated liquidity\n */\ncontract NFTXRouter is INFTXRouter, Ownable, ERC721Holder {\n    using SafeERC20 for IERC20;\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    address public immutable override WETH;\n\n    // Set a constant address for specific contracts that need special logic\n    address public constant override CRYPTO_PUNKS =\n        0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n    INonfungiblePositionManager public immutable override positionManager;\n    SwapRouter public immutable override router;\n    IQuoterV2 public immutable override quoter;\n    INFTXVaultFactory public immutable override nftxVaultFactory;\n\n    // TODO: add events for each operation\n\n    constructor(\n        INonfungiblePositionManager positionManager_,\n        SwapRouter router_,\n        IQuoterV2 quoter_,\n        INFTXVaultFactory nftxVaultFactory_\n    ) {\n        positionManager = positionManager_;\n        router = router_;\n        quoter = quoter_;\n        nftxVaultFactory = nftxVaultFactory_;\n\n        WETH = positionManager_.WETH9();\n    }\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL WRITE\n    // =============================================================\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function addLiquidity(\n        AddLiquidityParams calldata params\n    ) external payable override returns (uint256 positionId) {\n        uint256 vTokensAmount = params.vTokensAmount;\n        if (vTokensAmount > 0) {\n            INFTXVault(params.vtoken).transferFrom(\n                msg.sender,\n                address(this),\n                vTokensAmount\n            );\n        }\n\n        if (params.nftIds.length > 0) {\n            address assetAddress = INFTXVault(params.vtoken).assetAddress();\n\n            // tranfer NFTs from user to the vault\n            for (uint256 i; i < params.nftIds.length; ) {\n                _transferFromERC721(\n                    assetAddress,\n                    params.nftIds[i],\n                    params.vtoken\n                );\n\n                if (assetAddress == CRYPTO_PUNKS) {\n                    _approveCryptoPunkERC721(\n                        assetAddress,\n                        params.nftIds[i],\n                        params.vtoken\n                    );\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            uint256[] memory emptyIds;\n            vTokensAmount +=\n                INFTXVault(params.vtoken).mint(params.nftIds, emptyIds) *\n                1 ether;\n        }\n\n        INFTXVault(params.vtoken).approve(\n            address(positionManager),\n            vTokensAmount\n        );\n\n        bool _isVToken0 = isVToken0(params.vtoken);\n        (address token0, address token1) = _isVToken0\n            ? (params.vtoken, WETH)\n            : (WETH, params.vtoken);\n\n        positionManager.createAndInitializePoolIfNecessary(\n            token0,\n            token1,\n            params.fee,\n            params.sqrtPriceX96\n        );\n\n        // mint position with vtoken and ETH\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        if (_isVToken0) {\n            amount0Desired = vTokensAmount;\n            // have a 5000 wei buffer to account for any dust amounts\n            amount0Min = vTokensAmount > 5000 ? vTokensAmount - 5000 : 0;\n            amount1Desired = msg.value;\n        } else {\n            amount0Desired = msg.value;\n            amount1Desired = vTokensAmount;\n            // have a 5000 wei buffer to account for any dust amounts\n            amount1Min = vTokensAmount > 5000 ? vTokensAmount - 5000 : 0;\n        }\n\n        (positionId, , , ) = positionManager.mint{value: msg.value}(\n            INonfungiblePositionManager.MintParams({\n                token0: token0,\n                token1: token1,\n                fee: params.fee,\n                tickLower: params.tickLower,\n                tickUpper: params.tickUpper,\n                amount0Desired: amount0Desired,\n                amount1Desired: amount1Desired,\n                amount0Min: amount0Min,\n                amount1Min: amount1Min,\n                recipient: msg.sender,\n                deadline: params.deadline\n            })\n        );\n\n        positionManager.refundETH(msg.sender);\n        // refund vTokens dust (if any left)\n        uint256 vTokenBalance = INFTXVault(params.vtoken).balanceOf(\n            address(this)\n        );\n        if (vTokenBalance > 0) {\n            INFTXVault(params.vtoken).transfer(msg.sender, vTokenBalance);\n        }\n    }\n\n    function removeLiquidity(\n        RemoveLiquidityParams calldata params\n    ) external override {\n        // remove liquidity to get vTokens and ETH\n        positionManager.decreaseLiquidity(\n            INonfungiblePositionManager.DecreaseLiquidityParams({\n                tokenId: params.positionId,\n                liquidity: params.liquidity,\n                amount0Min: params.amount0Min,\n                amount1Min: params.amount1Min,\n                deadline: params.deadline\n            })\n        );\n\n        // collect vtokens & weth from removing liquidity + earned fees\n        (uint256 amount0, uint256 amount1) = positionManager.collect(\n            INonfungiblePositionManager.CollectParams({\n                tokenId: params.positionId,\n                recipient: address(this),\n                amount0Max: type(uint128).max,\n                amount1Max: type(uint128).max\n            })\n        );\n\n        bool _isVToken0 = isVToken0(params.vtoken);\n        (uint256 vTokenAmt, uint256 wethAmt) = _isVToken0\n            ? (amount0, amount1)\n            : (amount1, amount0);\n\n        if (params.receiveVTokens) {\n            INFTXVault(params.vtoken).transfer(msg.sender, vTokenAmt);\n        } else {\n            // swap decimal part of vTokens to WETH\n            uint256 fractionalVTokenAmt = vTokenAmt % 1 ether;\n            if (fractionalVTokenAmt > 0) {\n                INFTXVault(params.vtoken).approve(\n                    address(router),\n                    fractionalVTokenAmt\n                );\n                uint256 fractionalWethAmt = router.exactInputSingle(\n                    ISwapRouter.ExactInputSingleParams({\n                        tokenIn: address(params.vtoken),\n                        tokenOut: WETH,\n                        fee: params.swapPoolFee,\n                        recipient: address(this),\n                        deadline: block.timestamp,\n                        amountIn: fractionalVTokenAmt,\n                        amountOutMinimum: 0,\n                        sqrtPriceLimitX96: 0\n                    })\n                );\n                wethAmt += fractionalWethAmt;\n\n                // burn vTokens to provided tokenIds array\n                INFTXVault(params.vtoken).redeemTo(\n                    params.nftIds.length,\n                    params.nftIds,\n                    msg.sender\n                );\n                uint256 vTokenBurned = params.nftIds.length * 1 ether;\n\n                // if more vTokens collected than burned\n                uint256 vTokenResidue = vTokenAmt -\n                    fractionalVTokenAmt -\n                    vTokenBurned;\n\n                if (vTokenResidue > 0) {\n                    INFTXVault(params.vtoken).transfer(\n                        msg.sender,\n                        vTokenResidue\n                    );\n                }\n            }\n        }\n        // send all ETH to sender\n        IWETH9(WETH).withdraw(wethAmt);\n        (bool success, ) = msg.sender.call{value: wethAmt}(\"\");\n        if (!success) revert UnableToSendETH();\n    }\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function sellNFTs(\n        SellNFTsParams calldata params\n    ) external override returns (uint256 wethReceived) {\n        address assetAddress = INFTXVault(params.vtoken).assetAddress();\n\n        // tranfer NFTs from user to the vault\n        for (uint256 i; i < params.nftIds.length; ) {\n            _transferFromERC721(assetAddress, params.nftIds[i], params.vtoken);\n\n            if (assetAddress == CRYPTO_PUNKS) {\n                _approveCryptoPunkERC721(\n                    assetAddress,\n                    params.nftIds[i],\n                    params.vtoken\n                );\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // mint vToken\n        uint256[] memory emptyIds;\n        uint256 vTokensAmount = INFTXVault(params.vtoken).mint(\n            params.nftIds,\n            emptyIds\n        ) * 1 ether;\n\n        INFTXVault(params.vtoken).approve(address(router), vTokensAmount);\n\n        wethReceived = router.exactInputSingle(\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: address(params.vtoken),\n                tokenOut: WETH,\n                fee: params.fee,\n                recipient: address(this),\n                deadline: params.deadline,\n                amountIn: vTokensAmount,\n                amountOutMinimum: params.amountOutMinimum,\n                sqrtPriceLimitX96: params.sqrtPriceLimitX96\n            })\n        );\n\n        // convert WETH to ETH & send to user\n        IWETH9(WETH).withdraw(wethReceived);\n        (bool success, ) = msg.sender.call{value: wethReceived}(\"\");\n        if (!success) revert UnableToSendETH();\n    }\n\n    function buyNFTs(BuyNFTsParams calldata params) external payable override {\n        uint256 vTokenAmt = params.nftIds.length * 1 ether;\n\n        // swap ETH to required vTokens amount\n        router.exactOutputSingle{value: msg.value}(\n            ISwapRouter.ExactOutputSingleParams({\n                tokenIn: WETH,\n                tokenOut: address(params.vtoken),\n                fee: params.fee,\n                recipient: address(this),\n                deadline: params.deadline,\n                amountOut: vTokenAmt,\n                amountInMaximum: msg.value,\n                sqrtPriceLimitX96: params.sqrtPriceLimitX96\n            })\n        );\n\n        // unwrap vTokens to tokenIds specified, and send to sender\n        INFTXVault(params.vtoken).redeemTo(\n            params.nftIds.length,\n            params.nftIds,\n            msg.sender\n        );\n\n        // refund ETH\n        router.refundETH(msg.sender);\n    }\n\n    // =============================================================\n    //                        ONLY OWNER WRITE\n    // =============================================================\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function rescueTokens(IERC20 token) external override onlyOwner {\n        if (address(token) != address(0)) {\n            uint256 balance = token.balanceOf(address(this));\n            token.safeTransfer(msg.sender, balance);\n        } else {\n            uint256 balance = address(this).balance;\n            (bool success, ) = msg.sender.call{value: balance}(\"\");\n            if (!success) revert UnableToSendETH();\n        }\n    }\n\n    // =============================================================\n    //                     PUBLIC / EXTERNAL VIEW\n    // =============================================================\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function quoteBuyNFTs(\n        address vtoken,\n        uint256[] memory nftIds,\n        uint24 fee,\n        uint160 sqrtPriceLimitX96\n    ) external override returns (uint256 ethRequired) {\n        uint256 vTokenAmt = nftIds.length * 1 ether;\n\n        (ethRequired, , , ) = quoter.quoteExactOutputSingle(\n            IQuoterV2.QuoteExactOutputSingleParams({\n                tokenIn: WETH,\n                tokenOut: address(vtoken),\n                amount: vTokenAmt,\n                fee: fee,\n                sqrtPriceLimitX96: sqrtPriceLimitX96\n            })\n        );\n    }\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function getPoolExists(\n        uint256 vaultId,\n        uint24 fee\n    ) external view override returns (address pool, bool exists) {\n        address vToken_ = nftxVaultFactory.vault(vaultId);\n        pool = IUniswapV3Factory(router.factory()).getPool(vToken_, WETH, fee);\n\n        exists = pool != address(0);\n    }\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function getPool(\n        address vToken_,\n        uint24 fee\n    ) external view override returns (address pool) {\n        pool = IUniswapV3Factory(router.factory()).getPool(vToken_, WETH, fee);\n        if (pool == address(0)) revert();\n    }\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function computePool(\n        address vToken_,\n        uint24 fee\n    ) external view override returns (address) {\n        return\n            PoolAddress.computeAddress(\n                router.factory(),\n                PoolAddress.getPoolKey(vToken_, WETH, fee)\n            );\n    }\n\n    /**\n     * @inheritdoc INFTXRouter\n     */\n    function isVToken0(address vtoken) public view override returns (bool) {\n        return vtoken < WETH;\n    }\n\n    // =============================================================\n    //                      INTERNAL / PRIVATE\n    // =============================================================\n\n    /**\n     * @notice Transfers sender's ERC721 tokens to a specified recipient.\n     *\n     * @param assetAddr Address of the asset being transferred\n     * @param tokenId The ID of the token being transferred\n     * @param to The address the token is being transferred to\n     */\n\n    function _transferFromERC721(\n        address assetAddr,\n        uint256 tokenId,\n        address to\n    ) internal virtual {\n        bytes memory data;\n\n        if (assetAddr != CRYPTO_PUNKS) {\n            // We push to the vault to avoid an unneeded transfer.\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        } else {\n            // Fix here for frontrun attack.\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                tokenId\n            );\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\n                .staticcall(punkIndexToAddress);\n            address nftOwner = abi.decode(result, (address));\n            require(\n                checkSuccess && nftOwner == msg.sender,\n                \"Not the NFT owner\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n        }\n\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    /**\n     * @notice Approves our Cryptopunk ERC721 tokens to be transferred.\n     *\n     * @dev This is only required to provide special logic for Cryptopunks.\n     *\n     * @param assetAddr Address of the asset being transferred\n     * @param tokenId The ID of the token being transferred\n     * @param to The address the token is being transferred to\n     */\n\n    function _approveCryptoPunkERC721(\n        address assetAddr,\n        uint256 tokenId,\n        address to\n    ) internal virtual {\n        bytes memory data = abi.encodeWithSignature(\n            \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n            tokenId,\n            0,\n            to\n        );\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    receive() external payable {}\n}\n"
    },
    "src/proxy/Create2BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {Proxy} from \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport {IBeacon} from \"./IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n * Slightly modified to allow using beacon proxies with Create2.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract Create2BeaconProxy is Proxy {\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 private constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor() payable {\n        assert(\n            _BEACON_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)\n        );\n        _setBeacon(msg.sender, \"\");\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address beacon) {\n        bytes32 slot = _BEACON_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            beacon := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation()\n        internal\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return IBeacon(_beacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        require(\n            Address.isContract(beacon),\n            \"BeaconProxy: beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(beacon).implementation()),\n            \"BeaconProxy: beacon implementation is not a contract\"\n        );\n        bytes32 slot = _BEACON_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, beacon)\n        }\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(\n                _implementation(),\n                data,\n                \"BeaconProxy: function call failed\"\n            );\n        }\n    }\n}\n"
    },
    "src/proxy/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n\n    function upgradeBeaconTo(address newImplementation) external;\n}\n"
    },
    "src/proxy/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport {IBeacon} from \"./IBeacon.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, OwnableUpgradeable {\n    address private _beaconImplementation;\n\n    /**\n     * @dev Emitted when the child implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed beaconImplementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    function __UpgradeableBeacon__init(\n        address beaconImplementation_\n    ) public onlyInitializing {\n        __Ownable_init();\n        _setBeaconImplementation(beaconImplementation_);\n    }\n\n    function implementation() public view virtual override returns (address) {\n        return _beaconImplementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newChildImplementation` must be a contract.\n     */\n    function upgradeBeaconTo(\n        address newBeaconImplementation\n    ) public virtual override onlyOwner {\n        _setBeaconImplementation(newBeaconImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newBeaconImplementation` must be a contract.\n     */\n    function _setBeaconImplementation(address newBeaconImplementation) private {\n        require(\n            Address.isContract(newBeaconImplementation),\n            \"UpgradeableBeacon: child implementation is not a contract\"\n        );\n        _beaconImplementation = newBeaconImplementation;\n        emit Upgraded(newBeaconImplementation);\n    }\n}\n"
    },
    "src/uniswap/v3-core/interfaces/callback/IUniswapV3FlashCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#flash\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\ninterface IUniswapV3FlashCallback {\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\n    function uniswapV3FlashCallback(\n        uint256 fee0,\n        uint256 fee1,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/uniswap/v3-core/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/uniswap/v3-core/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/uniswap/v3-core/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/uniswap/v3-core/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    function feeDistributor() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    function setFeeDistributor(address feeDistributor_) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "src/uniswap/v3-core/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IUniswapV3PoolImmutables} from \"./pool/IUniswapV3PoolImmutables.sol\";\nimport {IUniswapV3PoolState} from \"./pool/IUniswapV3PoolState.sol\";\nimport {IUniswapV3PoolDerivedState} from \"./pool/IUniswapV3PoolDerivedState.sol\";\nimport {IUniswapV3PoolActions} from \"./pool/IUniswapV3PoolActions.sol\";\nimport {IUniswapV3PoolOwnerActions} from \"./pool/IUniswapV3PoolOwnerActions.sol\";\nimport {IUniswapV3PoolErrors} from \"./pool/IUniswapV3PoolErrors.sol\";\nimport {IUniswapV3PoolEvents} from \"./pool/IUniswapV3PoolEvents.sol\";\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolErrors,\n    IUniswapV3PoolEvents\n{\n    function __UniswapV3PoolUpgradeable_init(\n        address factory_,\n        address token0_,\n        address token1_,\n        uint24 fee_,\n        int24 tickSpacing_\n    ) external;\n}\n"
    },
    "src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Distributes the received vault fees among the current LPs, proportional to their liquidity contribution\n    /// @dev Can only be called by feeDistributor, after it sends the reward tokens to this pool\n    /// @param rewardsAmount The amount of reward tokens to distribute\n    /// @param isToken0 If reward token is token0 then true, else false\n    function distributeRewards(\n        uint256 rewardsAmount,\n        bool isToken0\n    ) external;\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Errors emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolErrors {\n    error LOK();\n    error TLU();\n    error TLM();\n    error TUM();\n    error AI();\n    error M0();\n    error M1();\n    error AS();\n    error IIA();\n    error L();\n    error F0();\n    error F1();\n}\n"
    },
    "src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// @return observationIndex The index of the last oracle observation that was written,\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @return The liquidity at the current price of the pool\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return liquidity The amount of liquidity in the position,\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// @return initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "src/uniswap/v3-core/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        unchecked {\n            if (x >= 0x100000000000000000000000000000000) {\n                x >>= 128;\n                r += 128;\n            }\n            if (x >= 0x10000000000000000) {\n                x >>= 64;\n                r += 64;\n            }\n            if (x >= 0x100000000) {\n                x >>= 32;\n                r += 32;\n            }\n            if (x >= 0x10000) {\n                x >>= 16;\n                r += 16;\n            }\n            if (x >= 0x100) {\n                x >>= 8;\n                r += 8;\n            }\n            if (x >= 0x10) {\n                x >>= 4;\n                r += 4;\n            }\n            if (x >= 0x4) {\n                x >>= 2;\n                r += 2;\n            }\n            if (x >= 0x2) r += 1;\n        }\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        unchecked {\n            r = 255;\n            if (x & type(uint128).max > 0) {\n                r -= 128;\n            } else {\n                x >>= 128;\n            }\n            if (x & type(uint64).max > 0) {\n                r -= 64;\n            } else {\n                x >>= 64;\n            }\n            if (x & type(uint32).max > 0) {\n                r -= 32;\n            } else {\n                x >>= 32;\n            }\n            if (x & type(uint16).max > 0) {\n                r -= 16;\n            } else {\n                x >>= 16;\n            }\n            if (x & type(uint8).max > 0) {\n                r -= 8;\n            } else {\n                x >>= 8;\n            }\n            if (x & 0xf > 0) {\n                r -= 4;\n            } else {\n                x >>= 4;\n            }\n            if (x & 0x3 > 0) {\n                r -= 2;\n            } else {\n                x >>= 2;\n            }\n            if (x & 0x1 > 0) r -= 1;\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "src/uniswap/v3-core/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "src/uniswap/v3-core/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/Oracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/// @title Oracle\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\n/// @dev Instances of stored oracle data, \"observations\", are collected in the oracle array\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\n/// Observations are overwritten when the full length of the oracle array is populated.\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\nlibrary Oracle {\n    error I();\n    error OLD();\n\n    struct Observation {\n        // the block timestamp of the observation\n        uint32 blockTimestamp;\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\n        int56 tickCumulative;\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether or not the observation is initialized\n        bool initialized;\n    }\n\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\n    /// @param last The specified observation to be transformed\n    /// @param blockTimestamp The timestamp of the new observation\n    /// @param tick The active tick at the time of the new observation\n    /// @param liquidity The total in-range liquidity at the time of the new observation\n    /// @return Observation The newly populated observation\n    function transform(\n        Observation memory last,\n        uint32 blockTimestamp,\n        int24 tick,\n        uint128 liquidity\n    ) private pure returns (Observation memory) {\n        unchecked {\n            uint32 delta = blockTimestamp - last.blockTimestamp;\n            return\n                Observation({\n                    blockTimestamp: blockTimestamp,\n                    tickCumulative: last.tickCumulative + int56(tick) * int56(uint56(delta)),\n                    secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\n                        ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\n                    initialized: true\n                });\n        }\n    }\n\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\n    /// @param self The stored oracle array\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\n    /// @return cardinality The number of populated elements in the oracle array\n    /// @return cardinalityNext The new length of the oracle array, independent of population\n    function initialize(Observation[65535] storage self, uint32 time)\n        internal\n        returns (uint16 cardinality, uint16 cardinalityNext)\n    {\n        self[0] = Observation({\n            blockTimestamp: time,\n            tickCumulative: 0,\n            secondsPerLiquidityCumulativeX128: 0,\n            initialized: true\n        });\n        return (1, 1);\n    }\n\n    /// @notice Writes an oracle observation to the array\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\n    /// @param self The stored oracle array\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param blockTimestamp The timestamp of the new observation\n    /// @param tick The active tick at the time of the new observation\n    /// @param liquidity The total in-range liquidity at the time of the new observation\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @param cardinalityNext The new length of the oracle array, independent of population\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\n    /// @return cardinalityUpdated The new cardinality of the oracle array\n    function write(\n        Observation[65535] storage self,\n        uint16 index,\n        uint32 blockTimestamp,\n        int24 tick,\n        uint128 liquidity,\n        uint16 cardinality,\n        uint16 cardinalityNext\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\n        unchecked {\n            Observation memory last = self[index];\n\n            // early return if we've already written an observation this block\n            if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\n\n            // if the conditions are right, we can bump the cardinality\n            if (cardinalityNext > cardinality && index == (cardinality - 1)) {\n                cardinalityUpdated = cardinalityNext;\n            } else {\n                cardinalityUpdated = cardinality;\n            }\n\n            indexUpdated = (index + 1) % cardinalityUpdated;\n            self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\n        }\n    }\n\n    /// @notice Prepares the oracle array to store up to `next` observations\n    /// @param self The stored oracle array\n    /// @param current The current next cardinality of the oracle array\n    /// @param next The proposed next cardinality which will be populated in the oracle array\n    /// @return next The next cardinality which will be populated in the oracle array\n    function grow(\n        Observation[65535] storage self,\n        uint16 current,\n        uint16 next\n    ) internal returns (uint16) {\n        unchecked {\n            if (current <= 0) revert I();\n            // no-op if the passed next value isn't greater than the current next value\n            if (next <= current) return current;\n            // store in each slot to prevent fresh SSTOREs in swaps\n            // this data will not be used because the initialized boolean is still false\n            for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\n            return next;\n        }\n    }\n\n    /// @notice comparator for 32-bit timestamps\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\n    /// @param time A timestamp truncated to 32 bits\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\n    /// @param b From which to determine the relative position of `time`\n    /// @return Whether `a` is chronologically <= `b`\n    function lte(\n        uint32 time,\n        uint32 a,\n        uint32 b\n    ) private pure returns (bool) {\n        unchecked {\n            // if there hasn't been overflow, no need to adjust\n            if (a <= time && b <= time) return a <= b;\n\n            uint256 aAdjusted = a > time ? a : a + 2**32;\n            uint256 bAdjusted = b > time ? b : b + 2**32;\n\n            return aAdjusted <= bAdjusted;\n        }\n    }\n\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\n    /// The result may be the same observation, or adjacent observations.\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param target The timestamp at which the reserved observation should be for\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return beforeOrAt The observation recorded before, or at, the target\n    /// @return atOrAfter The observation recorded at, or after, the target\n    function binarySearch(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 target,\n        uint16 index,\n        uint16 cardinality\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n        unchecked {\n            uint256 l = (index + 1) % cardinality; // oldest observation\n            uint256 r = l + cardinality - 1; // newest observation\n            uint256 i;\n            while (true) {\n                i = (l + r) / 2;\n\n                beforeOrAt = self[i % cardinality];\n\n                // we've landed on an uninitialized tick, keep searching higher (more recently)\n                if (!beforeOrAt.initialized) {\n                    l = i + 1;\n                    continue;\n                }\n\n                atOrAfter = self[(i + 1) % cardinality];\n\n                bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\n\n                // check if we've found the answer!\n                if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\n\n                if (!targetAtOrAfter) r = i - 1;\n                else l = i + 1;\n            }\n        }\n    }\n\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\n    /// @dev Assumes there is at least 1 initialized observation.\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param target The timestamp at which the reserved observation should be for\n    /// @param tick The active tick at the time of the returned or simulated observation\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The total pool liquidity at the time of the call\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\n    function getSurroundingObservations(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 target,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n        unchecked {\n            // optimistically set before to the newest observation\n            beforeOrAt = self[index];\n\n            // if the target is chronologically at or after the newest observation, we can early return\n            if (lte(time, beforeOrAt.blockTimestamp, target)) {\n                if (beforeOrAt.blockTimestamp == target) {\n                    // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\n                    return (beforeOrAt, atOrAfter);\n                } else {\n                    // otherwise, we need to transform\n                    return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\n                }\n            }\n\n            // now, set before to the oldest observation\n            beforeOrAt = self[(index + 1) % cardinality];\n            if (!beforeOrAt.initialized) beforeOrAt = self[0];\n\n            // ensure that the target is chronologically at or after the oldest observation\n            if (!lte(time, beforeOrAt.blockTimestamp, target)) revert OLD();\n\n            // if we've reached this point, we have to binary search\n            return binarySearch(self, time, target, index, cardinality);\n        }\n    }\n\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\n    /// at exactly the timestamp between the two observations.\n    /// @param self The stored oracle array\n    /// @param time The current block timestamp\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\n    /// @param tick The current tick\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The current in-range pool liquidity\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\n    function observeSingle(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 secondsAgo,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\n        unchecked {\n            if (secondsAgo == 0) {\n                Observation memory last = self[index];\n                if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\n                return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\n            }\n\n            uint32 target = time - secondsAgo;\n\n            (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\n                self,\n                time,\n                target,\n                tick,\n                index,\n                liquidity,\n                cardinality\n            );\n\n            if (target == beforeOrAt.blockTimestamp) {\n                // we're at the left boundary\n                return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\n            } else if (target == atOrAfter.blockTimestamp) {\n                // we're at the right boundary\n                return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\n            } else {\n                // we're in the middle\n                uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\n                uint32 targetDelta = target - beforeOrAt.blockTimestamp;\n                return (\n                    beforeOrAt.tickCumulative +\n                        ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / int56(uint56(observationTimeDelta))) *\n                        int56(uint56(targetDelta)),\n                    beforeOrAt.secondsPerLiquidityCumulativeX128 +\n                        uint160(\n                            (uint256(\n                                atOrAfter.secondsPerLiquidityCumulativeX128 -\n                                    beforeOrAt.secondsPerLiquidityCumulativeX128\n                            ) * targetDelta) / observationTimeDelta\n                        )\n                );\n            }\n        }\n    }\n\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\n    /// @dev Reverts if `secondsAgos` > oldest observation\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\n    /// @param tick The current tick\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The current in-range pool liquidity\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\n    function observe(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32[] memory secondsAgos,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\n        unchecked {\n            if (cardinality <= 0) revert I();\n\n            tickCumulatives = new int56[](secondsAgos.length);\n            secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\n            for (uint256 i = 0; i < secondsAgos.length; i++) {\n                (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\n                    self,\n                    time,\n                    secondsAgos[i],\n                    tick,\n                    index,\n                    liquidity,\n                    cardinality\n                );\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {FullMath} from './FullMath.sol';\nimport {FixedPoint128} from './FixedPoint128.sol';\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position\nlibrary Position {\n    error NP();\n\n    // info stored for each user's position\n    struct Info {\n        // the amount of liquidity owned by this position\n        uint128 liquidity;\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        // the fees owed to the position owner in token0/token1\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n    }\n\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\n    /// @param self The mapping containing all user positions\n    /// @param owner The address of the position owner\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return position The position info struct of the given owners' position\n    function get(\n        mapping(bytes32 => Info) storage self,\n        address owner,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal view returns (Position.Info storage position) {\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\n    }\n\n    /// @notice Credits accumulated fees to a user's position\n    /// @param self The individual position to update\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function update(\n        Info storage self,\n        int128 liquidityDelta,\n        uint256 feeGrowthInside0X128,\n        uint256 feeGrowthInside1X128\n    ) internal {\n        Info memory _self = self;\n\n        uint128 liquidityNext;\n        if (liquidityDelta == 0) {\n            if (_self.liquidity <= 0) revert NP(); // disallow pokes for 0 liquidity positions\n            liquidityNext = _self.liquidity;\n        } else {\n            liquidityNext = liquidityDelta < 0\n                ? _self.liquidity - uint128(-liquidityDelta)\n                : _self.liquidity + uint128(liquidityDelta);\n        }\n\n        // calculate accumulated fees. overflow in the subtraction of fee growth is expected\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n        unchecked {\n            tokensOwed0 = uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\n                    _self.liquidity,\n                    FixedPoint128.Q128\n                )\n            );\n            tokensOwed1 = uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\n                    _self.liquidity,\n                    FixedPoint128.Q128\n                )\n            );\n\n            // update the position\n            if (liquidityDelta != 0) self.liquidity = liquidityNext;\n            self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\n            self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\n            if (tokensOwed0 > 0 || tokensOwed1 > 0) {\n                // overflow is acceptable, user must withdraw before they hit type(uint128).max fees\n                self.tokensOwed0 += tokensOwed0;\n                self.tokensOwed1 += tokensOwed1;\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/Simulate.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport {SwapMath} from './SwapMath.sol';\nimport {SafeCast} from './SafeCast.sol';\nimport {TickMath} from './TickMath.sol';\nimport {TickBitmap} from './TickBitmap.sol';\nimport {BitMath} from './BitMath.sol';\n\nimport {IUniswapV3Pool} from '../interfaces/IUniswapV3Pool.sol';\n\n/// @title Library for simulating swaps.\n/// @notice By fully replicating the swap logic, we can make a static call to get a quote.\nlibrary Simulate {\n    using SafeCast for uint256;\n\n    struct Cache {\n        // price at the beginning of the swap\n        uint160 sqrtPriceX96Start;\n        // tick at the beginning of the swap\n        int24 tickStart;\n        // liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the lp fee of the pool\n        uint24 fee;\n        // the tick spacing of the pool\n        int24 tickSpacing;\n    }\n\n    struct State {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    // copied from UniswapV3Pool to avoid pragma issues associated with importing it\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    function simulateSwap(\n        IUniswapV3Pool pool,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) internal view returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'AS');\n\n        (uint160 sqrtPriceX96, int24 tick, , , , , ) = pool.slot0();\n\n        require(\n            zeroForOne\n                ? sqrtPriceLimitX96 < sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\n                : sqrtPriceLimitX96 > sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\n            'SPL'\n        );\n\n        Cache memory cache = Cache({\n            sqrtPriceX96Start: sqrtPriceX96,\n            tickStart: tick,\n            liquidityStart: pool.liquidity(),\n            fee: pool.fee(),\n            tickSpacing: pool.tickSpacing()\n        });\n\n        bool exactInput = amountSpecified > 0;\n\n        State memory state = State({\n            amountSpecifiedRemaining: amountSpecified,\n            amountCalculated: 0,\n            sqrtPriceX96: cache.sqrtPriceX96Start,\n            tick: cache.tickStart,\n            liquidity: cache.liquidityStart\n        });\n\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) = nextInitializedTickWithinOneWord(\n                pool.tickBitmap,\n                state.tick,\n                cache.tickSpacing,\n                zeroForOne\n            );\n\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\n                    ? sqrtPriceLimitX96\n                    : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                cache.fee\n            );\n\n            if (exactInput) {\n                unchecked {\n                    state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                }\n                state.amountCalculated -= step.amountOut.toInt256();\n            } else {\n                unchecked {\n                    state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                }\n                state.amountCalculated += (step.amountIn + step.feeAmount).toInt256();\n            }\n\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                if (step.initialized) {\n                    (, int128 liquidityNet, , , , , , ) = pool.ticks(step.tickNext);\n                    unchecked {\n                        if (zeroForOne) liquidityNet = -liquidityNet;\n                    }\n\n                    state.liquidity = liquidityNet < 0\n                        ? state.liquidity - uint128(-liquidityNet)\n                        : state.liquidity + uint128(liquidityNet);\n                }\n\n                unchecked {\n                    state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n                }\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n    }\n\n    // This function replicates TickBitmap, but accepts a function pointer argument.\n    // It's private because it's messy, and shouldn't be re-used.\n    function nextInitializedTickWithinOneWord(\n        function(int16) external view returns (uint256) self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) private view returns (int24 next, bool initialized) {\n        unchecked {\n            int24 compressed = tick / tickSpacing;\n            if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n            if (lte) {\n                (int16 wordPos, uint8 bitPos) = TickBitmap.position(compressed);\n                // all the 1s at or to the right of the current bitPos\n                uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n                uint256 masked = self(wordPos) & mask;\n\n                // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n                    : (compressed - int24(uint24(bitPos))) * tickSpacing;\n            } else {\n                // start from the word of the next tick, since the current tick state doesn't matter\n                (int16 wordPos, uint8 bitPos) = TickBitmap.position(compressed + 1);\n                // all the 1s at or to the left of the bitPos\n                uint256 mask = ~((1 << bitPos) - 1);\n                uint256 masked = self(wordPos) & mask;\n\n                // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n                    : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {SafeCast} from './SafeCast.sol';\n\nimport {FullMath} from './FullMath.sol';\nimport {UnsafeMath} from './UnsafeMath.sol';\nimport {FixedPoint96} from './FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            unchecked {\n                uint256 product;\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                    uint256 denominator = numerator1 + product;\n                    if (denominator >= numerator1)\n                        // always fits in 160 bits\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n                }\n            }\n            // denominator is checked for overflow\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96) + amount));\n        } else {\n            unchecked {\n                uint256 product;\n                // if the product overflows, we know the denominator underflows\n                // in addition, we must check that the denominator does not underflow\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n                uint256 denominator = numerator1 - product;\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n            }\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            return (uint256(sqrtPX96) + quotient).toUint160();\n        } else {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            unchecked {\n                return uint160(sqrtPX96 - quotient);\n            }\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n            require(sqrtRatioAX96 > 0);\n\n            return\n                roundUp\n                    ? UnsafeMath.divRoundingUp(\n                        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                        sqrtRatioAX96\n                    )\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            return\n                roundUp\n                    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n        }\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        unchecked {\n            return\n                liquidity < 0\n                    ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        unchecked {\n            return\n                liquidity < 0\n                    ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {FullMath} from './FullMath.sol';\nimport {SqrtPriceMath} from './SqrtPriceMath.sol';\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    )\n        internal\n        pure\n        returns (\n            uint160 sqrtRatioNextX96,\n            uint256 amountIn,\n            uint256 amountOut,\n            uint256 feeAmount\n        )\n    {\n        unchecked {\n            bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n            bool exactIn = amountRemaining >= 0;\n\n            if (exactIn) {\n                uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n                amountIn = zeroForOne\n                    ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n                if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n                else\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                        sqrtRatioCurrentX96,\n                        liquidity,\n                        amountRemainingLessFee,\n                        zeroForOne\n                    );\n            } else {\n                amountOut = zeroForOne\n                    ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n                if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n                else\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                        sqrtRatioCurrentX96,\n                        liquidity,\n                        uint256(-amountRemaining),\n                        zeroForOne\n                    );\n            }\n\n            bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n            // get the input/output amounts\n            if (zeroForOne) {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n            } else {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n            }\n\n            // cap the output amount to not exceed the remaining output amount\n            if (!exactIn && amountOut > uint256(-amountRemaining)) {\n                amountOut = uint256(-amountRemaining);\n            }\n\n            if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n                // we didn't reach the target, so take the remainder of the maximum input as fee\n                feeAmount = uint256(amountRemaining) - amountIn;\n            } else {\n                feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {SafeCast} from './SafeCast.sol';\n\nimport {TickMath} from './TickMath.sol';\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n    error LO();\n\n    using SafeCast for int256;\n\n    // info stored for each initialized individual tick\n    struct Info {\n        // the total position liquidity that references this tick\n        uint128 liquidityGross;\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\n        int128 liquidityNet;\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n        // the cumulative tick value on the other side of the tick\n        int56 tickCumulativeOutside;\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint160 secondsPerLiquidityOutsideX128;\n        // the seconds spent on the other side of the tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint32 secondsOutside;\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n        bool initialized;\n    }\n\n    /// @notice Derives max liquidity per tick from given tick spacing\n    /// @dev Executed within the pool constructor\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @return The max liquidity per tick\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\n        unchecked {\n            int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n            int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n            uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n            return type(uint128).max / numTicks;\n        }\n    }\n\n    /// @notice Retrieves fee growth data\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @param tickCurrent The current tick\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function getFeeGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        unchecked {\n            Info storage lower = self[tickLower];\n            Info storage upper = self[tickUpper];\n\n            // calculate fee growth below\n            uint256 feeGrowthBelow0X128;\n            uint256 feeGrowthBelow1X128;\n            if (tickCurrent >= tickLower) {\n                feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\n                feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\n            } else {\n                feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\n                feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\n            }\n\n            // calculate fee growth above\n            uint256 feeGrowthAbove0X128;\n            uint256 feeGrowthAbove1X128;\n            if (tickCurrent < tickUpper) {\n                feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\n                feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\n            } else {\n                feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\n                feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\n            }\n\n            feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n            feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n        }\n    }\n\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param tickCurrent The current tick\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n    /// @param time The current block timestamp cast to a uint32\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n    function update(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int24 tickCurrent,\n        int128 liquidityDelta,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time,\n        bool upper,\n        uint128 maxLiquidity\n    ) internal returns (bool flipped) {\n        Tick.Info storage info = self[tick];\n\n        uint128 liquidityGrossBefore = info.liquidityGross;\n        uint128 liquidityGrossAfter = liquidityDelta < 0\n            ? liquidityGrossBefore - uint128(-liquidityDelta)\n            : liquidityGrossBefore + uint128(liquidityDelta);\n\n        if (liquidityGrossAfter > maxLiquidity) revert LO();\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= tickCurrent) {\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\n                info.tickCumulativeOutside = tickCumulative;\n                info.secondsOutside = time;\n            }\n            info.initialized = true;\n        }\n\n        info.liquidityGross = liquidityGrossAfter;\n\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n        info.liquidityNet = upper ? info.liquidityNet - liquidityDelta : info.liquidityNet + liquidityDelta;\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\n        delete self[tick];\n    }\n\n    /// @notice Transitions to next tick as needed by price movement\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The destination tick of the transition\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n    /// @param time The current block.timestamp\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\n    function cross(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time\n    ) internal returns (int128 liquidityNet) {\n        unchecked {\n            Tick.Info storage info = self[tick];\n            info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\n            info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\n            info.secondsPerLiquidityOutsideX128 =\n                secondsPerLiquidityCumulativeX128 -\n                info.secondsPerLiquidityOutsideX128;\n            info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\n            info.secondsOutside = time - info.secondsOutside;\n            liquidityNet = info.liquidityNet;\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {BitMath} from './BitMath.sol';\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) internal pure returns (int16 wordPos, uint8 bitPos) {\n        unchecked {\n            wordPos = int16(tick >> 8);\n            bitPos = uint8(int8(tick % 256));\n        }\n    }\n\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n    /// @param self The mapping in which to flip the tick\n    /// @param tick The tick to flip\n    /// @param tickSpacing The spacing between usable ticks\n    function flipTick(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing\n    ) internal {\n        unchecked {\n            require(tick % tickSpacing == 0); // ensure that the tick is spaced\n            (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n            uint256 mask = 1 << bitPos;\n            self[wordPos] ^= mask;\n        }\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        unchecked {\n            int24 compressed = tick / tickSpacing;\n            if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n            if (lte) {\n                (int16 wordPos, uint8 bitPos) = position(compressed);\n                // all the 1s at or to the right of the current bitPos\n                uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n                uint256 masked = self[wordPos] & mask;\n\n                // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n                    : (compressed - int24(uint24(bitPos))) * tickSpacing;\n            } else {\n                // start from the word of the next tick, since the current tick state doesn't matter\n                (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n                // all the 1s at or to the left of the bitPos\n                uint256 mask = ~((1 << bitPos) - 1);\n                uint256 masked = self[wordPos] & mask;\n\n                // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n                    : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    error T();\n    error R();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\n\n            uint256 ratio = absTick & 0x1 != 0\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\n                : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport {IERC20Minimal} from '../interfaces/IERC20Minimal.sol';\n\n/// @title TransferHelper\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\nlibrary TransferHelper {\n    error TF();\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value)\n        );\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) revert TF();\n    }\n}\n"
    },
    "src/uniswap/v3-core/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/BlockTimestamp.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\n/// @title Function for getting block timestamp\n/// @dev Base contract that is overridden for tests\nabstract contract BlockTimestamp {\n    /// @dev Method that exists purely to be overridden for tests\n    /// @return The current block timestamp\n    function _blockTimestamp() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/ERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '../libraries/ChainId.sol';\nimport '../interfaces/external/IERC1271.sol';\nimport '../interfaces/IERC721Permit.sol';\nimport './BlockTimestamp.sol';\n\n/// @title ERC721 with permit\n/// @notice Nonfungible tokens that support an approve via signature, i.e. permit\nabstract contract ERC721Permit is BlockTimestamp, ERC721Enumerable, IERC721Permit {\n    /// @dev Gets the current nonce for a token ID and then increments it, returning the original value\n    function _getAndIncrementNonce(uint256 tokenId) internal virtual returns (uint256);\n\n    /// @dev The hash of the name used in the permit signature verification\n    bytes32 private immutable nameHash;\n\n    /// @dev The hash of the version string used in the permit signature verification\n    bytes32 private immutable versionHash;\n\n    /// @notice Computes the nameHash and versionHash\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        string memory version_\n    ) ERC721(name_, symbol_) {\n        nameHash = keccak256(bytes(name_));\n        versionHash = keccak256(bytes(version_));\n    }\n\n    /// @inheritdoc IERC721Permit\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\n                    nameHash,\n                    versionHash,\n                    ChainId.get(),\n                    address(this)\n                )\n            );\n    }\n\n    /// @inheritdoc IERC721Permit\n    /// @dev Value is equal to keccak256(\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH =\n        0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\n\n    /// @inheritdoc IERC721Permit\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        require(_blockTimestamp() <= deadline, 'Permit expired');\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR(),\n                keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, _getAndIncrementNonce(tokenId), deadline))\n            )\n        );\n        address owner = ownerOf(tokenId);\n        require(spender != owner, 'ERC721Permit: approval to current owner');\n\n        if (Address.isContract(owner)) {\n            require(IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e, 'Unauthorized');\n        } else {\n            address recoveredAddress = ecrecover(digest, v, r, s);\n            require(recoveredAddress != address(0), 'Invalid signature');\n            require(recoveredAddress == owner, 'Unauthorized');\n        }\n\n        _approve(spender, tokenId);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/LiquidityManagement.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\n\nimport '../libraries/PoolAddress.sol';\nimport '../libraries/CallbackValidation.sol';\nimport '../libraries/LiquidityAmounts.sol';\n\nimport './PeripheryPayments.sol';\nimport './PeripheryImmutableState.sol';\n\n/// @title Liquidity management functions\n/// @notice Internal functions for safely managing liquidity in Uniswap V3\nabstract contract LiquidityManagement is IUniswapV3MintCallback, PeripheryImmutableState, PeripheryPayments {\n    struct MintCallbackData {\n        PoolAddress.PoolKey poolKey;\n        address payer;\n    }\n\n    /// @inheritdoc IUniswapV3MintCallback\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external override {\n        MintCallbackData memory decoded = abi.decode(data, (MintCallbackData));\n        CallbackValidation.verifyCallback(factory, decoded.poolKey);\n\n        if (amount0Owed > 0) pay(decoded.poolKey.token0, decoded.payer, msg.sender, amount0Owed);\n        if (amount1Owed > 0) pay(decoded.poolKey.token1, decoded.payer, msg.sender, amount1Owed);\n    }\n\n    struct AddLiquidityParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        address recipient;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    /// @notice Add liquidity to an initialized pool\n    function addLiquidity(AddLiquidityParams memory params)\n        internal\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1,\n            IUniswapV3Pool pool\n        )\n    {\n        PoolAddress.PoolKey memory poolKey = PoolAddress.PoolKey({\n            token0: params.token0,\n            token1: params.token1,\n            fee: params.fee\n        });\n\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n\n        // compute the liquidity amount\n        {\n            (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n            uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(params.tickLower);\n            uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(params.tickUpper);\n\n            liquidity = LiquidityAmounts.getLiquidityForAmounts(\n                sqrtPriceX96,\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                params.amount0Desired,\n                params.amount1Desired\n            );\n        }\n\n        (amount0, amount1) = pool.mint(\n            params.recipient,\n            params.tickLower,\n            params.tickUpper,\n            liquidity,\n            abi.encode(MintCallbackData({poolKey: poolKey, payer: msg.sender}))\n        );\n\n        require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, 'Price slippage check');\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '../interfaces/IMulticall.sol';\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n    /// @inheritdoc IMulticall\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n                if (result.length < 68) revert();\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n\n            results[i] = result;\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/PeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport '../interfaces/IPeripheryImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override factory;\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override WETH9;\n\n    constructor(address _factory, address _WETH9) {\n        factory = _factory;\n        WETH9 = _WETH9;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/PeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport '../interfaces/IPeripheryPayments.sol';\nimport '../interfaces/external/IWETH9.sol';\n\nimport '../libraries/TransferHelper.sol';\n\nimport './PeripheryImmutableState.sol';\n\nabstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\n    receive() external payable {\n        require(msg.sender == WETH9, 'Not WETH9');\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\n\n        if (balanceWETH9 > 0) {\n            IWETH9(WETH9).withdraw(balanceWETH9);\n            TransferHelper.safeTransferETH(recipient, balanceWETH9);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) public payable override {\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\n        require(balanceToken >= amountMinimum, 'Insufficient token');\n\n        if (balanceToken > 0) {\n            TransferHelper.safeTransfer(token, recipient, balanceToken);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function refundETH() external payable override {\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function refundETH(address receiver) external payable override {\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(receiver, address(this).balance);\n    }\n\n    /// @param token The token to pay\n    /// @param payer The entity that must pay\n    /// @param recipient The entity that will receive payment\n    /// @param value The amount to pay\n    function pay(\n        address token,\n        address payer,\n        address recipient,\n        uint256 value\n    ) internal {\n        if (token == WETH9 && address(this).balance >= value) {\n            // pay with WETH9\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\n            IWETH9(WETH9).transfer(recipient, value);\n        } else if (payer == address(this)) {\n            // pay with tokens already in the contract (for the exact input multihop case)\n            TransferHelper.safeTransfer(token, recipient, value);\n        } else {\n            // pull payment\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/PeripheryPaymentsWithFee.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './PeripheryPayments.sol';\nimport '../interfaces/IPeripheryPaymentsWithFee.sol';\n\nimport '../interfaces/external/IWETH9.sol';\nimport '../libraries/TransferHelper.sol';\n\nabstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {\n    /// @inheritdoc IPeripheryPaymentsWithFee\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) public payable override {\n        require(feeBips > 0 && feeBips <= 100);\n\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\n\n        if (balanceWETH9 > 0) {\n            IWETH9(WETH9).withdraw(balanceWETH9);\n            uint256 feeAmount = (balanceWETH9 * feeBips) / 10_000;\n            if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);\n            TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPaymentsWithFee\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) public payable override {\n        require(feeBips > 0 && feeBips <= 100);\n\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\n        require(balanceToken >= amountMinimum, 'Insufficient token');\n\n        if (balanceToken > 0) {\n            uint256 feeAmount = (balanceToken * feeBips) / 10_000;\n            if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\n            TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/PeripheryValidation.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport './BlockTimestamp.sol';\n\nabstract contract PeripheryValidation is BlockTimestamp {\n    modifier checkDeadline(uint256 deadline) {\n        require(_blockTimestamp() <= deadline, 'Transaction too old');\n        _;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/PoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport './PeripheryImmutableState.sol';\nimport '../interfaces/IPoolInitializer.sol';\n\n/// @title Creates and initializes V3 Pools\nabstract contract PoolInitializer is IPoolInitializer, PeripheryImmutableState {\n    /// @inheritdoc IPoolInitializer\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable override returns (address pool) {\n        require(token0 < token1);\n        pool = IUniswapV3Factory(factory).getPool(token0, token1, fee);\n\n        if (pool == address(0)) {\n            pool = IUniswapV3Factory(factory).createPool(token0, token1, fee);\n            IUniswapV3Pool(pool).initialize(sqrtPriceX96);\n        } else {\n            (uint160 sqrtPriceX96Existing, , , , , , ) = IUniswapV3Pool(pool).slot0();\n            if (sqrtPriceX96Existing == 0) {\n                IUniswapV3Pool(pool).initialize(sqrtPriceX96);\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/base/SelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol';\n\nimport '../interfaces/ISelfPermit.sol';\nimport '../interfaces/external/IERC20PermitAllowed.sol';\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n/// that requires an approval in a single transaction.\nabstract contract SelfPermit is ISelfPermit {\n    /// @inheritdoc ISelfPermit\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/examples/PairFlash.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol';\n\nimport '../base/PeripheryPayments.sol';\nimport '../base/PeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\nimport '../libraries/CallbackValidation.sol';\nimport '../libraries/TransferHelper.sol';\nimport '../interfaces/ISwapRouter.sol';\n\n/// @title Flash contract implementation\n/// @notice An example contract using the Uniswap V3 flash function\ncontract PairFlash is IUniswapV3FlashCallback, PeripheryPayments {\n    ISwapRouter public immutable swapRouter;\n\n    constructor(\n        ISwapRouter _swapRouter,\n        address _factory,\n        address _WETH9\n    ) PeripheryImmutableState(_factory, _WETH9) {\n        swapRouter = _swapRouter;\n    }\n\n    // fee2 and fee3 are the two other fees associated with the two other pools of token0 and token1\n    struct FlashCallbackData {\n        uint256 amount0;\n        uint256 amount1;\n        address payer;\n        PoolAddress.PoolKey poolKey;\n        uint24 poolFee2;\n        uint24 poolFee3;\n    }\n\n    /// @param fee0 The fee from calling flash for token0\n    /// @param fee1 The fee from calling flash for token1\n    /// @param data The data needed in the callback passed as FlashCallbackData from `initFlash`\n    /// @notice implements the callback called from flash\n    /// @dev fails if the flash is not profitable, meaning the amountOut from the flash is less than the amount borrowed\n    function uniswapV3FlashCallback(\n        uint256 fee0,\n        uint256 fee1,\n        bytes calldata data\n    ) external override {\n        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));\n        CallbackValidation.verifyCallback(factory, decoded.poolKey);\n\n        address token0 = decoded.poolKey.token0;\n        address token1 = decoded.poolKey.token1;\n\n        // profitability parameters - we must receive at least the required payment from the arbitrage swaps\n        // exactInputSingle will fail if this amount not met\n        uint256 amount0Min = decoded.amount0 + fee0;\n        uint256 amount1Min = decoded.amount1 + fee1;\n\n        // call exactInputSingle for swapping token1 for token0 in pool with fee2\n        TransferHelper.safeApprove(token1, address(swapRouter), decoded.amount1);\n        uint256 amountOut0 = swapRouter.exactInputSingle(\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: token1,\n                tokenOut: token0,\n                fee: decoded.poolFee2,\n                recipient: address(this),\n                deadline: block.timestamp,\n                amountIn: decoded.amount1,\n                amountOutMinimum: amount0Min,\n                sqrtPriceLimitX96: 0\n            })\n        );\n\n        // call exactInputSingle for swapping token0 for token 1 in pool with fee3\n        TransferHelper.safeApprove(token0, address(swapRouter), decoded.amount0);\n        uint256 amountOut1 = swapRouter.exactInputSingle(\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: token0,\n                tokenOut: token1,\n                fee: decoded.poolFee3,\n                recipient: address(this),\n                deadline: block.timestamp,\n                amountIn: decoded.amount0,\n                amountOutMinimum: amount1Min,\n                sqrtPriceLimitX96: 0\n            })\n        );\n\n        // pay the required amounts back to the pair\n        if (amount0Min > 0) pay(token0, address(this), msg.sender, amount0Min);\n        if (amount1Min > 0) pay(token1, address(this), msg.sender, amount1Min);\n\n        // if profitable pay profits to payer\n        if (amountOut0 > amount0Min) {\n            uint256 profit0 = amountOut0 - amount0Min;\n            pay(token0, address(this), decoded.payer, profit0);\n        }\n        if (amountOut1 > amount1Min) {\n            uint256 profit1 = amountOut1 - amount1Min;\n            pay(token1, address(this), decoded.payer, profit1);\n        }\n    }\n\n    //fee1 is the fee of the pool from the initial borrow\n    //fee2 is the fee of the first pool to arb from\n    //fee3 is the fee of the second pool to arb from\n    struct FlashParams {\n        address token0;\n        address token1;\n        uint24 fee1;\n        uint256 amount0;\n        uint256 amount1;\n        uint24 fee2;\n        uint24 fee3;\n    }\n\n    /// @param params The parameters necessary for flash and the callback, passed in as FlashParams\n    /// @notice Calls the pools flash function with data needed in `uniswapV3FlashCallback`\n    function initFlash(FlashParams memory params) external {\n        PoolAddress.PoolKey memory poolKey = PoolAddress.PoolKey({\n            token0: params.token0,\n            token1: params.token1,\n            fee: params.fee1\n        });\n        IUniswapV3Pool pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        // recipient of borrowed amounts\n        // amount of token0 requested to borrow\n        // amount of token1 requested to borrow\n        // need amount 0 and amount1 in callback to pay back pool\n        // recipient of flash should be THIS contract\n        pool.flash(\n            address(this),\n            params.amount0,\n            params.amount1,\n            abi.encode(\n                FlashCallbackData({\n                    amount0: params.amount0,\n                    amount1: params.amount1,\n                    payer: msg.sender,\n                    poolKey: poolKey,\n                    poolFee2: params.fee2,\n                    poolFee3: params.fee3\n                })\n            )\n        );\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/external/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Interface for verifying contract-based account signatures\n/// @notice Interface that verifies provided signature for the data\n/// @dev Interface defined by EIP-1271\ninterface IERC1271 {\n    /// @notice Returns whether the provided signature is valid for the provided data\n    /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\n    /// MUST allow external calls.\n    /// @param hash Hash of the data to be signed\n    /// @param signature Signature byte array associated with _data\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/external/IERC20PermitAllowed.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Interface for permit\n/// @notice Interface used by DAI/CHAI for permit\ninterface IERC20PermitAllowed {\n    /// @notice Approve the spender to spend some tokens via the holder signature\n    /// @dev This is the permit interface used by DAI and CHAI\n    /// @param holder The address of the token holder, the token owner\n    /// @param spender The address of the token spender\n    /// @param nonce The holder's nonce, increases at each call to permit\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/external/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title IERC20Metadata\n/// @title Interface for ERC20 Metadata\n/// @notice Extension to IERC20 that includes token metadata\ninterface IERC20Metadata is IERC20 {\n    /// @return The name of the token\n    function name() external view returns (string memory);\n\n    /// @return The symbol of the token\n    function symbol() external view returns (string memory);\n\n    /// @return The number of decimal places the token has\n    function decimals() external view returns (uint8);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/INonfungibleTokenPositionDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './INonfungiblePositionManager.sol';\n\n/// @title Describes position NFT tokens via URI\ninterface INonfungibleTokenPositionDescriptor {\n    /// @notice Produces the URI describing a particular token ID for a position manager\n    /// @dev Note this URI may be a data: URI with the JSON contents directly inlined\n    /// @param positionManager The position manager for which to describe the token\n    /// @param tokenId The ID of the token for which to produce a description, which may not be valid\n    /// @return The URI of the ERC721-compliant metadata\n    function tokenURI(INonfungiblePositionManager positionManager, uint256 tokenId)\n        external\n        view\n        returns (string memory);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `receiver`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH(address receiver) external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IPeripheryPaymentsWithFee.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport './IPeripheryPayments.sol';\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IQuoterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title QuoterV2 Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoterV2 {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        external\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        external\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/ISelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\ninterface ISelfPermit {\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport {IUniswapV3SwapCallback} from '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\nimport {IPeripheryImmutableState} from \"./IPeripheryImmutableState.sol\";\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback, IPeripheryImmutableState {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/ITickLens.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Tick Lens\n/// @notice Provides functions for fetching chunks of tick data for a pool\n/// @dev This avoids the waterfall of fetching the tick bitmap, parsing the bitmap to know which ticks to fetch, and\n/// then sending additional multicalls to fetch the tick data\ninterface ITickLens {\n    struct PopulatedTick {\n        int24 tick;\n        int128 liquidityNet;\n        uint128 liquidityGross;\n    }\n\n    /// @notice Get all the tick data for the populated ticks from a word of the tick bitmap of a pool\n    /// @param pool The address of the pool for which to fetch populated tick data\n    /// @param tickBitmapIndex The index of the word in the tick bitmap for which to parse the bitmap and\n    /// fetch all the populated ticks\n    /// @return populatedTicks An array of tick data for the given word in the tick bitmap\n    function getPopulatedTicksInWord(address pool, int16 tickBitmapIndex)\n        external\n        view\n        returns (PopulatedTick[] memory populatedTicks);\n}\n"
    },
    "src/uniswap/v3-periphery/interfaces/IV3Migrator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport './IMulticall.sol';\nimport './ISelfPermit.sol';\nimport './IPoolInitializer.sol';\n\n/// @title V3 Migrator\n/// @notice Enables migration of liqudity from Uniswap v2-compatible pairs into Uniswap v3 pools\ninterface IV3Migrator is IMulticall, ISelfPermit, IPoolInitializer {\n    struct MigrateParams {\n        address pair; // the Uniswap v2-compatible pair\n        uint256 liquidityToMigrate; // expected to be balanceOf(msg.sender)\n        uint8 percentageToMigrate; // represented as a numerator over 100\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Min; // must be discounted by percentageToMigrate\n        uint256 amount1Min; // must be discounted by percentageToMigrate\n        address recipient;\n        uint256 deadline;\n        bool refundAsETH;\n    }\n\n    /// @notice Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3\n    /// @dev Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of\n    /// the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an\n    /// out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range\n    /// @param params The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata\n    function migrate(MigrateParams calldata params) external;\n}\n"
    },
    "src/uniswap/v3-periphery/lens/Quoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\nimport '../interfaces/IQuoter.sol';\nimport '../base/PeripheryImmutableState.sol';\nimport '../libraries/Path.sol';\nimport '../libraries/PoolAddress.sol';\nimport '../libraries/CallbackValidation.sol';\n\n/// @title Provides quotes for swaps\n/// @notice Allows getting the expected amount out or amount in for a given swap without executing the swap\n/// @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute\n/// the swap and check the amounts in the callback.\ncontract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {\n    using Path for bytes;\n    using SafeCast for uint256;\n\n    /// @dev Transient storage variable used to check a safety condition in exact output swaps.\n    uint256 private amountOutCached;\n\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\n\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    /// @inheritdoc IUniswapV3SwapCallback\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes memory path\n    ) external view override {\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n        (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\n\n        (bool isExactInput, uint256 amountToPay, uint256 amountReceived) = amount0Delta > 0\n            ? (tokenIn < tokenOut, uint256(amount0Delta), uint256(-amount1Delta))\n            : (tokenOut < tokenIn, uint256(amount1Delta), uint256(-amount0Delta));\n        if (isExactInput) {\n            assembly {\n                let ptr := mload(0x40)\n                mstore(ptr, amountReceived)\n                revert(ptr, 32)\n            }\n        } else {\n            // if the cache has been populated, ensure that the full output amount has been received\n            if (amountOutCached != 0) require(amountReceived == amountOutCached);\n            assembly {\n                let ptr := mload(0x40)\n                mstore(ptr, amountToPay)\n                revert(ptr, 32)\n            }\n        }\n    }\n\n    /// @dev Parses a revert reason that should contain the numeric quote\n    function parseRevertReason(bytes memory reason) private pure returns (uint256) {\n        if (reason.length != 32) {\n            if (reason.length < 68) revert('Unexpected error');\n            assembly {\n                reason := add(reason, 0x04)\n            }\n            revert(abi.decode(reason, (string)));\n        }\n        return abi.decode(reason, (uint256));\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) public override returns (uint256 amountOut) {\n        bool zeroForOne = tokenIn < tokenOut;\n\n        try\n            getPool(tokenIn, tokenOut, fee).swap(\n                address(this), // address(0) might cause issues with some tokens\n                zeroForOne,\n                amountIn.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encodePacked(tokenIn, fee, tokenOut)\n            )\n        {} catch (bytes memory reason) {\n            return parseRevertReason(reason);\n        }\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactInput(bytes memory path, uint256 amountIn) external override returns (uint256 amountOut) {\n        while (true) {\n            bool hasMultiplePools = path.hasMultiplePools();\n\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            amountIn = quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0);\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                path = path.skipToken();\n            } else {\n                return amountIn;\n            }\n        }\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) public override returns (uint256 amountIn) {\n        bool zeroForOne = tokenIn < tokenOut;\n\n        // if no price limit has been specified, cache the output amount for comparison in the swap callback\n        if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut;\n        try\n            getPool(tokenIn, tokenOut, fee).swap(\n                address(this), // address(0) might cause issues with some tokens\n                zeroForOne,\n                -amountOut.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encodePacked(tokenOut, fee, tokenIn)\n            )\n        {} catch (bytes memory reason) {\n            if (sqrtPriceLimitX96 == 0) delete amountOutCached; // clear cache\n            return parseRevertReason(reason);\n        }\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {\n        while (true) {\n            bool hasMultiplePools = path.hasMultiplePools();\n\n            (address tokenOut, address tokenIn, uint24 fee) = path.decodeFirstPool();\n\n            // the inputs of prior swaps become the outputs of subsequent ones\n            amountOut = quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0);\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                path = path.skipToken();\n            } else {\n                return amountOut;\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/lens/QuoterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickBitmap.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\nimport '../interfaces/IQuoterV2.sol';\nimport '../base/PeripheryImmutableState.sol';\nimport '../libraries/Path.sol';\nimport '../libraries/PoolAddress.sol';\nimport '../libraries/CallbackValidation.sol';\nimport '../libraries/PoolTicksCounter.sol';\n\n/// @title Provides quotes for swaps\n/// @notice Allows getting the expected amount out or amount in for a given swap without executing the swap\n/// @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute\n/// the swap and check the amounts in the callback.\ncontract QuoterV2 is IQuoterV2, IUniswapV3SwapCallback, PeripheryImmutableState {\n    using Path for bytes;\n    using SafeCast for uint256;\n    using PoolTicksCounter for IUniswapV3Pool;\n\n    /// @dev Transient storage variable used to check a safety condition in exact output swaps.\n    uint256 private amountOutCached;\n\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\n\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    /// @inheritdoc IUniswapV3SwapCallback\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes memory path\n    ) external view override {\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n        (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\n\n        (bool isExactInput, uint256 amountToPay, uint256 amountReceived) = amount0Delta > 0\n            ? (tokenIn < tokenOut, uint256(amount0Delta), uint256(-amount1Delta))\n            : (tokenOut < tokenIn, uint256(amount1Delta), uint256(-amount0Delta));\n\n        IUniswapV3Pool pool = getPool(tokenIn, tokenOut, fee);\n        (uint160 sqrtPriceX96After, int24 tickAfter, , , , , ) = pool.slot0();\n\n        if (isExactInput) {\n            assembly {\n                let ptr := mload(0x40)\n                mstore(ptr, amountReceived)\n                mstore(add(ptr, 0x20), sqrtPriceX96After)\n                mstore(add(ptr, 0x40), tickAfter)\n                revert(ptr, 96)\n            }\n        } else {\n            // if the cache has been populated, ensure that the full output amount has been received\n            if (amountOutCached != 0) require(amountReceived == amountOutCached);\n            assembly {\n                let ptr := mload(0x40)\n                mstore(ptr, amountToPay)\n                mstore(add(ptr, 0x20), sqrtPriceX96After)\n                mstore(add(ptr, 0x40), tickAfter)\n                revert(ptr, 96)\n            }\n        }\n    }\n\n    /// @dev Parses a revert reason that should contain the numeric quote\n    function parseRevertReason(bytes memory reason)\n        private\n        pure\n        returns (\n            uint256 amount,\n            uint160 sqrtPriceX96After,\n            int24 tickAfter\n        )\n    {\n        if (reason.length != 96) {\n            if (reason.length < 68) revert('Unexpected error');\n            assembly {\n                reason := add(reason, 0x04)\n            }\n            revert(abi.decode(reason, (string)));\n        }\n        return abi.decode(reason, (uint256, uint160, int24));\n    }\n\n    function handleRevert(\n        bytes memory reason,\n        IUniswapV3Pool pool,\n        uint256 gasEstimate\n    )\n        private\n        view\n        returns (\n            uint256 amount,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256\n        )\n    {\n        int24 tickBefore;\n        int24 tickAfter;\n        (, tickBefore, , , , , ) = pool.slot0();\n        (amount, sqrtPriceX96After, tickAfter) = parseRevertReason(reason);\n\n        initializedTicksCrossed = pool.countInitializedTicksCrossed(tickBefore, tickAfter);\n\n        return (amount, sqrtPriceX96After, initializedTicksCrossed, gasEstimate);\n    }\n\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        public\n        override\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        )\n    {\n        bool zeroForOne = params.tokenIn < params.tokenOut;\n        IUniswapV3Pool pool = getPool(params.tokenIn, params.tokenOut, params.fee);\n\n        uint256 gasBefore = gasleft();\n        try\n            pool.swap(\n                address(this), // address(0) might cause issues with some tokens\n                zeroForOne,\n                params.amountIn.toInt256(),\n                params.sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : params.sqrtPriceLimitX96,\n                abi.encodePacked(params.tokenIn, params.fee, params.tokenOut)\n            )\n        {} catch (bytes memory reason) {\n            gasEstimate = gasBefore - gasleft();\n            return handleRevert(reason, pool, gasEstimate);\n        }\n    }\n\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        public\n        override\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        )\n    {\n        sqrtPriceX96AfterList = new uint160[](path.numPools());\n        initializedTicksCrossedList = new uint32[](path.numPools());\n\n        uint256 i = 0;\n        while (true) {\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            (\n                uint256 _amountOut,\n                uint160 _sqrtPriceX96After,\n                uint32 _initializedTicksCrossed,\n                uint256 _gasEstimate\n            ) = quoteExactInputSingle(\n                    QuoteExactInputSingleParams({\n                        tokenIn: tokenIn,\n                        tokenOut: tokenOut,\n                        fee: fee,\n                        amountIn: amountIn,\n                        sqrtPriceLimitX96: 0\n                    })\n                );\n\n            sqrtPriceX96AfterList[i] = _sqrtPriceX96After;\n            initializedTicksCrossedList[i] = _initializedTicksCrossed;\n            amountIn = _amountOut;\n            gasEstimate += _gasEstimate;\n            i++;\n\n            // decide whether to continue or terminate\n            if (path.hasMultiplePools()) {\n                path = path.skipToken();\n            } else {\n                return (amountIn, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate);\n            }\n        }\n    }\n\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        public\n        override\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        )\n    {\n        bool zeroForOne = params.tokenIn < params.tokenOut;\n        IUniswapV3Pool pool = getPool(params.tokenIn, params.tokenOut, params.fee);\n\n        // if no price limit has been specified, cache the output amount for comparison in the swap callback\n        if (params.sqrtPriceLimitX96 == 0) amountOutCached = params.amount;\n        uint256 gasBefore = gasleft();\n        try\n            pool.swap(\n                address(this), // address(0) might cause issues with some tokens\n                zeroForOne,\n                -params.amount.toInt256(),\n                params.sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : params.sqrtPriceLimitX96,\n                abi.encodePacked(params.tokenOut, params.fee, params.tokenIn)\n            )\n        {} catch (bytes memory reason) {\n            gasEstimate = gasBefore - gasleft();\n            if (params.sqrtPriceLimitX96 == 0) delete amountOutCached; // clear cache\n            return handleRevert(reason, pool, gasEstimate);\n        }\n    }\n\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        public\n        override\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        )\n    {\n        sqrtPriceX96AfterList = new uint160[](path.numPools());\n        initializedTicksCrossedList = new uint32[](path.numPools());\n\n        uint256 i = 0;\n        while (true) {\n            (address tokenOut, address tokenIn, uint24 fee) = path.decodeFirstPool();\n\n            // the inputs of prior swaps become the outputs of subsequent ones\n            (\n                uint256 _amountIn,\n                uint160 _sqrtPriceX96After,\n                uint32 _initializedTicksCrossed,\n                uint256 _gasEstimate\n            ) = quoteExactOutputSingle(\n                    QuoteExactOutputSingleParams({\n                        tokenIn: tokenIn,\n                        tokenOut: tokenOut,\n                        amount: amountOut,\n                        fee: fee,\n                        sqrtPriceLimitX96: 0\n                    })\n                );\n\n            sqrtPriceX96AfterList[i] = _sqrtPriceX96After;\n            initializedTicksCrossedList[i] = _initializedTicksCrossed;\n            amountOut = _amountIn;\n            gasEstimate += _gasEstimate;\n            i++;\n\n            // decide whether to continue or terminate\n            if (path.hasMultiplePools()) {\n                path = path.skipToken();\n            } else {\n                return (amountOut, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate);\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/lens/TickLens.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport '../interfaces/ITickLens.sol';\n\n/// @title Tick Lens contract\ncontract TickLens is ITickLens {\n    /// @inheritdoc ITickLens\n    function getPopulatedTicksInWord(address pool, int16 tickBitmapIndex)\n        public\n        view\n        override\n        returns (PopulatedTick[] memory populatedTicks)\n    {\n        // fetch bitmap\n        uint256 bitmap = IUniswapV3Pool(pool).tickBitmap(tickBitmapIndex);\n        unchecked {\n            // calculate the number of populated ticks\n            uint256 numberOfPopulatedTicks;\n            for (uint256 i = 0; i < 256; i++) {\n                if (bitmap & (1 << i) > 0) numberOfPopulatedTicks++;\n            }\n\n            // fetch populated tick data\n            int24 tickSpacing = IUniswapV3Pool(pool).tickSpacing();\n            populatedTicks = new PopulatedTick[](numberOfPopulatedTicks);\n            for (uint256 i = 0; i < 256; i++) {\n                if (bitmap & (1 << i) > 0) {\n                    int24 populatedTick = ((int24(tickBitmapIndex) << 8) + int24(uint24(i))) * tickSpacing;\n                    (uint128 liquidityGross, int128 liquidityNet, , , , , , ) = IUniswapV3Pool(pool).ticks(\n                        populatedTick\n                    );\n                    populatedTicks[--numberOfPopulatedTicks] = PopulatedTick({\n                        tick: populatedTick,\n                        liquidityNet: liquidityNet,\n                        liquidityGross: liquidityGross\n                    });\n                }\n            }\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/lens/UniswapInterfaceMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.15;\npragma abicoder v2;\n\n/// @notice A fork of Multicall2 specifically tailored for the Uniswap Interface\ncontract UniswapInterfaceMulticall {\n    struct Call {\n        address target;\n        uint256 gasLimit;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        uint256 gasUsed;\n        bytes returnData;\n    }\n\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function multicall(Call[] memory calls) public returns (uint256 blockNumber, Result[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new Result[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (address target, uint256 gasLimit, bytes memory callData) = (\n                calls[i].target,\n                calls[i].gasLimit,\n                calls[i].callData\n            );\n            uint256 gasLeftBefore = gasleft();\n            (bool success, bytes memory ret) = target.call{gas: gasLimit}(callData);\n            uint256 gasUsed = gasLeftBefore - gasleft();\n            returnData[i] = Result(success, gasUsed, ret);\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/AddressStringUtil.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// from https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/AddressStringUtil.sol\n// modified for solidity 0.8\n\npragma solidity >=0.8.0;\n\nlibrary AddressStringUtil {\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\n    function toAsciiString(address addr, uint256 len) internal pure returns (string memory) {\n        require(len % 2 == 0 && len > 0 && len <= 40, 'AddressStringUtil: INVALID_LEN');\n\n        bytes memory s = new bytes(len);\n        uint256 addrNum = uint256(uint160(addr));\n        for (uint256 i = 0; i < len / 2; i++) {\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\n            // first hex character is the most significant 4 bits\n            uint8 hi = b >> 4;\n            // second hex character is the least significant 4 bits\n            uint8 lo = b - (hi << 4);\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    // hi and lo are only 4 bits and between 0 and 16\n    // this method converts those values to the unicode/ascii code point for the hex representation\n    // uses upper case for the characters\n    function char(uint8 b) private pure returns (bytes1 c) {\n        if (b < 10) {\n            return bytes1(b + 0x30);\n        } else {\n            return bytes1(b + 0x37);\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}"
    },
    "src/uniswap/v3-periphery/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/CallbackValidation.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport './PoolAddress.sol';\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The V3 pool contract address\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n    }\n\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param poolKey The identifying key of the V3 pool\n    /// @return pool The V3 pool contract address\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\n        internal\n        view\n        returns (IUniswapV3Pool pool)\n    {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        require(msg.sender == address(pool));\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/ChainId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Function for getting the current chain ID\nlibrary ChainId {\n    /// @dev Gets the current chain ID\n    /// @return chainId The current chain ID\n    function get() internal view returns (uint256 chainId) {\n        assembly {\n            chainId := chainid()\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/HexStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary HexStrings {\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\n\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = '0';\n        buffer[1] = 'x';\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, 'Strings: hex length insufficient');\n        return string(buffer);\n    }\n\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length);\n        for (uint256 i = buffer.length; i > 0; i--) {\n            buffer[i - 1] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        unchecked {\n            return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n        }\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        unchecked {\n            return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n        }\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            return\n                FullMath.mulDiv(\n                    uint256(liquidity) << FixedPoint96.RESOLUTION,\n                    sqrtRatioBX96 - sqrtRatioAX96,\n                    sqrtRatioBX96\n                ) / sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        unchecked {\n            return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n        }\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.9.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\n    {\n        require(secondsAgo != 0, 'BP');\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) = IUniswapV3Pool(pool)\n            .observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[1] -\n            secondsPerLiquidityCumulativeX128s[0];\n\n        arithmeticMeanTick = int24(tickCumulativesDelta / int56(uint56(secondsAgo)));\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(secondsAgo)) != 0)) arithmeticMeanTick--;\n\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n        harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\n    }\n\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick Tick value used to calculate the quote\n    /// @param baseAmount Amount of token to be converted\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n    /// @param pool Address of Uniswap V3 pool that we want to observe\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\n    function getOldestObservationSecondsAgo(address pool) internal view returns (uint32 secondsAgo) {\n        (, , uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n        require(observationCardinality > 0, 'NI');\n\n        (uint32 observationTimestamp, , , bool initialized) = IUniswapV3Pool(pool).observations(\n            (observationIndex + 1) % observationCardinality\n        );\n\n        // The next index might not be initialized if the cardinality is in the process of increasing\n        // In this case the oldest observation is always in index 0\n        if (!initialized) {\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\n        }\n\n        unchecked {\n            secondsAgo = uint32(block.timestamp) - observationTimestamp;\n        }\n    }\n\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\n    /// @param pool Address of Uniswap V3 pool\n    /// @return The tick that the pool was in at the start of the current block\n    function getBlockStartingTickAndLiquidity(address pool) internal view returns (int24, uint128) {\n        (, int24 tick, uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n\n        // 2 observations are needed to reliably calculate the block starting tick\n        require(observationCardinality > 1, 'NEO');\n\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\n        (\n            uint32 observationTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n\n        ) = IUniswapV3Pool(pool).observations(observationIndex);\n        if (observationTimestamp != uint32(block.timestamp)) {\n            return (tick, IUniswapV3Pool(pool).liquidity());\n        }\n\n        uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\n        (\n            uint32 prevObservationTimestamp,\n            int56 prevTickCumulative,\n            uint160 prevSecondsPerLiquidityCumulativeX128,\n            bool prevInitialized\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\n\n        require(prevInitialized, 'ONI');\n\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\n        tick = int24((tickCumulative - int56(uint56(prevTickCumulative))) / int56(uint56(delta)));\n        uint128 liquidity = uint128(\n            (uint192(delta) * type(uint160).max) /\n                (uint192(secondsPerLiquidityCumulativeX128 - prevSecondsPerLiquidityCumulativeX128) << 32)\n        );\n        return (tick, liquidity);\n    }\n\n    /// @notice Information for calculating a weighted arithmetic mean tick\n    struct WeightedTickData {\n        int24 tick;\n        uint128 weight;\n    }\n\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n    /// @param weightedTickData An array of ticks and weights\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\n    function getWeightedArithmeticMeanTick(WeightedTickData[] memory weightedTickData)\n        internal\n        pure\n        returns (int24 weightedArithmeticMeanTick)\n    {\n        // Accumulates the sum of products between each tick and its weight\n        int256 numerator;\n\n        // Accumulates the sum of the weights\n        uint256 denominator;\n\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\n        for (uint256 i; i < weightedTickData.length; i++) {\n            numerator += weightedTickData[i].tick * int256(uint256(weightedTickData[i].weight));\n            denominator += weightedTickData[i].weight;\n        }\n\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\n        // Always round to negative infinity\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedArithmeticMeanTick--;\n    }\n\n    /// @notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n    /// @dev Useful for calculating relative prices along routes.\n    /// @dev There must be one tick for each pairwise set of tokens.\n    /// @param tokens The token contract addresses\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks)\n        internal\n        pure\n        returns (int256 syntheticTick)\n    {\n        require(tokens.length - 1 == ticks.length, 'DL');\n        for (uint256 i = 1; i <= ticks.length; i++) {\n            // check the tokens for address sort order, then accumulate the\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \"cancel out\"\n            tokens[i - 1] < tokens[i] ? syntheticTick += ticks[i - 1] : syntheticTick -= ticks[i - 1];\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/Path.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {Create2Upgradeable} from \"@openzeppelin-upgradeable/contracts/utils/Create2Upgradeable.sol\";\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    // NOTE: Ensure this value is latest & corresponds to current Create2BeaconProxy code\n    // keccak256(type(Create2BeaconProxy).creationCode);\n    bytes32 internal constant BEACON_CODE_HASH =\n        0x25e3ec08b5481ab6736bacbc1babb737902563de379be5263db365452e048cc1;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(\n        address factory,\n        PoolKey memory key\n    ) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = Create2Upgradeable.computeAddress(\n            keccak256(abi.encode(key.token0, key.token1, key.fee)),\n            BEACON_CODE_HASH,\n            factory\n        );\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/PoolTicksCounter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nlibrary PoolTicksCounter {\n    /// @dev This function counts the number of initialized ticks that would incur a gas cost between tickBefore and tickAfter.\n    /// When tickBefore and/or tickAfter themselves are initialized, the logic over whether we should count them depends on the\n    /// direction of the swap. If we are swapping upwards (tickAfter > tickBefore) we don't want to count tickBefore but we do\n    /// want to count tickAfter. The opposite is true if we are swapping downwards.\n    function countInitializedTicksCrossed(\n        IUniswapV3Pool self,\n        int24 tickBefore,\n        int24 tickAfter\n    ) internal view returns (uint32 initializedTicksCrossed) {\n        int16 wordPosLower;\n        int16 wordPosHigher;\n        uint8 bitPosLower;\n        uint8 bitPosHigher;\n        bool tickBeforeInitialized;\n        bool tickAfterInitialized;\n\n        {\n            // Get the key and offset in the tick bitmap of the active tick before and after the swap.\n            int16 wordPos = int16((tickBefore / self.tickSpacing()) >> 8);\n            uint8 bitPos = uint8(int8((tickBefore / self.tickSpacing()) % 256));\n\n            int16 wordPosAfter = int16((tickAfter / self.tickSpacing()) >> 8);\n            uint8 bitPosAfter = uint8(int8((tickAfter / self.tickSpacing()) % 256));\n\n            // In the case where tickAfter is initialized, we only want to count it if we are swapping downwards.\n            // If the initializable tick after the swap is initialized, our original tickAfter is a\n            // multiple of tick spacing, and we are swapping downwards we know that tickAfter is initialized\n            // and we shouldn't count it.\n            tickAfterInitialized =\n                ((self.tickBitmap(wordPosAfter) & (1 << bitPosAfter)) > 0) &&\n                ((tickAfter % self.tickSpacing()) == 0) &&\n                (tickBefore > tickAfter);\n\n            // In the case where tickBefore is initialized, we only want to count it if we are swapping upwards.\n            // Use the same logic as above to decide whether we should count tickBefore or not.\n            tickBeforeInitialized =\n                ((self.tickBitmap(wordPos) & (1 << bitPos)) > 0) &&\n                ((tickBefore % self.tickSpacing()) == 0) &&\n                (tickBefore < tickAfter);\n\n            if (wordPos < wordPosAfter || (wordPos == wordPosAfter && bitPos <= bitPosAfter)) {\n                wordPosLower = wordPos;\n                bitPosLower = bitPos;\n                wordPosHigher = wordPosAfter;\n                bitPosHigher = bitPosAfter;\n            } else {\n                wordPosLower = wordPosAfter;\n                bitPosLower = bitPosAfter;\n                wordPosHigher = wordPos;\n                bitPosHigher = bitPos;\n            }\n        }\n\n        // Count the number of initialized ticks crossed by iterating through the tick bitmap.\n        // Our first mask should include the lower tick and everything to its left.\n        uint256 mask = type(uint256).max << bitPosLower;\n        while (wordPosLower <= wordPosHigher) {\n            // If we're on the final tick bitmap page, ensure we only count up to our\n            // ending tick.\n            if (wordPosLower == wordPosHigher) {\n                mask = mask & (type(uint256).max >> (255 - bitPosHigher));\n            }\n\n            uint256 masked = self.tickBitmap(wordPosLower) & mask;\n            initializedTicksCrossed += countOneBits(masked);\n            wordPosLower++;\n            // Reset our mask so we consider all bits on the next iteration.\n            mask = type(uint256).max;\n        }\n\n        if (tickAfterInitialized) {\n            initializedTicksCrossed -= 1;\n        }\n\n        if (tickBeforeInitialized) {\n            initializedTicksCrossed -= 1;\n        }\n\n        return initializedTicksCrossed;\n    }\n\n    function countOneBits(uint256 x) private pure returns (uint16) {\n        uint16 bits = 0;\n        while (x != 0) {\n            bits++;\n            x &= (x - 1);\n        }\n        return bits;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/PositionKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nlibrary PositionKey {\n    /// @dev Returns the key of the position in the core library\n    function compute(\n        address owner,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/PositionValue.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.8 <0.9.0;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/Tick.sol';\nimport '../interfaces/INonfungiblePositionManager.sol';\nimport './LiquidityAmounts.sol';\nimport './PoolAddress.sol';\nimport './PositionKey.sol';\n\n/// @title Returns information about the token value held in a Uniswap V3 NFT\nlibrary PositionValue {\n    /// @notice Returns the total amounts of token0 and token1, i.e. the sum of fees and principal\n    /// that a given nonfungible position manager token is worth\n    /// @param positionManager The Uniswap V3 NonfungiblePositionManager\n    /// @param tokenId The tokenId of the token for which to get the total value\n    /// @param sqrtRatioX96 The square root price X96 for which to calculate the principal amounts\n    /// @return amount0 The total amount of token0 including principal and fees\n    /// @return amount1 The total amount of token1 including principal and fees\n    function total(\n        INonfungiblePositionManager positionManager,\n        uint256 tokenId,\n        uint160 sqrtRatioX96\n    ) internal view returns (uint256 amount0, uint256 amount1) {\n        (uint256 amount0Principal, uint256 amount1Principal) = principal(positionManager, tokenId, sqrtRatioX96);\n        (uint256 amount0Fee, uint256 amount1Fee) = fees(positionManager, tokenId);\n        return (amount0Principal + amount0Fee, amount1Principal + amount1Fee);\n    }\n\n    /// @notice Calculates the principal (currently acting as liquidity) owed to the token owner in the event\n    /// that the position is burned\n    /// @param positionManager The Uniswap V3 NonfungiblePositionManager\n    /// @param tokenId The tokenId of the token for which to get the total principal owed\n    /// @param sqrtRatioX96 The square root price X96 for which to calculate the principal amounts\n    /// @return amount0 The principal amount of token0\n    /// @return amount1 The principal amount of token1\n    function principal(\n        INonfungiblePositionManager positionManager,\n        uint256 tokenId,\n        uint160 sqrtRatioX96\n    ) internal view returns (uint256 amount0, uint256 amount1) {\n        (, , , , , int24 tickLower, int24 tickUpper, uint128 liquidity, , , , ) = positionManager.positions(tokenId);\n\n        return\n            LiquidityAmounts.getAmountsForLiquidity(\n                sqrtRatioX96,\n                TickMath.getSqrtRatioAtTick(tickLower),\n                TickMath.getSqrtRatioAtTick(tickUpper),\n                liquidity\n            );\n    }\n\n    struct FeeParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint128 liquidity;\n        uint256 positionFeeGrowthInside0LastX128;\n        uint256 positionFeeGrowthInside1LastX128;\n        uint256 tokensOwed0;\n        uint256 tokensOwed1;\n    }\n\n    /// @notice Calculates the total fees owed to the token owner\n    /// @param positionManager The Uniswap V3 NonfungiblePositionManager\n    /// @param tokenId The tokenId of the token for which to get the total fees owed\n    /// @return amount0 The amount of fees owed in token0\n    /// @return amount1 The amount of fees owed in token1\n    function fees(INonfungiblePositionManager positionManager, uint256 tokenId)\n        internal\n        view\n        returns (uint256 amount0, uint256 amount1)\n    {\n        (\n            ,\n            ,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 positionFeeGrowthInside0LastX128,\n            uint256 positionFeeGrowthInside1LastX128,\n            uint256 tokensOwed0,\n            uint256 tokensOwed1\n        ) = positionManager.positions(tokenId);\n\n        return\n            _fees(\n                positionManager,\n                FeeParams({\n                    token0: token0,\n                    token1: token1,\n                    fee: fee,\n                    tickLower: tickLower,\n                    tickUpper: tickUpper,\n                    liquidity: liquidity,\n                    positionFeeGrowthInside0LastX128: positionFeeGrowthInside0LastX128,\n                    positionFeeGrowthInside1LastX128: positionFeeGrowthInside1LastX128,\n                    tokensOwed0: tokensOwed0,\n                    tokensOwed1: tokensOwed1\n                })\n            );\n    }\n\n    function _fees(INonfungiblePositionManager positionManager, FeeParams memory feeParams)\n        private\n        view\n        returns (uint256 amount0, uint256 amount1)\n    {\n        (uint256 poolFeeGrowthInside0LastX128, uint256 poolFeeGrowthInside1LastX128) = _getFeeGrowthInside(\n            IUniswapV3Pool(\n                PoolAddress.computeAddress(\n                    positionManager.factory(),\n                    PoolAddress.PoolKey({token0: feeParams.token0, token1: feeParams.token1, fee: feeParams.fee})\n                )\n            ),\n            feeParams.tickLower,\n            feeParams.tickUpper\n        );\n\n        amount0 =\n            FullMath.mulDiv(\n                poolFeeGrowthInside0LastX128 - feeParams.positionFeeGrowthInside0LastX128,\n                feeParams.liquidity,\n                FixedPoint128.Q128\n            ) +\n            feeParams.tokensOwed0;\n\n        amount1 =\n            FullMath.mulDiv(\n                poolFeeGrowthInside1LastX128 - feeParams.positionFeeGrowthInside1LastX128,\n                feeParams.liquidity,\n                FixedPoint128.Q128\n            ) +\n            feeParams.tokensOwed1;\n    }\n\n    function _getFeeGrowthInside(\n        IUniswapV3Pool pool,\n        int24 tickLower,\n        int24 tickUpper\n    ) private view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        (, int24 tickCurrent, , , , , ) = pool.slot0();\n        (, , uint256 lowerFeeGrowthOutside0X128, uint256 lowerFeeGrowthOutside1X128, , , , ) = pool.ticks(tickLower);\n        (, , uint256 upperFeeGrowthOutside0X128, uint256 upperFeeGrowthOutside1X128, , , , ) = pool.ticks(tickUpper);\n\n        if (tickCurrent < tickLower) {\n            feeGrowthInside0X128 = lowerFeeGrowthOutside0X128 - upperFeeGrowthOutside0X128;\n            feeGrowthInside1X128 = lowerFeeGrowthOutside1X128 - upperFeeGrowthOutside1X128;\n        } else if (tickCurrent < tickUpper) {\n            uint256 feeGrowthGlobal0X128 = pool.feeGrowthGlobal0X128();\n            uint256 feeGrowthGlobal1X128 = pool.feeGrowthGlobal1X128();\n            feeGrowthInside0X128 = feeGrowthGlobal0X128 - lowerFeeGrowthOutside0X128 - upperFeeGrowthOutside0X128;\n            feeGrowthInside1X128 = feeGrowthGlobal1X128 - lowerFeeGrowthOutside1X128 - upperFeeGrowthOutside1X128;\n        } else {\n            feeGrowthInside0X128 = upperFeeGrowthOutside0X128 - lowerFeeGrowthOutside0X128;\n            feeGrowthInside1X128 = upperFeeGrowthOutside1X128 - lowerFeeGrowthOutside1X128;\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/SafeERC20Namer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// from https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/SafeERC20Namer.sol\n// modified for solidity 0.8\n\npragma solidity >=0.8.0;\n\nimport './AddressStringUtil.sol';\n\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\n// this library will always produce a string symbol to represent the token\nlibrary SafeERC20Namer {\n    function bytes32ToString(bytes32 x) private pure returns (string memory) {\n        bytes memory bytesString = new bytes(32);\n        uint256 charCount = 0;\n        for (uint256 j = 0; j < 32; j++) {\n            bytes1 char = x[j];\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (uint256 j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n\n    // assumes the data is in position 2\n    function parseStringData(bytes memory b) private pure returns (string memory) {\n        uint256 charCount = 0;\n        // first parse the charCount out of the data\n        for (uint256 i = 32; i < 64; i++) {\n            charCount <<= 8;\n            charCount += uint8(b[i]);\n        }\n\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (uint256 i = 0; i < charCount; i++) {\n            bytesStringTrimmed[i] = b[i + 64];\n        }\n\n        return string(bytesStringTrimmed);\n    }\n\n    // uses a heuristic to produce a token name from the address\n    // the heuristic returns the full hex of the address string in upper case\n    function addressToName(address token) private pure returns (string memory) {\n        return AddressStringUtil.toAsciiString(token, 40);\n    }\n\n    // uses a heuristic to produce a token symbol from the address\n    // the heuristic returns the first 6 hex of the address string in upper case\n    function addressToSymbol(address token) private pure returns (string memory) {\n        return AddressStringUtil.toAsciiString(token, 6);\n    }\n\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\n    function callAndParseStringReturn(address token, bytes4 selector) private view returns (string memory) {\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\n        // if not implemented, or returns empty data, return empty string\n        if (!success || data.length == 0) {\n            return '';\n        }\n        // bytes32 data always has length 32\n        if (data.length == 32) {\n            bytes32 decoded = abi.decode(data, (bytes32));\n            return bytes32ToString(decoded);\n        } else if (data.length > 64) {\n            return abi.decode(data, (string));\n        }\n        return '';\n    }\n\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\n    function tokenSymbol(address token) internal view returns (string memory) {\n        // 0x95d89b41 = bytes4(keccak256(\"symbol()\"))\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\n        if (bytes(symbol).length == 0) {\n            // fallback to 6 uppercase hex of address\n            return addressToSymbol(token);\n        }\n        return symbol;\n    }\n\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\n    function tokenName(address token) internal view returns (string memory) {\n        // 0x06fdde03 = bytes4(keccak256(\"name()\"))\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\n        if (bytes(name).length == 0) {\n            // fallback to full hex of address\n            return addressToName(token);\n        }\n        return name;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/SqrtPriceMathPartial.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/UnsafeMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Exposes two functions from @uniswap/v3-core SqrtPriceMath\n/// that use square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMathPartial {\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return\n            roundUp\n                ? UnsafeMath.divRoundingUp(\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                    sqrtRatioAX96\n                )\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            roundUp\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/TokenRatioSortOrder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary TokenRatioSortOrder {\n    int256 constant NUMERATOR_MOST = 300;\n    int256 constant NUMERATOR_MORE = 200;\n    int256 constant NUMERATOR = 100;\n\n    int256 constant DENOMINATOR_MOST = -300;\n    int256 constant DENOMINATOR_MORE = -200;\n    int256 constant DENOMINATOR = -100;\n}\n"
    },
    "src/uniswap/v3-periphery/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/SwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport './interfaces/ISwapRouter.sol';\nimport './base/PeripheryImmutableState.sol';\nimport './base/PeripheryValidation.sol';\nimport './base/PeripheryPaymentsWithFee.sol';\nimport './base/Multicall.sol';\nimport './base/SelfPermit.sol';\nimport './libraries/Path.sol';\nimport './libraries/PoolAddress.sol';\nimport './libraries/CallbackValidation.sol';\nimport './interfaces/external/IWETH9.sol';\n\n/// @title Uniswap V3 Swap Router\n/// @notice Router for stateless execution of swaps against Uniswap V3\ncontract SwapRouter is\n    ISwapRouter,\n    PeripheryImmutableState,\n    PeripheryValidation,\n    PeripheryPaymentsWithFee,\n    Multicall,\n    SelfPermit\n{\n    using Path for bytes;\n    using SafeCast for uint256;\n\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\n    /// can never actually be this value\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\n\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\n\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    struct SwapCallbackData {\n        bytes path;\n        address payer;\n    }\n\n    /// @inheritdoc IUniswapV3SwapCallback\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata _data\n    ) external override {\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\n\n        (bool isExactInput, uint256 amountToPay) = amount0Delta > 0\n            ? (tokenIn < tokenOut, uint256(amount0Delta))\n            : (tokenOut < tokenIn, uint256(amount1Delta));\n        if (isExactInput) {\n            pay(tokenIn, data.payer, msg.sender, amountToPay);\n        } else {\n            // either initiate the next swap or pay\n            if (data.path.hasMultiplePools()) {\n                data.path = data.path.skipToken();\n                exactOutputInternal(amountToPay, msg.sender, 0, data);\n            } else {\n                amountInCached = amountToPay;\n                tokenIn = tokenOut; // swap in/out because exact output swaps are reversed\n                pay(tokenIn, data.payer, msg.sender, amountToPay);\n            }\n        }\n    }\n\n    /// @dev Performs a single exact input swap\n    function exactInputInternal(\n        uint256 amountIn,\n        address recipient,\n        uint160 sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256 amountOut) {\n        // allow swapping to the router address with address 0\n        if (recipient == address(0)) recipient = address(this);\n\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n\n        bool zeroForOne = tokenIn < tokenOut;\n\n        (int256 amount0, int256 amount1) = getPool(tokenIn, tokenOut, fee).swap(\n            recipient,\n            zeroForOne,\n            amountIn.toInt256(),\n            sqrtPriceLimitX96 == 0\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                : sqrtPriceLimitX96,\n            abi.encode(data)\n        );\n\n        return uint256(-(zeroForOne ? amount1 : amount0));\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountOut)\n    {\n        amountOut = exactInputInternal(\n            params.amountIn,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender})\n        );\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountOut)\n    {\n        address payer = msg.sender; // msg.sender pays for the first hop\n\n        while (true) {\n            bool hasMultiplePools = params.path.hasMultiplePools();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            params.amountIn = exactInputInternal(\n                params.amountIn,\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\n                0,\n                SwapCallbackData({\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\n                    payer: payer\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                payer = address(this); // at this point, the caller has paid\n                params.path = params.path.skipToken();\n            } else {\n                amountOut = params.amountIn;\n                break;\n            }\n        }\n\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @dev Performs a single exact output swap\n    function exactOutputInternal(\n        uint256 amountOut,\n        address recipient,\n        uint160 sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256 amountIn) {\n        // allow swapping to the router address with address 0\n        if (recipient == address(0)) recipient = address(this);\n\n        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\n\n        bool zeroForOne = tokenIn < tokenOut;\n\n        (int256 amount0Delta, int256 amount1Delta) = getPool(tokenIn, tokenOut, fee).swap(\n            recipient,\n            zeroForOne,\n            -amountOut.toInt256(),\n            sqrtPriceLimitX96 == 0\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                : sqrtPriceLimitX96,\n            abi.encode(data)\n        );\n\n        uint256 amountOutReceived;\n        (amountIn, amountOutReceived) = zeroForOne\n            ? (uint256(amount0Delta), uint256(-amount1Delta))\n            : (uint256(amount1Delta), uint256(-amount0Delta));\n        // it's technically possible to not receive the full output amount,\n        // so if no price limit has been specified, require this possibility away\n        if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountIn)\n    {\n        // avoid an SLOAD by using the swap return data\n        amountIn = exactOutputInternal(\n            params.amountOut,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender})\n        );\n\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\n        // has to be reset even though we don't use it in the single hop case\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactOutput(ExactOutputParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountIn)\n    {\n        // it's okay that the payer is fixed to msg.sender here, as they're only paying for the \"final\" exact output\n        // swap, which happens first, and subsequent swaps are paid for within nested callback frames\n        exactOutputInternal(\n            params.amountOut,\n            params.recipient,\n            0,\n            SwapCallbackData({path: params.path, payer: msg.sender})\n        );\n\n        amountIn = amountInCached;\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/Base64Test.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport 'base64-sol/base64.sol';\n\ncontract Base64Test {\n    function encode(bytes memory data) external pure returns (string memory) {\n        return Base64.encode(data);\n    }\n\n    function getGasCostOfEncode(bytes memory data) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        Base64.encode(data);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/LiquidityAmountsTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '../libraries/LiquidityAmounts.sol';\n\ncontract LiquidityAmountsTest {\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) external pure returns (uint128 liquidity) {\n        return LiquidityAmounts.getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n    }\n\n    function getGasCostOfGetLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        LiquidityAmounts.getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        return gasBefore - gasleft();\n    }\n\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) external pure returns (uint128 liquidity) {\n        return LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n    }\n\n    function getGasCostOfGetLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        return gasBefore - gasleft();\n    }\n\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) external pure returns (uint128 liquidity) {\n        return LiquidityAmounts.getLiquidityForAmounts(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, amount0, amount1);\n    }\n\n    function getGasCostOfGetLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        LiquidityAmounts.getLiquidityForAmounts(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, amount0, amount1);\n        return gasBefore - gasleft();\n    }\n\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) external pure returns (uint256 amount0) {\n        return LiquidityAmounts.getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    }\n\n    function getGasCostOfGetAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        LiquidityAmounts.getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        return gasBefore - gasleft();\n    }\n\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) external pure returns (uint256 amount1) {\n        return LiquidityAmounts.getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    }\n\n    function getGasCostOfGetAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        return gasBefore - gasleft();\n    }\n\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) external pure returns (uint256 amount0, uint256 amount1) {\n        return LiquidityAmounts.getAmountsForLiquidity(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    }\n\n    function getGasCostOfGetAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        LiquidityAmounts.getAmountsForLiquidity(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/MockObservable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\ncontract MockObservable {\n    Observation private observation0;\n    Observation private observation1;\n\n    struct Observation {\n        uint32 secondsAgo;\n        int56 tickCumulatives;\n        uint160 secondsPerLiquidityCumulativeX128s;\n    }\n\n    constructor(\n        uint32[] memory secondsAgos,\n        int56[] memory tickCumulatives,\n        uint160[] memory secondsPerLiquidityCumulativeX128s\n    ) {\n        require(\n            secondsAgos.length == 2 && tickCumulatives.length == 2 && secondsPerLiquidityCumulativeX128s.length == 2,\n            'Invalid test case size'\n        );\n\n        observation0 = Observation(secondsAgos[0], tickCumulatives[0], secondsPerLiquidityCumulativeX128s[0]);\n        observation1 = Observation(secondsAgos[1], tickCumulatives[1], secondsPerLiquidityCumulativeX128s[1]);\n    }\n\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\n    {\n        require(\n            secondsAgos[0] == observation0.secondsAgo && secondsAgos[1] == observation1.secondsAgo,\n            'Invalid test case'\n        );\n\n        int56[] memory _tickCumulatives = new int56[](2);\n        _tickCumulatives[0] = observation0.tickCumulatives;\n        _tickCumulatives[1] = observation1.tickCumulatives;\n\n        uint160[] memory _secondsPerLiquidityCumulativeX128s = new uint160[](2);\n        _secondsPerLiquidityCumulativeX128s[0] = observation0.secondsPerLiquidityCumulativeX128s;\n        _secondsPerLiquidityCumulativeX128s[1] = observation1.secondsPerLiquidityCumulativeX128s;\n\n        return (_tickCumulatives, _secondsPerLiquidityCumulativeX128s);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/MockObservations.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '@uniswap/v3-core/contracts/libraries/Oracle.sol';\n\ncontract MockObservations {\n    Oracle.Observation[4] internal oracleObservations;\n\n    int24 slot0Tick;\n    uint16 internal slot0ObservationCardinality;\n    uint16 internal slot0ObservationIndex;\n    uint128 public liquidity;\n\n    bool internal lastObservationCurrentTimestamp;\n\n    constructor(\n        uint32[4] memory _blockTimestamps,\n        int56[4] memory _tickCumulatives,\n        uint128[4] memory _secondsPerLiquidityCumulativeX128s,\n        bool[4] memory _initializeds,\n        int24 _tick,\n        uint16 _observationCardinality,\n        uint16 _observationIndex,\n        bool _lastObservationCurrentTimestamp,\n        uint128 _liquidity\n    ) {\n        for (uint256 i = 0; i < _blockTimestamps.length; i++) {\n            oracleObservations[i] = Oracle.Observation({\n                blockTimestamp: _blockTimestamps[i],\n                tickCumulative: _tickCumulatives[i],\n                secondsPerLiquidityCumulativeX128: _secondsPerLiquidityCumulativeX128s[i],\n                initialized: _initializeds[i]\n            });\n        }\n\n        slot0Tick = _tick;\n        slot0ObservationCardinality = _observationCardinality;\n        slot0ObservationIndex = _observationIndex;\n        lastObservationCurrentTimestamp = _lastObservationCurrentTimestamp;\n        liquidity = _liquidity;\n    }\n\n    function slot0()\n        external\n        view\n        returns (\n            uint160,\n            int24,\n            uint16,\n            uint16,\n            uint16,\n            uint8,\n            bool\n        )\n    {\n        return (0, slot0Tick, slot0ObservationIndex, slot0ObservationCardinality, 0, 0, false);\n    }\n\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32,\n            int56,\n            uint160,\n            bool\n        )\n    {\n        Oracle.Observation memory observation = oracleObservations[index];\n        if (lastObservationCurrentTimestamp) {\n            observation.blockTimestamp =\n                uint32(block.timestamp) -\n                (oracleObservations[slot0ObservationIndex].blockTimestamp - observation.blockTimestamp);\n        }\n        return (\n            observation.blockTimestamp,\n            observation.tickCumulative,\n            observation.secondsPerLiquidityCumulativeX128,\n            observation.initialized\n        );\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/MockTimeSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '../SwapRouter.sol';\n\ncontract MockTimeSwapRouter is SwapRouter {\n    uint256 time;\n\n    constructor(address _factory, address _WETH9) SwapRouter(_factory, _WETH9) {}\n\n    function _blockTimestamp() internal view override returns (uint256) {\n        return time;\n    }\n\n    function setTime(uint256 _time) external {\n        time = _time;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/NonfungiblePositionManagerPositionsGasTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '../interfaces/INonfungiblePositionManager.sol';\n\ncontract NonfungiblePositionManagerPositionsGasTest {\n    INonfungiblePositionManager immutable nonfungiblePositionManager;\n\n    constructor(INonfungiblePositionManager _nonfungiblePositionManager) {\n        nonfungiblePositionManager = _nonfungiblePositionManager;\n    }\n\n    function getGasCostOfPositions(uint256 tokenId) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        nonfungiblePositionManager.positions(tokenId);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/OracleTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '../libraries/OracleLibrary.sol';\n\ncontract OracleTest {\n    function consult(address pool, uint32 secondsAgo)\n        public\n        view\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\n    {\n        return OracleLibrary.consult(pool, secondsAgo);\n    }\n\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) public pure returns (uint256 quoteAmount) {\n        quoteAmount = OracleLibrary.getQuoteAtTick(tick, baseAmount, baseToken, quoteToken);\n    }\n\n    // For gas snapshot test\n    function getGasCostOfConsult(address pool, uint32 period) public view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        OracleLibrary.consult(pool, period);\n        return gasBefore - gasleft();\n    }\n\n    function getGasCostOfGetQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) public view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        OracleLibrary.getQuoteAtTick(tick, baseAmount, baseToken, quoteToken);\n        return gasBefore - gasleft();\n    }\n\n    function getOldestObservationSecondsAgo(address pool)\n        public\n        view\n        returns (uint32 secondsAgo, uint32 currentTimestamp)\n    {\n        secondsAgo = OracleLibrary.getOldestObservationSecondsAgo(pool);\n        currentTimestamp = uint32(block.timestamp);\n    }\n\n    function getBlockStartingTickAndLiquidity(address pool) public view returns (int24, uint128) {\n        return OracleLibrary.getBlockStartingTickAndLiquidity(pool);\n    }\n\n    function getWeightedArithmeticMeanTick(OracleLibrary.WeightedTickData[] memory observations)\n        public\n        pure\n        returns (int24 arithmeticMeanWeightedTick)\n    {\n        return OracleLibrary.getWeightedArithmeticMeanTick(observations);\n    }\n\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks) public pure returns (int256 syntheticTick) {\n        return OracleLibrary.getChainedPrice(tokens, ticks);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/PathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '../libraries/Path.sol';\n\ncontract PathTest {\n    function hasMultiplePools(bytes memory path) public pure returns (bool) {\n        return Path.hasMultiplePools(path);\n    }\n\n    function decodeFirstPool(bytes memory path)\n        public\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        return Path.decodeFirstPool(path);\n    }\n\n    function getFirstPool(bytes memory path) public pure returns (bytes memory) {\n        return Path.getFirstPool(path);\n    }\n\n    function skipToken(bytes memory path) public pure returns (bytes memory) {\n        return Path.skipToken(path);\n    }\n\n    // gas funcs\n    function getGasCostOfDecodeFirstPool(bytes memory path) public view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        Path.decodeFirstPool(path);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/PeripheryImmutableStateTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport '../base/PeripheryImmutableState.sol';\n\ncontract PeripheryImmutableStateTest is PeripheryImmutableState {\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\n}\n"
    },
    "src/uniswap/v3-periphery/test/PoolAddressTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport \"../libraries/PoolAddress.sol\";\n\ncontract PoolAddressTest {\n    function BEACON_CODE_HASH() external pure returns (bytes32) {\n        return PoolAddress.BEACON_CODE_HASH;\n    }\n\n    function computeAddress(\n        address factory,\n        address token0,\n        address token1,\n        uint24 fee\n    ) external pure returns (address) {\n        return\n            PoolAddress.computeAddress(\n                factory,\n                PoolAddress.PoolKey({token0: token0, token1: token1, fee: fee})\n            );\n    }\n\n    function getGasCostOfComputeAddress(\n        address factory,\n        address token0,\n        address token1,\n        uint24 fee\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        PoolAddress.computeAddress(\n            factory,\n            PoolAddress.PoolKey({token0: token0, token1: token1, fee: fee})\n        );\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/PoolTicksCounterTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\npragma solidity >=0.6.0;\n\nimport '../libraries/PoolTicksCounter.sol';\n\ncontract PoolTicksCounterTest {\n    using PoolTicksCounter for IUniswapV3Pool;\n\n    function countInitializedTicksCrossed(\n        IUniswapV3Pool pool,\n        int24 tickBefore,\n        int24 tickAfter\n    ) external view returns (uint32 initializedTicksCrossed) {\n        return pool.countInitializedTicksCrossed(tickBefore, tickAfter);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/PositionValueTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '../libraries/PositionValue.sol';\nimport '../interfaces/INonfungiblePositionManager.sol';\n\ncontract PositionValueTest {\n    function total(\n        INonfungiblePositionManager nft,\n        uint256 tokenId,\n        uint160 sqrtRatioX96\n    ) external view returns (uint256 amount0, uint256 amount1) {\n        return PositionValue.total(nft, tokenId, sqrtRatioX96);\n    }\n\n    function principal(\n        INonfungiblePositionManager nft,\n        uint256 tokenId,\n        uint160 sqrtRatioX96\n    ) external view returns (uint256 amount0, uint256 amount1) {\n        return PositionValue.principal(nft, tokenId, sqrtRatioX96);\n    }\n\n    function fees(INonfungiblePositionManager nft, uint256 tokenId)\n        external\n        view\n        returns (uint256 amount0, uint256 amount1)\n    {\n        return PositionValue.fees(nft, tokenId);\n    }\n\n    function totalGas(\n        INonfungiblePositionManager nft,\n        uint256 tokenId,\n        uint160 sqrtRatioX96\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        PositionValue.total(nft, tokenId, sqrtRatioX96);\n        return gasBefore - gasleft();\n    }\n\n    function principalGas(\n        INonfungiblePositionManager nft,\n        uint256 tokenId,\n        uint160 sqrtRatioX96\n    ) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        PositionValue.principal(nft, tokenId, sqrtRatioX96);\n        return gasBefore - gasleft();\n    }\n\n    function feesGas(INonfungiblePositionManager nft, uint256 tokenId) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        PositionValue.fees(nft, tokenId);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/SelfPermitTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '../base/SelfPermit.sol';\n\n/// @dev Same as SelfPermit but not abstract\ncontract SelfPermitTest is SelfPermit {\n\n}\n"
    },
    "src/uniswap/v3-periphery/test/TestCallbackValidation.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '../libraries/CallbackValidation.sol';\n\ncontract TestCallbackValidation {\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (IUniswapV3Pool pool) {\n        return CallbackValidation.verifyCallback(factory, tokenA, tokenB, fee);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\n\ncontract TestERC20 is ERC20Permit {\n    constructor(uint256 amountToMint) ERC20('Test ERC20', 'TEST') ERC20Permit('Test ERC20') {\n        _mint(msg.sender, amountToMint);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/TestERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\n\ncontract TestERC20Metadata is ERC20Permit {\n    constructor(\n        uint256 amountToMint,\n        string memory name,\n        string memory symbol\n    ) ERC20(name, symbol) ERC20Permit(name) {\n        _mint(msg.sender, amountToMint);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/TestERC20PermitAllowed.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport './TestERC20.sol';\nimport '../interfaces/external/IERC20PermitAllowed.sol';\n\n// has a fake permit that just uses the other signature type for type(uint256).max\ncontract TestERC20PermitAllowed is TestERC20, IERC20PermitAllowed {\n    constructor(uint256 amountToMint) TestERC20(amountToMint) {}\n\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(this.nonces(holder) == nonce, 'TestERC20PermitAllowed::permit: wrong nonce');\n        permit(holder, spender, allowed ? type(uint256).max : 0, expiry, v, r, s);\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/TestMulticall.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '../base/Multicall.sol';\n\ncontract TestMulticall is Multicall {\n    function functionThatRevertsWithError(string memory error) external pure {\n        revert(error);\n    }\n\n    struct Tuple {\n        uint256 a;\n        uint256 b;\n    }\n\n    function functionThatReturnsTuple(uint256 a, uint256 b) external pure returns (Tuple memory tuple) {\n        tuple = Tuple({b: a, a: b});\n    }\n\n    uint256 public paid;\n\n    function pays() external payable {\n        paid += msg.value;\n    }\n\n    function returnSender() external view returns (address) {\n        return msg.sender;\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/TestPositionNFTOwner.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '../interfaces/external/IERC1271.sol';\n\ncontract TestPositionNFTOwner is IERC1271 {\n    address public owner;\n\n    function setOwner(address _owner) external {\n        owner = _owner;\n    }\n\n    function isValidSignature(bytes32 hash, bytes memory signature) external view override returns (bytes4 magicValue) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n        if (ecrecover(hash, v, r, s) == owner) {\n            return bytes4(0x1626ba7e);\n        } else {\n            return bytes4(0);\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/TestUniswapV3Callee.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.15;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ncontract TestUniswapV3Callee is IUniswapV3SwapCallback {\n    using SafeCast for uint256;\n\n    function swapExact0For1(\n        address pool,\n        uint256 amount0In,\n        address recipient,\n        uint160 sqrtPriceLimitX96\n    ) external {\n        IUniswapV3Pool(pool).swap(recipient, true, amount0In.toInt256(), sqrtPriceLimitX96, abi.encode(msg.sender));\n    }\n\n    function swap0ForExact1(\n        address pool,\n        uint256 amount1Out,\n        address recipient,\n        uint160 sqrtPriceLimitX96\n    ) external {\n        IUniswapV3Pool(pool).swap(recipient, true, -amount1Out.toInt256(), sqrtPriceLimitX96, abi.encode(msg.sender));\n    }\n\n    function swapExact1For0(\n        address pool,\n        uint256 amount1In,\n        address recipient,\n        uint160 sqrtPriceLimitX96\n    ) external {\n        IUniswapV3Pool(pool).swap(recipient, false, amount1In.toInt256(), sqrtPriceLimitX96, abi.encode(msg.sender));\n    }\n\n    function swap1ForExact0(\n        address pool,\n        uint256 amount0Out,\n        address recipient,\n        uint160 sqrtPriceLimitX96\n    ) external {\n        IUniswapV3Pool(pool).swap(recipient, false, -amount0Out.toInt256(), sqrtPriceLimitX96, abi.encode(msg.sender));\n    }\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external override {\n        address sender = abi.decode(data, (address));\n\n        if (amount0Delta > 0) {\n            IERC20(IUniswapV3Pool(msg.sender).token0()).transferFrom(sender, msg.sender, uint256(amount0Delta));\n        } else {\n            assert(amount1Delta > 0);\n            IERC20(IUniswapV3Pool(msg.sender).token1()).transferFrom(sender, msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/test/TickLensTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '../lens/TickLens.sol';\n\n/// @title Tick Lens contract\ncontract TickLensTest is TickLens {\n    function getGasCostOfGetPopulatedTicksInWord(address pool, int16 tickBitmapIndex) external view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        getPopulatedTicksInWord(pool, tickBitmapIndex);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "src/uniswap/v3-periphery/V3Migrator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\npragma abicoder v2;\n\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n\nimport './interfaces/INonfungiblePositionManager.sol';\n\nimport './libraries/TransferHelper.sol';\n\nimport './interfaces/IV3Migrator.sol';\nimport './base/PeripheryImmutableState.sol';\nimport './base/Multicall.sol';\nimport './base/SelfPermit.sol';\nimport './interfaces/external/IWETH9.sol';\nimport './base/PoolInitializer.sol';\n\n/// @title Uniswap V3 Migrator\ncontract V3Migrator is IV3Migrator, PeripheryImmutableState, PoolInitializer, Multicall, SelfPermit {\n    address public immutable nonfungiblePositionManager;\n\n    constructor(\n        address _factory,\n        address _WETH9,\n        address _nonfungiblePositionManager\n    ) PeripheryImmutableState(_factory, _WETH9) {\n        nonfungiblePositionManager = _nonfungiblePositionManager;\n    }\n\n    receive() external payable {\n        require(msg.sender == WETH9, 'Not WETH9');\n    }\n\n    function migrate(MigrateParams calldata params) external override {\n        require(params.percentageToMigrate > 0, 'Percentage too small');\n        require(params.percentageToMigrate <= 100, 'Percentage too large');\n\n        // burn v2 liquidity to this address\n        IUniswapV2Pair(params.pair).transferFrom(msg.sender, params.pair, params.liquidityToMigrate);\n        (uint256 amount0V2, uint256 amount1V2) = IUniswapV2Pair(params.pair).burn(address(this));\n\n        // calculate the amounts to migrate to v3\n        uint256 amount0V2ToMigrate = (amount0V2 * params.percentageToMigrate) / 100;\n        uint256 amount1V2ToMigrate = (amount1V2 * params.percentageToMigrate) / 100;\n\n        // approve the position manager up to the maximum token amounts\n        TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, amount0V2ToMigrate);\n        TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, amount1V2ToMigrate);\n\n        // mint v3 position\n        (, , uint256 amount0V3, uint256 amount1V3) = INonfungiblePositionManager(nonfungiblePositionManager).mint(\n            INonfungiblePositionManager.MintParams({\n                token0: params.token0,\n                token1: params.token1,\n                fee: params.fee,\n                tickLower: params.tickLower,\n                tickUpper: params.tickUpper,\n                amount0Desired: amount0V2ToMigrate,\n                amount1Desired: amount1V2ToMigrate,\n                amount0Min: params.amount0Min,\n                amount1Min: params.amount1Min,\n                recipient: params.recipient,\n                deadline: params.deadline\n            })\n        );\n\n        // if necessary, clear allowance and refund dust\n        if (amount0V3 < amount0V2) {\n            if (amount0V3 < amount0V2ToMigrate) {\n                TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, 0);\n            }\n\n            uint256 refund0 = amount0V2 - amount0V3;\n            if (params.refundAsETH && params.token0 == WETH9) {\n                IWETH9(WETH9).withdraw(refund0);\n                TransferHelper.safeTransferETH(msg.sender, refund0);\n            } else {\n                TransferHelper.safeTransfer(params.token0, msg.sender, refund0);\n            }\n        }\n        if (amount1V3 < amount1V2) {\n            if (amount1V3 < amount1V2ToMigrate) {\n                TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, 0);\n            }\n\n            uint256 refund1 = amount1V2 - amount1V3;\n            if (params.refundAsETH && params.token1 == WETH9) {\n                IWETH9(WETH9).withdraw(refund1);\n                TransferHelper.safeTransferETH(msg.sender, refund1);\n            } else {\n                TransferHelper.safeTransfer(params.token1, msg.sender, refund1);\n            }\n        }\n    }\n}\n"
    },
    "src/util/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin-upgradeable/contracts/access/OwnableUpgradeable.sol\";\n\ncontract PausableUpgradeable is OwnableUpgradeable {\n    function __Pausable_init() internal onlyInitializing {\n        __Ownable_init();\n    }\n\n    event SetPaused(uint256 lockId, bool paused);\n    event SetIsGuardian(address addr, bool isGuardian);\n\n    mapping(address => bool) public isGuardian;\n    mapping(uint256 => bool) public isPaused;\n\n    // 0 : createVault\n    // 1 : mint\n    // 2 : redeem\n    // 3 : swap\n    // 4 : flashloan\n\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\n        require(!isPaused[lockId] || msg.sender == owner(), \"Paused\");\n    }\n\n    function unpause(uint256 lockId) public virtual onlyOwner {\n        isPaused[lockId] = false;\n        emit SetPaused(lockId, false);\n    }\n\n    function pause(uint256 lockId) public virtual {\n        require(isGuardian[msg.sender], \"Can't pause\");\n        isPaused[lockId] = true;\n        emit SetPaused(lockId, true);\n    }\n\n    function setIsGuardian(\n        address addr,\n        bool _isGuardian\n    ) public virtual onlyOwner {\n        isGuardian[addr] = _isGuardian;\n        emit SetIsGuardian(addr, _isGuardian);\n    }\n}\n"
    },
    "src/v2/eligibility/NFTXEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"../interface/INFTXEligibility.sol\";\n\n// This is a contract meant to be inherited and overriden to implement eligibility modules. \nabstract contract NFTXEligibility is INFTXEligibility, Initializable {\n  function name() public pure override virtual returns (string memory);\n  function finalized() public view override virtual returns (bool);\n  function targetAsset() public pure override virtual returns (address);\n  \n  function __NFTXEligibility_init_bytes(bytes memory initData) public override virtual;\n\n  function checkIsEligible(uint256 tokenId) external view override virtual returns (bool) {\n      return _checkIfEligible(tokenId);\n  }\n\n  function checkEligible(uint256[] calldata tokenIds) external override virtual view returns (bool[] memory) {\n      uint256 length = tokenIds.length;\n      bool[] memory eligibile = new bool[](length);\n      for (uint256 i; i < length; i++) {\n          eligibile[i] = _checkIfEligible(tokenIds[i]);\n      }\n      return eligibile;\n  }\n\n  function checkAllEligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\n      uint256 length = tokenIds.length;\n      for (uint256 i; i < length; i++) {\n          // If any are not eligible, end the loop and return false.\n          if (!_checkIfEligible(tokenIds[i])) {\n              return false;\n          }\n      }\n      return true;\n  }\n\n  // Checks if all provided NFTs are NOT eligible. This is needed for mint requesting where all NFTs \n  // provided must be ineligible.\n  function checkAllIneligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\n      uint256 length = tokenIds.length;\n      for (uint256 i; i < length; i++) {\n          // If any are eligible, end the loop and return false.\n          if (_checkIfEligible(tokenIds[i])) {\n              return false;\n          }\n      }\n      return true;\n  }\n\n  function beforeMintHook(uint256[] calldata tokenIds) external override virtual {}\n  function afterMintHook(uint256[] calldata tokenIds) external override virtual {}\n  function beforeRedeemHook(uint256[] calldata tokenIds) external override virtual {}\n  function afterRedeemHook(uint256[] calldata tokenIds) external override virtual {}\n\n  // Override this to implement your module!\n  function _checkIfEligible(uint256 _tokenId) internal view virtual returns (bool);\n}\n"
    },
    "src/v2/eligibility/NFTXENSMerkleEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./NFTXMerkleEligibility.sol\";\n\n\nabstract contract ENS {\n    function nameExpires(uint256 id) public virtual view returns (uint256);\n}\n\n\n/**\n * @title NFTX ENS Merkle Eligibility\n * @author Twade\n * \n * @notice Allows vaults to be allow eligibility based ENS domains, allowing for minimum\n * expiration times to be set.\n */\n\ncontract NFTXENSMerkleEligibility is NFTXMerkleEligibility {\n\n    /// @notice Minimum expiration time for ENS domains in seconds\n    uint public minExpirationTime;\n\n\n    /**\n     * @notice The name of our Eligibility Module.\n     *\n     * @return string\n     */\n\n    function name() public pure override virtual returns (string memory) {    \n        return 'ENSMerkleEligibility';\n    }\n\n\n    /**\n     * @notice The address of our token asset contract.\n     *\n     * @return address \n     */\n\n   function targetAsset() public pure override virtual returns (address) {\n        return 0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85;\n    }\n\n\n    /**\n     * @notice Allow our eligibility module to be initialised with optional\n     * config data.\n     * \n     * @param configData Encoded config data\n     */\n\n    function __NFTXEligibility_init_bytes(bytes memory configData) public override virtual initializer {\n        (\n            bytes32 _merkleRoot,\n            string memory _merkleReference,\n            string memory _merkleLeavesURI,\n            uint _minExpirationTime\n        ) = abi.decode(configData, (bytes32, string, string, uint));\n\n        __NFTXEligibility_init(_merkleRoot, _merkleReference, _merkleLeavesURI, _minExpirationTime);\n    }\n\n\n    /**\n     * @notice Parameters here should mirror the config struct.\n     * \n     * @param _merkleRoot The root of our merkle tree\n     * @param _merkleReference Public name of the merkle eligibility implementation\n     * @param _merkleLeavesURI API endpoint providing unencoded JSON array\n     * @param _minExpirationTime Minimum number of seconds until ENS expiration\n     */\n\n    function __NFTXEligibility_init(\n        bytes32 _merkleRoot,\n        string memory _merkleReference,\n        string memory _merkleLeavesURI,\n        uint _minExpirationTime\n    ) public initializer {\n        super.__NFTXEligibility_init(_merkleRoot, _merkleReference, _merkleLeavesURI);\n\n        minExpirationTime = _minExpirationTime;\n    }\n\n\n    /**\n     * @notice Checks if a supplied token is eligible; in addition to our core merkle\n     * eligibility checks we also need to confirm that the ENS domain won't expire within\n     * a year.\n     * \n     * @dev This check requires the token to have already been passed to `processToken`.\n     *\n     * @return bool If the tokenId is eligible\n     */\n\n    function _checkIfEligible(uint tokenId) internal view override virtual returns (bool) {\n    \t// Get the expiry time of the token ID provided and ensure it has at least\n    \t// 365 days left until it expires.\n    \tif (block.timestamp + minExpirationTime > ENS(targetAsset()).nameExpires(tokenId)) {\n    \t\treturn false;\n    \t}\n\n    \treturn super._checkIfEligible(tokenId);\n    }\n\n}\n"
    },
    "src/v2/eligibility/NFTXGen0KittyEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./NFTXEligibility.sol\";\n\ninterface KittyCore {\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function getKitty(uint256 _id)\n        external\n        view\n        returns (\n            bool,\n            bool,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256 _generation,\n            uint256\n        );\n}\n\ncontract NFTXGen0KittyEligibility is NFTXEligibility {\n    function name() public pure override virtual returns (string memory) {\n        return \"Gen0Kitty\";\n    }\n\n    function finalized() public view override virtual returns (bool) {\n        return true;\n    }\n\n    function targetAsset() public pure override virtual returns (address) {\n        return 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    }\n\n    event NFTXEligibilityInit();\n\n    function __NFTXEligibility_init_bytes(\n        bytes memory /* configData */\n    ) public override virtual initializer {\n        __NFTXEligibility_init();\n    }\n\n    // Parameters here should mirror the config struct.\n    function __NFTXEligibility_init() public initializer {\n        emit NFTXEligibilityInit();\n    }\n\n    function _checkIfEligible(uint256 _tokenId)\n        internal\n        view\n        override\n        virtual\n        returns (bool)\n    {\n        (, , , , , , , , uint256 _generation, ) = KittyCore(targetAsset())\n            .getKitty(_tokenId);\n        return _generation == 0;\n    }\n}\n"
    },
    "src/v2/eligibility/NFTXListEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./UniqueEligibility.sol\";\nimport \"./NFTXEligibility.sol\";\n\ncontract NFTXListEligibility is NFTXEligibility, UniqueEligibility {\n    function name() public pure override virtual returns (string memory) {    \n        return \"List\";\n    }\n\n    function finalized() public view override virtual returns (bool) {    \n        return true;\n    }\n\n    function targetAsset() public pure override virtual returns (address) {\n        return address(0);\n    }\n\n    struct Config {\n        uint256[] tokenIds;\n    }\n\n    event NFTXEligibilityInit(uint256[] tokenIds);\n\n    function __NFTXEligibility_init_bytes(\n        bytes memory _configData\n    ) public override virtual initializer {\n        (uint256[] memory _ids) = abi.decode(_configData, (uint256[]));\n        __NFTXEligibility_init(_ids);\n    }\n\n    function __NFTXEligibility_init(\n        uint256[] memory tokenIds\n    ) public initializer {\n        _setUniqueEligibilities(tokenIds, true);\n        emit NFTXEligibilityInit(tokenIds);\n    }\n\n    function _checkIfEligible(\n        uint256 _tokenId\n    ) internal view override virtual returns (bool) {\n        return isUniqueEligible(_tokenId);\n    }\n}\n"
    },
    "src/v2/eligibility/NFTXMerkleEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./NFTXEligibility.sol\";\n\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\n\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n        for (uint i = 0; i < proof.length;) {\n            computedHash = _hashPair(computedHash, proof[i]);\n            unchecked { i++; }\n        }\n        return computedHash == root;\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n\n\n/**\n * @title NFTX Merkle Eligibility\n * @author Twade\n * \n * @notice Allows vaults to be allow eligibility based on a predefined merkle tree.\n */\n\nabstract contract NFTXMerkleEligibility is NFTXEligibility {\n\n    /// @notice Emitted when our NFTX Eligibility is deployed\n    event NFTXEligibilityInit(bytes32 merkleRoot, string _merkleReference, string _merkleLeavesURI);\n\n    /// @notice Emitted when a project validity check is started\n    event PrecursoryCheckStarted(uint tokenId, bytes32 requestId);\n\n    /// @notice Emitted when a project validity check has been completed\n    event PrecursoryCheckComplete(uint tokenId, bytes32 requestId, bool isValid);\n\n    /// @notice Internal storage of valid and processed tokens\n    mapping(bytes32 => bool) public validTokenHashes;\n    mapping(bytes32 => mapping(bytes32 => bool)) private _processedTokenHashes;\n\n    /// @notice Merkle proof to validate all eligible domains against\n    bytes32 public merkleRoot;\n\n    /// @notice Merkle reference for any required frontend differentiation\n    string public merkleReference;\n\n    /// @notice URI to JSON list of unencoded token IDs\n    string public merkleLeavesURI;\n\n\n    /**\n     * @notice The name of our Eligibility Module.\n     *\n     * @return string\n     */\n\n    function name() public pure override virtual returns (string memory) {}\n\n\n    /**\n     * @notice Confirms that our module has been finalised and won't change.\n     *\n     * @return bool\n     */\n\n    function finalized() public view override virtual returns (bool) {    \n        return true;\n    }\n\n\n    /**\n     * @notice The address of our token asset contract.\n     *\n     * @return address \n     */\n\n   function targetAsset() public pure override virtual returns (address) {}\n\n\n    /**\n     * @notice Allow our eligibility module to be initialised with optional\n     * config data.\n     * \n     * @param configData Encoded config data\n     */\n\n    function __NFTXEligibility_init_bytes(bytes memory configData) public override virtual initializer {\n        (\n            bytes32 _merkleRoot,\n            string memory _merkleReference,\n            string memory _merkleLeavesURI\n        ) = abi.decode(configData, (bytes32, string, string));\n\n        __NFTXEligibility_init(_merkleRoot, _merkleReference, _merkleLeavesURI);\n    }\n\n\n    /**\n     * @notice Parameters here should mirror the config struct.\n     * \n     * @param _merkleRoot The root of our merkle tree\n     */\n\n    function __NFTXEligibility_init(bytes32 _merkleRoot, string memory _merkleReference, string memory _merkleLeavesURI) public initializer {\n        merkleRoot = _merkleRoot;\n        merkleReference = _merkleReference;\n        merkleLeavesURI = _merkleLeavesURI;\n\n        emit NFTXEligibilityInit(_merkleRoot, _merkleReference, _merkleLeavesURI);\n    }\n\n\n    /**\n     * @notice Checks if a supplied token is eligible, which is defined by our merkle\n     * tree root assigned at initialisation.\n     * \n     * @dev This check requires the token to have already been passed to `processToken`.\n     *\n     * @return bool If the tokenId is eligible\n     */\n\n    function _checkIfEligible(uint tokenId) internal view override virtual returns (bool) {\n        return validTokenHashes[_hashTokenId(tokenId)];\n    }\n\n\n    /**\n     * @notice Checks if the token requires a precursory validation before it can have\n     * it's eligibility determined.\n     * \n     * @dev If this returns `true`, `processToken` should subsequently be run before\n     * checking the eligibility of the token.\n     * \n     * @param tokenId The ENS domain token ID\n     *\n     * @return bool If the tokenId requires precursory validation\n     */\n\n    function requiresProcessing(uint tokenId, bytes32[] calldata merkleProof) public view returns (bool) {\n        // Check if we have a confirmed processing log\n        return !_processedTokenHashes[_hashTokenId(tokenId)][_hashMerkleProof(merkleProof)];\n    }\n\n\n    /**\n     * @notice This will run a number of precursory checks by encoding the token ID,\n     * creating the token hash, and then checking this against our merkle tree.\n     *\n     * @param tokenIds The ENS token IDs being validated\n     * @param merkleProofs Merkle proofs to validate against the corresponding tokenId\n     *\n     * @return bool[] If the token at the corresponding index is valid\n     */\n\n    function processTokens(uint[] calldata tokenIds, bytes32[][] calldata merkleProofs) public returns (bool[] memory) {\n        // Iterate over our process tokens\n        uint numberOfTokens = tokenIds.length;\n        bool[] memory isValid = new bool[](numberOfTokens);\n\n        // Loop through and process our tokens\n        for (uint i; i < numberOfTokens;) {\n            isValid[i] = processToken(tokenIds[i], merkleProofs[i]);\n            unchecked { ++i; }\n        }\n\n        return isValid;\n    }\n\n\n    /**\n     * @notice This will run a precursory check by encoding the token ID, creating the\n     * token hash, and then checking this against our merkle tree.\n     *\n     * @param tokenId The ENS token ID being validated\n     * @param merkleProof Merkle proof to validate against the tokenId\n     *\n     * @return isValid If the token is valid\n     */\n\n    function processToken(uint tokenId, bytes32[] calldata merkleProof) public returns (bool isValid) {\n        // If the token has already been processed, just return the validity\n        if (!requiresProcessing(tokenId, merkleProof)) {\n            return _checkIfEligible(tokenId);\n        }\n\n    \t// Get the hashed equivalent of our tokenId\n    \tbytes32 tokenHash = _hashTokenId(tokenId);\n\n    \t// Determine if our domain is eligible by traversing our merkle tree\n    \tisValid = MerkleProof.verify(merkleProof, merkleRoot, tokenHash);\n\n        // Update our token eligibility _only_ if we have been able to confirm that\n        // it is eligible. This prevents incorrect proofs from bricking a token.\n        if (isValid) {\n            validTokenHashes[tokenHash] = isValid;\n        }\n\n        // Confirm that this has been processed\n        _processedTokenHashes[tokenHash][_hashMerkleProof(merkleProof)] = true;\n    }\n\n\n    /**\n     * @notice Hashes the token ID to convert it into the token hash.\n     *\n     * @param tokenId The ENS token ID being hashed\n     *\n     * @return bytes32 The encrypted token hash\n     */\n\n    function _hashTokenId(uint tokenId) private pure returns (bytes32) {\n        return keccak256(_tokenString(tokenId));\n    }\n\n\n    /**\n     * @notice This will convert a 2d bytes32 array into a bytes32 hash.\n     *\n     * @param merkleProofs Merkle proof to encrypted\n     *\n     * @return bytes32 The hashed merkle proof\n     */\n\n    function _hashMerkleProof(bytes32[] memory merkleProofs) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(merkleProofs));\n    }\n\n\n    /**\n     * @notice Converts a `uint256` to its ASCII `string` decimal representation.\n     * \n     * @param value Integer value\n     * \n     * @return string String of the integer value\n     */\n\n    function _tokenString(uint256 value) internal pure returns (bytes memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n\n        uint256 temp = value;\n        uint256 digits;\n\n        while (temp != 0) {\n            unchecked { ++digits; }\n            temp /= 10;\n        }\n\n        bytes memory buffer = new bytes(digits);\n\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n\n        return buffer;\n    }\n\n}\n"
    },
    "src/v2/eligibility/NFTXRangeEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./NFTXEligibility.sol\";\n\n// Maybe use guardian here?\ncontract NFTXRangeEligibility is NFTXEligibility {\n    function name() public pure override virtual returns (string memory) {\n        return \"Range\";\n    }\n\n    function finalized() public view override virtual returns (bool) {\n        return true;\n    }\n\n    function targetAsset() public pure override virtual returns (address) {\n        return address(0);\n    }\n\n    uint256 public rangeStart;\n    uint256 public rangeEnd;\n\n    struct Config {\n        uint256 rangeStart;\n        uint256 rangeEnd;\n    }\n    event RangeSet(uint256 rangeStart, uint256 rangeEnd);\n    event NFTXEligibilityInit(\n        uint256 rangeStart,\n        uint256 rangeEnd\n    );\n\n    function __NFTXEligibility_init_bytes(bytes memory _configData)\n        public\n        override\n        virtual\n        initializer\n    {\n        (uint256 _rangeStart, uint256 _rangeEnd) = abi.decode(_configData, (uint256, uint256));\n        __NFTXEligibility_init(_rangeStart, _rangeEnd);\n    }\n\n    function __NFTXEligibility_init(\n        uint256 _rangeStart,\n        uint256 _rangeEnd\n    ) public initializer {\n        require(_rangeStart <= _rangeEnd, \"start > end\");\n        rangeStart = _rangeStart;\n        rangeEnd = _rangeEnd;\n        emit RangeSet(_rangeStart, _rangeEnd);\n        emit NFTXEligibilityInit(_rangeStart, _rangeEnd);\n    }\n\n    function _checkIfEligible(uint256 _tokenId)\n        internal\n        view\n        override\n        virtual\n        returns (bool)\n    {\n        return _tokenId >= rangeStart && _tokenId <= rangeEnd;\n    }\n}\n"
    },
    "src/v2/eligibility/UniqueEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract UniqueEligibility {\n    mapping(uint256 => uint256) eligibleBitMap;\n\n    event UniqueEligibilitiesSet(uint256[] tokenIds, bool isEligible);\n\n    function isUniqueEligible(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        uint256 wordIndex = tokenId / 256;\n        uint256 bitMap = eligibleBitMap[wordIndex];\n        return _getBit(bitMap, tokenId);\n    }\n\n    function _setUniqueEligibilities(\n        uint256[] memory tokenIds,\n        bool _isEligible\n    ) internal virtual {\n        uint256 cachedWord = eligibleBitMap[0];\n        uint256 cachedIndex = 0;\n        for (uint256 i; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            uint256 eligibilityWordIndex = tokenId / 256;\n            if (eligibilityWordIndex != cachedIndex) {\n                // Save the cached word.\n                eligibleBitMap[cachedIndex] = cachedWord;\n                // Cache the new one.\n                cachedWord = eligibleBitMap[eligibilityWordIndex];\n                cachedIndex = eligibilityWordIndex;\n            }\n            // Modify the cached word.\n            cachedWord = _setBit(cachedWord, tokenId, _isEligible);\n        }\n        // Assign the last word since the loop is done.\n        eligibleBitMap[cachedIndex] = cachedWord;\n        emit UniqueEligibilitiesSet(tokenIds, _isEligible);\n    }\n\n    function _setBit(uint256 bitMap, uint256 index, bool eligible)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 claimedBitIndex = index % 256;\n        if (eligible) {\n            return bitMap | (1 << claimedBitIndex);\n        } else {\n            return bitMap & ~(1 << claimedBitIndex);\n        }\n    }\n\n    function _getBit(uint256 bitMap, uint256 index)\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 claimedBitIndex = index % 256;\n        return uint8((bitMap >> claimedBitIndex) & 1) == 1;\n    }\n}\n"
    },
    "src/v2/interface/IAdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IAdminUpgradeabilityProxy {\n    // Read functions.\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    // Write functions.\n    function changeAdmin(address newAdmin) external;\n\n    function upgradeTo(address newImplementation) external;\n}\n"
    },
    "src/v2/interface/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/v2/interface/IERC3156Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashBorrowerUpgradeable {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n\n/**\n * @dev Interface of the ERC3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashLenderUpgradeable {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrowerUpgradeable receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
    },
    "src/v2/interface/INFTXEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXEligibility {\n    // Read functions.\n    function name() external pure returns (string memory);\n\n    function finalized() external view returns (bool);\n\n    function targetAsset() external pure returns (address);\n\n    function checkAllEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool[] memory);\n\n    function checkAllIneligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\n\n    // Write functions.\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\n\n    function beforeMintHook(uint256[] calldata tokenIds) external;\n\n    function afterMintHook(uint256[] calldata tokenIds) external;\n\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\n\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\n}\n"
    },
    "src/v2/interface/INFTXEligibilityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXEligibilityManager {\n    function nftxVaultFactory() external returns (address);\n\n    function eligibilityImpl() external returns (address);\n\n    function deployEligibility(uint256 vaultId, bytes calldata initData)\n        external\n        returns (address);\n}\n"
    },
    "src/v2/interface/INFTXFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXFeeDistributor {\n    struct FeeReceiver {\n        uint256 allocPoint;\n        address receiver;\n        bool isContract;\n    }\n\n    function nftxVaultFactory() external returns (address);\n\n    function lpStaking() external returns (address);\n\n    function treasury() external returns (address);\n\n    function defaultTreasuryAlloc() external returns (uint256);\n\n    function defaultLPAlloc() external returns (uint256);\n\n    function allocTotal(uint256 vaultId) external returns (uint256);\n\n    function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\n\n    // Write functions.\n    function __FeeDistributor__init__(address _lpStaking, address _treasury)\n        external;\n\n    function rescueTokens(address token) external;\n\n    function distribute(uint256 vaultId) external;\n\n    function addReceiver(\n        uint256 _vaultId,\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) external;\n\n    function initializeVaultReceivers(uint256 _vaultId) external;\n\n    function changeMultipleReceiverAlloc(\n        uint256[] memory _vaultIds,\n        uint256[] memory _receiverIdxs,\n        uint256[] memory allocPoints\n    ) external;\n\n    function changeMultipleReceiverAddress(\n        uint256[] memory _vaultIds,\n        uint256[] memory _receiverIdxs,\n        address[] memory addresses,\n        bool[] memory isContracts\n    ) external;\n\n    function changeReceiverAlloc(\n        uint256 _vaultId,\n        uint256 _idx,\n        uint256 _allocPoint\n    ) external;\n\n    function changeReceiverAddress(\n        uint256 _vaultId,\n        uint256 _idx,\n        address _address,\n        bool _isContract\n    ) external;\n\n    function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\n\n    // Configuration functions.\n    function setTreasuryAddress(address _treasury) external;\n\n    function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\n\n    function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint)\n        external;\n\n    function setLPStakingAddress(address _lpStaking) external;\n\n    function setNFTXVaultFactory(address _factory) external;\n\n    function setDefaultLPAlloc(uint256 _allocPoint) external;\n}\n"
    },
    "src/v2/interface/INFTXInventoryStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./INFTXVaultFactory.sol\";\n\ninterface INFTXInventoryStaking {\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\n\n    function vaultXToken(uint256 vaultId) external view returns (address);\n\n    function xTokenAddr(address baseToken) external view returns (address);\n\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\n\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\n\n    function deployXTokenForVault(uint256 vaultId) external;\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        returns (bool);\n\n    function timelockMintFor(\n        uint256 vaultId,\n        uint256 amount,\n        address to,\n        uint256 timelockLength\n    ) external returns (uint256);\n\n    function deposit(uint256 vaultId, uint256 _amount) external;\n\n    function withdraw(uint256 vaultId, uint256 _share) external;\n}\n"
    },
    "src/v2/interface/INFTXLPStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXLPStaking {\n    function nftxVaultFactory() external view returns (address);\n\n    function rewardDistTokenImpl() external view returns (address);\n\n    function stakingTokenProvider() external view returns (address);\n\n    function vaultToken(address _stakingToken) external view returns (address);\n\n    function stakingToken(address _vaultToken) external view returns (address);\n\n    function rewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function newRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function oldRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function unusedRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function rewardDistributionTokenAddr(\n        address stakedToken,\n        address rewardToken\n    ) external view returns (address);\n\n    // Write functions.\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\n\n    function setNFTXVaultFactory(address newFactory) external;\n\n    function setStakingTokenProvider(address newProvider) external;\n\n    function addPoolForVault(uint256 vaultId) external;\n\n    function updatePoolForVault(uint256 vaultId) external;\n\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        returns (bool);\n\n    function deposit(uint256 vaultId, uint256 amount) external;\n\n    function timelockDepositFor(\n        uint256 vaultId,\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) external;\n\n    function exit(uint256 vaultId, uint256 amount) external;\n\n    function rescue(uint256 vaultId) external;\n\n    function withdraw(uint256 vaultId, uint256 amount) external;\n\n    function claimRewards(uint256 vaultId) external;\n}\n"
    },
    "src/v2/interface/INFTXSimpleFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXSimpleFeeDistributor {\n    struct FeeReceiver {\n        uint256 allocPoint;\n        address receiver;\n        bool isContract;\n    }\n\n    function nftxVaultFactory() external view returns (address);\n\n    function lpStaking() external view returns (address);\n\n    function inventoryStaking() external view returns (address);\n\n    function treasury() external view returns (address);\n\n    function allocTotal() external view returns (uint256);\n\n    // Write functions.\n    function __SimpleFeeDistributor__init__(\n        address _lpStaking,\n        address _treasury\n    ) external;\n\n    function rescueTokens(address token) external;\n\n    function distribute(uint256 vaultId) external;\n\n    function addReceiver(\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) external;\n\n    function initializeVaultReceivers(uint256 _vaultId) external;\n\n    function changeReceiverAlloc(uint256 _idx, uint256 _allocPoint) external;\n\n    function changeReceiverAddress(\n        uint256 _idx,\n        address _address,\n        bool _isContract\n    ) external;\n\n    function removeReceiver(uint256 _receiverIdx) external;\n\n    // Configuration functions.\n    function setTreasuryAddress(address _treasury) external;\n\n    function setLPStakingAddress(address _lpStaking) external;\n\n    function setInventoryStakingAddress(address _inventoryStaking) external;\n\n    function setNFTXVaultFactory(address _factory) external;\n}\n"
    },
    "src/v2/interface/INFTXVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/IERC20Upgradeable.sol\";\nimport \"./INFTXVaultFactory.sol\";\nimport \"./INFTXEligibility.sol\";\n\n// TODO: organize using comment blocks\ninterface INFTXVault is IERC20Upgradeable {\n    function manager() external view returns (address);\n\n    function assetAddress() external view returns (address);\n\n    function vaultFactory() external view returns (INFTXVaultFactory);\n\n    function eligibilityStorage() external view returns (INFTXEligibility);\n\n    function is1155() external view returns (bool);\n\n    function allowAllItems() external view returns (bool);\n\n    function enableMint() external view returns (bool);\n\n    function enableRandomRedeem() external view returns (bool);\n\n    function enableTargetRedeem() external view returns (bool);\n\n    function enableRandomSwap() external view returns (bool);\n\n    function enableTargetSwap() external view returns (bool);\n\n    function vaultId() external view returns (uint256);\n\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\n\n    function allHoldings() external view returns (uint256[] memory);\n\n    function totalHoldings() external view returns (uint256);\n\n    function mintFee() external view returns (uint256);\n\n    function randomRedeemFee() external view returns (uint256);\n\n    function targetRedeemFee() external view returns (uint256);\n\n    function randomSwapFee() external view returns (uint256);\n\n    function targetSwapFee() external view returns (uint256);\n\n    function vaultFees()\n        external\n        view\n        returns (uint256, uint256, uint256, uint256, uint256);\n\n    event VaultInit(\n        uint256 indexed vaultId,\n        address assetAddress,\n        bool is1155,\n        bool allowAllItems\n    );\n\n    event ManagerSet(address manager);\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\n    // event CustomEligibilityDeployed(address eligibilityAddr);\n\n    event EnableMintUpdated(bool enabled);\n    event EnableRandomRedeemUpdated(bool enabled);\n    event EnableTargetRedeemUpdated(bool enabled);\n    event EnableRandomSwapUpdated(bool enabled);\n    event EnableTargetSwapUpdated(bool enabled);\n\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\n    event Swapped(\n        uint256[] nftIds,\n        uint256[] amounts,\n        uint256[] specificIds,\n        uint256[] redeemedIds,\n        address to\n    );\n\n    function __NFTXVault_init(\n        string calldata _name,\n        string calldata _symbol,\n        address _assetAddress,\n        bool _is1155,\n        bool _allowAllItems\n    ) external;\n\n    function finalizeVault() external;\n\n    function setVaultMetadata(\n        string memory name_,\n        string memory symbol_\n    ) external;\n\n    function setVaultFeatures(\n        bool _enableMint,\n        bool _enableRandomRedeem,\n        bool _enableTargetRedeem,\n        bool _enableRandomSwap,\n        bool _enableTargetSwap\n    ) external;\n\n    function setFees(\n        uint256 _mintFee,\n        uint256 _randomRedeemFee,\n        uint256 _targetRedeemFee,\n        uint256 _randomSwapFee,\n        uint256 _targetSwapFee\n    ) external;\n\n    function disableVaultFees() external;\n\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\n    // a similar interface.\n    function deployEligibilityStorage(\n        uint256 moduleIndex,\n        bytes calldata initData\n    ) external returns (address);\n\n    // The manager has control over options like fees and features\n    function setManager(address _manager) external;\n\n    function mint(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\n    ) external returns (uint256);\n\n    function mintTo(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\n        address to\n    ) external returns (uint256);\n\n    function redeem(\n        uint256 amount,\n        uint256[] calldata specificIds\n    ) external returns (uint256[] calldata);\n\n    function redeemTo(\n        uint256 amount,\n        uint256[] calldata specificIds,\n        address to\n    ) external returns (uint256[] calldata);\n\n    function swap(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\n        uint256[] calldata specificIds\n    ) external returns (uint256[] calldata);\n\n    function swapTo(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\n        uint256[] calldata specificIds,\n        address to\n    ) external returns (uint256[] calldata);\n\n    function allValidNFTs(\n        uint256[] calldata tokenIds\n    ) external view returns (bool);\n}\n"
    },
    "src/v2/interface/INFTXVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/IBeacon.sol\";\n\ninterface INFTXVaultFactory is IBeacon {\n    // Read functions.\n    function numVaults() external view returns (uint256);\n\n    function zapContract() external view returns (address);\n\n    function zapContracts(address addr) external view returns (bool);\n\n    function feeDistributor() external view returns (address);\n\n    function eligibilityManager() external view returns (address);\n\n    function vault(uint256 vaultId) external view returns (address);\n\n    function allVaults() external view returns (address[] memory);\n\n    function vaultsForAsset(address asset)\n        external\n        view\n        returns (address[] memory);\n\n    function isLocked(uint256 id) external view returns (bool);\n\n    function excludedFromFees(address addr) external view returns (bool);\n\n    function factoryMintFee() external view returns (uint64);\n\n    function factoryRandomRedeemFee() external view returns (uint64);\n\n    function factoryTargetRedeemFee() external view returns (uint64);\n\n    function factoryRandomSwapFee() external view returns (uint64);\n\n    function factoryTargetSwapFee() external view returns (uint64);\n\n    function vaultFees(uint256 vaultId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\n    event NewZapContract(address oldZap, address newZap);\n    event UpdatedZapContract(address zap, bool excluded);\n    event FeeExclusion(address feeExcluded, bool excluded);\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\n    event NewVault(\n        uint256 indexed vaultId,\n        address vaultAddress,\n        address assetAddress\n    );\n    event UpdateVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    );\n    event DisableVaultFees(uint256 vaultId);\n    event UpdateFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    );\n\n    // Write functions.\n    function __NFTXVaultFactory_init(\n        address _vaultImpl,\n        address _feeDistributor\n    ) external;\n\n    function createVault(\n        string calldata name,\n        string calldata symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) external returns (uint256);\n\n    function setFeeDistributor(address _feeDistributor) external;\n\n    function setEligibilityManager(address _eligibilityManager) external;\n\n    function setZapContract(address _zapContract, bool _excluded) external;\n\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\n\n    function setFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) external;\n\n    function setVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) external;\n\n    function disableVaultFees(uint256 vaultId) external;\n}\n"
    },
    "src/v2/interface/IRewardDistributionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/IERC20Upgradeable.sol\";\n\ninterface IRewardDistributionToken is IERC20Upgradeable {\n    function distributeRewards(uint256 amount) external;\n\n    function __RewardDistributionToken_init(\n        IERC20Upgradeable _target,\n        string memory _name,\n        string memory _symbol\n    ) external;\n\n    function mint(\n        address account,\n        address to,\n        uint256 amount\n    ) external;\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function withdrawReward(address user) external;\n\n    function dividendOf(address _owner) external view returns (uint256);\n\n    function withdrawnRewardOf(address _owner) external view returns (uint256);\n\n    function accumulativeRewardOf(address _owner)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "src/v2/interface/ITimelockExcludeList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITimelockExcludeList {\n    function isExcluded(address addr, uint256 vaultId)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "src/v2/interface/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "src/v2/interface/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "src/v2/NFTXEligibilityManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma experimental ABIEncoderV2;\npragma solidity ^0.8.0;\n\nimport \"./util/OwnableUpgradeable.sol\";\nimport \"./proxy/ClonesUpgradeable.sol\";\nimport \"./interface/INFTXEligibility.sol\";\n\ncontract NFTXEligibilityManager is OwnableUpgradeable {\n    struct EligibilityModule {\n        address implementation;\n        address targetAsset;\n        string name;\n    }\n    EligibilityModule[] public modules;\n\n    event ModuleAdded(\n        address implementation,\n        address targetAsset,\n        string name,\n        bool finalizedOnDeploy\n    );\n    event ModuleUpdated(\n        address implementation,\n        string name,\n        bool finalizedOnDeploy\n    );\n\n    function __NFTXEligibilityManager_init() public initializer {\n        __Ownable_init();\n    }\n\n    function addModule(address implementation) external onlyOwner {\n        require(implementation != address(0), \"Impl != address(0)\");\n        INFTXEligibility elig = INFTXEligibility(implementation);\n        string memory name = elig.name();\n        EligibilityModule memory module = EligibilityModule(\n            implementation,\n            elig.targetAsset(),\n            name\n        );\n        modules.push(module);\n        emit ModuleAdded(\n            implementation,\n            module.targetAsset,\n            name,\n            elig.finalized()\n        );\n    }\n\n    function updateModule(uint256 moduleIndex, address implementation)\n        external\n        onlyOwner\n    {\n        require(moduleIndex < modules.length, \"Out of bounds\");\n        require(implementation != address(0), \"Impl != address(0)\");\n        modules[moduleIndex].implementation = implementation;\n        INFTXEligibility elig = INFTXEligibility(implementation);\n        emit ModuleUpdated(implementation, elig.name(), elig.finalized());\n    }\n\n    function deployEligibility(uint256 moduleIndex, bytes calldata configData)\n        external\n        virtual\n        returns (address)\n    {\n        require(moduleIndex < modules.length, \"Out of bounds\");\n        address eligImpl = modules[moduleIndex].implementation;\n        address eligibilityClone = ClonesUpgradeable.clone(eligImpl);\n        INFTXEligibility(eligibilityClone).__NFTXEligibility_init_bytes(\n            configData\n        );\n        return eligibilityClone;\n    }\n\n    function allModules() external view returns (EligibilityModule[] memory) {\n        return modules;\n    }\n\n    function allModuleNames() external view returns (string[] memory) {\n        EligibilityModule[] memory modulesCopy = modules;\n        string[] memory names = new string[](modulesCopy.length);\n        for (uint256 i = 0; i < modulesCopy.length; i++) {\n            names[i] = modulesCopy[i].name;\n        }\n        return names;\n    }\n}\n"
    },
    "src/v2/NFTXInventoryStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./util/Create2.sol\";\nimport \"./proxy/UpgradeableBeacon.sol\";\nimport \"./proxy/Create2BeaconProxy.sol\";\nimport \"./token/XTokenUpgradeable.sol\";\nimport \"./interface/INFTXInventoryStaking.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/ITimelockExcludeList.sol\";\n\n// Author: 0xKiwi.\n\n// Pausing codes for inventory staking are:\n// 10: Deposit\n\ncontract NFTXInventoryStaking is\n    PausableUpgradeable,\n    UpgradeableBeacon,\n    INFTXInventoryStaking\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // Small locktime to prevent flash deposits.\n    uint256 internal constant DEFAULT_LOCKTIME = 2;\n    // bytes internal constant beaconCode = type(Create2BeaconProxy).creationCode;\n    bytes internal constant beaconCode =\n        hex\"608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610451565b6000805160206107cf8339815191521461005957634e487b7160e01b600052600160045260246000fd5b610078336040518060200160405280600081525061007d60201b60201c565b6104a0565b6100908261023860201b6100291760201c565b6100ef5760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610172826001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016391906103db565b61023860201b6100291760201c565b6101e45760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100e6565b6000805160206107cf8339815191528281558151156102335761023161020861023e565b836040518060600160405280602181526020016107ef602191396102cb60201b61002f1760201c565b505b505050565b3b151590565b60006102566000805160206107cf8339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561028e57600080fd5b505afa1580156102a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c691906103db565b905090565b6060833b61032a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100e6565b600080856001600160a01b0316856040516103459190610402565b600060405180830381855af49150503d8060008114610380576040519150601f19603f3d011682016040523d82523d6000602084013e610385565b606091505b5090925090506103968282866103a2565b925050505b9392505050565b606083156103b157508161039b565b8251156103c15782518084602001fd5b8160405162461bcd60e51b81526004016100e6919061041e565b6000602082840312156103ec578081fd5b81516001600160a01b038116811461039b578182fd5b60008251610414818460208701610474565b9190910192915050565b602081526000825180602084015261043d816040850160208701610474565b601f01601f19169190910160400192915050565b60008282101561046f57634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561048f578181015183820152602001610477565b838111156102315750506000910152565b610320806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261012e565b6101da565b565b3b151590565b6060833b6100aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100d2919061026b565b600060405180830381855af49150503d806000811461010d576040519150601f19603f3d011682016040523d82523d6000602084013e610112565b606091505b50915091506101228282866101fe565b925050505b9392505050565b60006101587fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b73ffffffffffffffffffffffffffffffffffffffff1663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561019d57600080fd5b505afa1580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610237565b905090565b3660008037600080366000845af43d6000803e8080156101f9573d6000f35b3d6000fd5b6060831561020d575081610127565b82511561021d5782518084602001fd5b8160405162461bcd60e51b81526004016100a19190610287565b600060208284031215610248578081fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114610127578182fd5b6000825161027d8184602087016102ba565b9190910192915050565b60208152600082518060208401526102a68160408501602087016102ba565b601f01601f19169190910160400192915050565b60005b838110156102d55781810151838201526020016102bd565b838111156102e4576000848401525b5050505056fea2646970667358221220186f38c9868951054a26d8e78dfc388c93ba31dab42cd0982029e5f5f85fc42164736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564\";\n    // this code is used to determine xToken address while calling `directWithdraw()`\n    bytes internal constant duplicateBeaconCode =\n        hex\"608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610451565b6000805160206107cf8339815191521461005957634e487b7160e01b600052600160045260246000fd5b610078336040518060200160405280600081525061007d60201b60201c565b6104a0565b6100908261023860201b6100291760201c565b6100ef5760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610172826001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016391906103db565b61023860201b6100291760201c565b6101e45760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100e6565b6000805160206107cf8339815191528281558151156102335761023161020861023e565b836040518060600160405280602181526020016107ef602191396102cb60201b61002f1760201c565b505b505050565b3b151590565b60006102566000805160206107cf8339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561028e57600080fd5b505afa1580156102a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c691906103db565b905090565b6060833b61032a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100e6565b600080856001600160a01b0316856040516103459190610402565b600060405180830381855af49150503d8060008114610380576040519150601f19603f3d011682016040523d82523d6000602084013e610385565b606091505b5090925090506103968282866103a2565b925050505b9392505050565b606083156103b157508161039b565b8251156103c15782518084602001fd5b8160405162461bcd60e51b81526004016100e6919061041e565b6000602082840312156103ec578081fd5b81516001600160a01b038116811461039b578182fd5b60008251610414818460208701610474565b9190910192915050565b602081526000825180602084015261043d816040850160208701610474565b601f01601f19169190910160400192915050565b60008282101561046f57634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561048f578181015183820152602001610477565b838111156102315750506000910152565b610320806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261012e565b6101da565b565b3b151590565b6060833b6100aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100d2919061026b565b600060405180830381855af49150503d806000811461010d576040519150601f19603f3d011682016040523d82523d6000602084013e610112565b606091505b50915091506101228282866101fe565b925050505b9392505050565b60006101587fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b73ffffffffffffffffffffffffffffffffffffffff1663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561019d57600080fd5b505afa1580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610237565b905090565b3660008037600080366000845af43d6000803e8080156101f9573d6000f35b3d6000fd5b6060831561020d575081610127565b82511561021d5782518084602001fd5b8160405162461bcd60e51b81526004016100a19190610287565b600060208284031215610248578081fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114610127578182fd5b6000825161027d8184602087016102ba565b9190910192915050565b60208152600082518060208401526102a68160408501602087016102ba565b601f01601f19169190910160400192915050565b60005b838110156102d55781810151838201526020016102bd565b838111156102e4576000848401525b5050505056fea26469706673582212207fa982cc2707bb3e77c4aa1e243fbbca2a5b4869b87391cdd12e6a56d1e36e9164736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564\";\n\n    INFTXVaultFactory public override nftxVaultFactory;\n\n    uint256 public inventoryLockTimeErc20;\n    ITimelockExcludeList public timelockExcludeList;\n\n    event XTokenCreated(uint256 vaultId, address baseToken, address xToken);\n    event Deposit(\n        uint256 vaultId,\n        uint256 baseTokenAmount,\n        uint256 xTokenAmount,\n        uint256 timelockUntil,\n        address sender\n    );\n    event Withdraw(\n        uint256 vaultId,\n        uint256 baseTokenAmount,\n        uint256 xTokenAmount,\n        address sender\n    );\n    event DirectWithdraw(\n        address xToken,\n        uint256 baseTokenAmount,\n        uint256 xTokenAmount,\n        address sender\n    );\n    event FeesReceived(uint256 vaultId, uint256 amount);\n\n    function __NFTXInventoryStaking_init(address _nftxVaultFactory)\n        external\n        virtual\n        override\n        initializer\n    {\n        __Ownable_init();\n        nftxVaultFactory = INFTXVaultFactory(_nftxVaultFactory);\n        address xTokenImpl = address(new XTokenUpgradeable());\n        __UpgradeableBeacon__init(xTokenImpl);\n    }\n\n    modifier onlyAdmin() {\n        require(\n            msg.sender == owner() ||\n                msg.sender == nftxVaultFactory.feeDistributor(),\n            \"LPStaking: Not authorized\"\n        );\n        _;\n    }\n\n    function setTimelockExcludeList(address addr) external onlyOwner {\n        timelockExcludeList = ITimelockExcludeList(addr);\n    }\n\n    function setInventoryLockTimeErc20(uint256 time) external onlyOwner {\n        require(time <= 14 days, \"Lock too long\");\n        inventoryLockTimeErc20 = time;\n    }\n\n    function isAddressTimelockExcluded(address addr, uint256 vaultId)\n        public\n        view\n        returns (bool)\n    {\n        if (address(timelockExcludeList) == address(0)) {\n            return false;\n        } else {\n            return timelockExcludeList.isExcluded(addr, vaultId);\n        }\n    }\n\n    // TODO: create deployXTokenForVault that directly accepts vault address, to avoid 1 storage read\n    function deployXTokenForVault(uint256 vaultId) public virtual override {\n        address baseToken = nftxVaultFactory.vault(vaultId);\n        address deployedXToken = xTokenAddr(address(baseToken));\n\n        if (isContract(deployedXToken)) {\n            return;\n        }\n\n        address xToken = _deployXToken(baseToken);\n        emit XTokenCreated(vaultId, baseToken, xToken);\n    }\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        virtual\n        override\n        onlyAdmin\n        returns (bool)\n    {\n        address baseToken = nftxVaultFactory.vault(vaultId);\n        address deployedXToken = xTokenAddr(address(baseToken));\n\n        // Don't distribute rewards unless there are people to distribute to.\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\n        if (\n            !isContract(deployedXToken) ||\n            XTokenUpgradeable(deployedXToken).totalSupply() == 0\n        ) {\n            return false;\n        }\n        // We \"pull\" to the dividend tokens so the fee distributor only needs to approve this contract.\n        IERC20Upgradeable(baseToken).safeTransferFrom(\n            msg.sender,\n            deployedXToken,\n            amount\n        );\n        emit FeesReceived(vaultId, amount);\n        return true;\n    }\n\n    // Enter staking. Staking, get minted shares and\n    // locks base tokens and mints xTokens.\n    function deposit(uint256 vaultId, uint256 _amount)\n        external\n        virtual\n        override\n    {\n        onlyOwnerIfPaused(10);\n\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : inventoryLockTimeErc20;\n\n        (\n            IERC20Upgradeable baseToken,\n            XTokenUpgradeable xToken,\n            uint256 xTokensMinted\n        ) = _timelockMintFor(vaultId, msg.sender, _amount, timelockTime);\n        // Lock the base token in the xtoken contract\n        baseToken.safeTransferFrom(msg.sender, address(xToken), _amount);\n        emit Deposit(vaultId, _amount, xTokensMinted, timelockTime, msg.sender);\n    }\n\n    function timelockMintFor(\n        uint256 vaultId,\n        uint256 amount,\n        address to,\n        uint256 timelockLength\n    ) external virtual override returns (uint256) {\n        onlyOwnerIfPaused(10);\n        require(nftxVaultFactory.zapContracts(msg.sender), \"Not staking zap\");\n        require(\n            nftxVaultFactory.excludedFromFees(msg.sender),\n            \"Not fee excluded\"\n        );\n\n        (, , uint256 xTokensMinted) = _timelockMintFor(\n            vaultId,\n            to,\n            amount,\n            timelockLength\n        );\n        emit Deposit(vaultId, amount, xTokensMinted, timelockLength, to);\n        return xTokensMinted;\n    }\n\n    // Leave the bar. Claim back your tokens.\n    // Unlocks the staked + gained tokens and burns xTokens.\n    function withdraw(uint256 vaultId, uint256 _share)\n        external\n        virtual\n        override\n    {\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        XTokenUpgradeable xToken = XTokenUpgradeable(\n            xTokenAddr(address(baseToken))\n        );\n\n        uint256 baseTokensRedeemed = xToken.burnXTokens(msg.sender, _share);\n        emit Withdraw(vaultId, baseTokensRedeemed, _share, msg.sender);\n    }\n\n    function directWithdraw(uint256 vaultId, uint256 _share) external {\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\n        address xToken = Create2.computeAddress(\n            salt,\n            keccak256(duplicateBeaconCode)\n        );\n        uint256 baseTokensRedeemed = XTokenUpgradeable(xToken).burnXTokens(\n            msg.sender,\n            _share\n        );\n\n        emit DirectWithdraw(xToken, baseTokensRedeemed, _share, msg.sender);\n    }\n\n    function xTokenShareValue(uint256 vaultId)\n        external\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        XTokenUpgradeable xToken = XTokenUpgradeable(\n            xTokenAddr(address(baseToken))\n        );\n        require(address(xToken) != address(0), \"XToken not deployed\");\n\n        uint256 multiplier = 10**18;\n        return\n            xToken.totalSupply() > 0\n                ? (multiplier * baseToken.balanceOf(address(xToken))) /\n                    xToken.totalSupply()\n                : multiplier;\n    }\n\n    function timelockUntil(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\n        return xToken.timelockUntil(who);\n    }\n\n    function balanceOf(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\n        return xToken.balanceOf(who);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function xTokenAddr(address baseToken)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\n        address tokenAddr = Create2.computeAddress(salt, keccak256(beaconCode));\n        return tokenAddr;\n    }\n\n    function vaultXToken(uint256 vaultId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address baseToken = nftxVaultFactory.vault(vaultId);\n        address xToken = xTokenAddr(baseToken);\n        require(isContract(xToken), \"XToken not deployed\");\n        return xToken;\n    }\n\n    function _timelockMintFor(\n        uint256 vaultId,\n        address account,\n        uint256 _amount,\n        uint256 timelockLength\n    )\n        internal\n        returns (\n            IERC20Upgradeable,\n            XTokenUpgradeable,\n            uint256\n        )\n    {\n        deployXTokenForVault(vaultId);\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        XTokenUpgradeable xToken = XTokenUpgradeable(\n            (xTokenAddr(address(baseToken)))\n        );\n\n        uint256 xTokensMinted = xToken.mintXTokens(\n            account,\n            _amount,\n            timelockLength\n        );\n        return (baseToken, xToken, xTokensMinted);\n    }\n\n    function _deployXToken(address baseToken) internal returns (address) {\n        string memory symbol = IERC20Metadata(baseToken).symbol();\n        symbol = string(abi.encodePacked(\"x\", symbol));\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\n        address deployedXToken = Create2.deploy(0, salt, beaconCode);\n        XTokenUpgradeable(deployedXToken).__XToken_init(\n            baseToken,\n            symbol,\n            symbol\n        );\n        return deployedXToken;\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size != 0;\n    }\n}\n"
    },
    "src/v2/NFTXLPStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./proxy/ClonesUpgradeable.sol\";\nimport \"./token/TimelockRewardDistributionTokenImpl.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/IRewardDistributionToken.sol\";\nimport \"./StakingTokenProvider.sol\";\n\n// Author: 0xKiwi.\n\n// Pausing codes for LP staking are:\n// 10: Deposit\n\ncontract NFTXLPStaking is PausableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    INFTXVaultFactory public nftxVaultFactory;\n    IRewardDistributionToken public rewardDistTokenImpl;\n    StakingTokenProvider public stakingTokenProvider;\n\n    event PoolCreated(uint256 vaultId, address pool);\n    event PoolUpdated(uint256 vaultId, address pool);\n    event FeesReceived(uint256 vaultId, uint256 amount);\n\n    event Deposit(uint256 vaultId, address stakingToken, uint256 amount, address account, uint256 timelockLength);\n    event Withdraw(uint256 vaultId, address stakingToken, uint256 amount, address account);\n\n    struct StakingPool {\n        address stakingToken;\n        address rewardToken;\n    }\n    mapping(uint256 => StakingPool) public vaultStakingInfo;\n\n    TimelockRewardDistributionTokenImpl public newTimelockRewardDistTokenImpl;\n\n    function __NFTXLPStaking__init(address _stakingTokenProvider)\n        external\n        initializer\n    {\n        __Ownable_init();\n        require(_stakingTokenProvider != address(0), \"Provider != address(0)\");\n        require(\n            address(newTimelockRewardDistTokenImpl) == address(0),\n            \"Already assigned\"\n        );\n        stakingTokenProvider = StakingTokenProvider(_stakingTokenProvider);\n        newTimelockRewardDistTokenImpl = new TimelockRewardDistributionTokenImpl();\n        newTimelockRewardDistTokenImpl.__TimelockRewardDistributionToken_init(\n            IERC20Upgradeable(address(0)),\n            \"\",\n            \"\"\n        );\n    }\n\n    modifier onlyAdmin() {\n        require(\n            msg.sender == owner() ||\n                msg.sender == nftxVaultFactory.feeDistributor(),\n            \"LPStaking: Not authorized\"\n        );\n        _;\n    }\n\n    function setNFTXVaultFactory(address newFactory) external onlyOwner {\n        require(\n            address(nftxVaultFactory) == address(0),\n            \"nftxVaultFactory is immutable\"\n        );\n        nftxVaultFactory = INFTXVaultFactory(newFactory);\n    }\n\n    function setStakingTokenProvider(address newProvider) external onlyOwner {\n        require(newProvider != address(0));\n        stakingTokenProvider = StakingTokenProvider(newProvider);\n    }\n\n    function addPoolForVault(uint256 vaultId) external onlyAdmin {\n        require(\n            address(nftxVaultFactory) != address(0),\n            \"LPStaking: Factory not set\"\n        );\n        require(\n            vaultStakingInfo[vaultId].stakingToken == address(0),\n            \"LPStaking: Pool already exists\"\n        );\n        address _rewardToken = nftxVaultFactory.vault(vaultId);\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\n            _rewardToken\n        );\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        vaultStakingInfo[vaultId] = pool;\n        address newRewardDistToken = _deployDividendToken(pool);\n        emit PoolCreated(vaultId, newRewardDistToken);\n    }\n\n    function updatePoolForVaults(uint256[] calldata vaultIds) external {\n        uint256 length = vaultIds.length;\n        for (uint256 i; i < length; ++i) {\n            updatePoolForVault(vaultIds[i]);\n        }\n    }\n\n    // In case the provider changes, this lets the pool be updated. Anyone can call it.\n    function updatePoolForVault(uint256 vaultId) public {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        // Not letting people use this function to create new pools.\n        require(\n            pool.stakingToken != address(0),\n            \"LPStaking: Pool doesn't exist\"\n        );\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\n            pool.rewardToken\n        );\n        StakingPool memory newPool = StakingPool(\n            _stakingToken,\n            pool.rewardToken\n        );\n        vaultStakingInfo[vaultId] = newPool;\n\n        // If the pool is already deployed, ignore the update.\n        address addr = address(_rewardDistributionTokenAddr(newPool));\n        if (isContract(addr)) {\n            return;\n        }\n        address newRewardDistToken = _deployDividendToken(newPool);\n        emit PoolUpdated(vaultId, newRewardDistToken);\n    }\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        onlyAdmin\n        returns (bool)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            // In case the pair is updated, but not yet\n            return false;\n        }\n\n        TimelockRewardDistributionTokenImpl rewardDistToken = _rewardDistributionTokenAddr(\n                pool\n            );\n        // Don't distribute rewards unless there are people to distribute to.\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\n        if (\n            !isContract(address(rewardDistToken)) ||\n            rewardDistToken.totalSupply() == 0\n        ) {\n            return false;\n        }\n        // We \"pull\" to the dividend tokens so the vault only needs to approve this contract.\n        IERC20Upgradeable(pool.rewardToken).safeTransferFrom(\n            msg.sender,\n            address(rewardDistToken),\n            amount\n        );\n        rewardDistToken.distributeRewards(amount);\n        emit FeesReceived(vaultId, amount);\n        return true;\n    }\n\n    function deposit(uint256 vaultId, uint256 amount) external {\n        onlyOwnerIfPaused(10);\n        // Check the pool in case its been updated.\n        updatePoolForVault(vaultId);\n\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        TimelockRewardDistributionTokenImpl xSLPToken = _rewardDistributionTokenAddr(\n                pool\n            );\n\n        // If the user has an existing timelock, check if it is in the future.\n        uint256 currentTimelock = xSLPToken.timelockUntil(msg.sender);\n        if (currentTimelock > block.timestamp) {\n            // Maintain the same timelock if they already have one.\n            // We do this instead of patching in the token because\n            // the xSLP contracts as currently deployed are not upgradeable.\n            uint256 timestamp = currentTimelock - block.timestamp;\n            xSLPToken.timelockMint(\n                msg.sender,\n                amount,\n                timestamp\n            );\n            emit Deposit(vaultId, pool.stakingToken, amount, msg.sender, timestamp);\n        } else {\n            // Timelock for 2 seconds if they don't already have a timelock to prevent flash loans.\n            xSLPToken.timelockMint(msg.sender, amount, 2);\n            emit Deposit(vaultId, pool.stakingToken, amount, msg.sender, 2);\n        }\n    }\n\n    function timelockDepositFor(\n        uint256 vaultId,\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) external {\n        require(timelockLength < 2592000, \"Timelock too long\");\n        require(nftxVaultFactory.excludedFromFees(msg.sender), \"Not zap\");\n        onlyOwnerIfPaused(10);\n        // Check the pool in case its been updated.\n        updatePoolForVault(vaultId);\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        _rewardDistributionTokenAddr(pool).timelockMint(\n            account,\n            amount,\n            timelockLength\n        );\n        emit Deposit(vaultId, pool.stakingToken, amount, account, timelockLength);\n    }\n\n    function exit(uint256 vaultId) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n        _withdraw(vaultId, pool, balanceOf(vaultId, msg.sender), msg.sender);\n    }\n\n    function emergencyExitAndClaim(address _stakingToken, address _rewardToken)\n        external\n    {\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        _claimRewards(pool, msg.sender);\n        _withdraw(INFTXVault(_rewardToken).vaultId(), pool, dist.balanceOf(msg.sender), msg.sender);\n    }\n\n    function emergencyExit(address _stakingToken, address _rewardToken)\n        external\n    {\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        _withdraw(INFTXVault(_rewardToken).vaultId(), pool, dist.balanceOf(msg.sender), msg.sender);\n    }\n\n    function emergencyMigrate(uint256 vaultId) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken unusedDist = _unusedRewardDistributionTokenAddr(\n                pool\n            );\n        IRewardDistributionToken oldDist = _oldRewardDistributionTokenAddr(\n            pool\n        );\n\n        uint256 unusedDistBal;\n        if (isContract(address(unusedDist))) {\n            unusedDistBal = unusedDist.balanceOf(msg.sender);\n            if (unusedDistBal > 0) {\n                unusedDist.burnFrom(msg.sender, unusedDistBal);\n            }\n        }\n        uint256 oldDistBal;\n        if (isContract(address(oldDist))) {\n            oldDistBal = oldDist.balanceOf(msg.sender);\n            if (oldDistBal > 0) {\n                oldDist.withdrawReward(msg.sender);\n                oldDist.burnFrom(msg.sender, oldDistBal);\n            }\n        }\n\n        TimelockRewardDistributionTokenImpl newDist = _rewardDistributionTokenAddr(\n                pool\n            );\n        if (!isContract(address(newDist))) {\n            address deployedDist = _deployDividendToken(pool);\n            require(\n                deployedDist == address(newDist),\n                \"Not deploying proper distro\"\n            );\n            emit PoolUpdated(vaultId, deployedDist);\n        }\n        require(unusedDistBal + oldDistBal > 0, \"Nothing to migrate\");\n        newDist.mint(msg.sender, unusedDistBal + oldDistBal);\n    }\n\n    function withdraw(uint256 vaultId, uint256 amount) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n        _withdraw(vaultId, pool, amount, msg.sender);\n    }\n\n    function claimRewards(uint256 vaultId) public {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n    }\n\n    function claimMultipleRewards(uint256[] calldata vaultIds) external {\n        uint256 length = vaultIds.length;\n        for (uint256 i; i < length; ++i) {\n            claimRewards(vaultIds[i]);\n        }\n    }\n\n    function newRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (TimelockRewardDistributionTokenImpl)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return TimelockRewardDistributionTokenImpl(address(0));\n        }\n        return _rewardDistributionTokenAddr(pool);\n    }\n\n    function rewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (IRewardDistributionToken)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return IRewardDistributionToken(address(0));\n        }\n        return _unusedRewardDistributionTokenAddr(pool);\n    }\n\n    function oldRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return address(0);\n        }\n        return address(_oldRewardDistributionTokenAddr(pool));\n    }\n\n    function unusedRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return address(0);\n        }\n        return address(_unusedRewardDistributionTokenAddr(pool));\n    }\n\n    function rewardDistributionTokenAddr(\n        address stakedToken,\n        address rewardToken\n    ) public view returns (address) {\n        StakingPool memory pool = StakingPool(stakedToken, rewardToken);\n        return address(_rewardDistributionTokenAddr(pool));\n    }\n\n    function balanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function oldBalanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken dist = _oldRewardDistributionTokenAddr(pool);\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function unusedBalanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken dist = _unusedRewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function lockedUntil(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        return dist.timelockUntil(who);\n    }\n\n    function lockedLPBalance(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        if (block.timestamp > dist.timelockUntil(who)) {\n            return 0;\n        }\n        return dist.balanceOf(who);\n    }\n\n    function _claimRewards(StakingPool memory pool, address account) internal {\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        _rewardDistributionTokenAddr(pool).withdrawReward(account);\n    }\n\n    function _withdraw(\n        uint256 vaultId,\n        StakingPool memory pool,\n        uint256 amount,\n        address account\n    ) internal {\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        _rewardDistributionTokenAddr(pool).burnFrom(account, amount);\n        IERC20Upgradeable(pool.stakingToken).safeTransfer(account, amount);\n        emit Withdraw(vaultId, pool.stakingToken, amount, account);\n    }\n\n    function _deployDividendToken(StakingPool memory pool)\n        internal\n        returns (address)\n    {\n        // Changed to use new nonces.\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(2))\n        );\n        address rewardDistToken = ClonesUpgradeable.cloneDeterministic(\n            address(newTimelockRewardDistTokenImpl),\n            salt\n        );\n        string memory name = stakingTokenProvider.nameForStakingToken(\n            pool.rewardToken\n        );\n        TimelockRewardDistributionTokenImpl(rewardDistToken)\n            .__TimelockRewardDistributionToken_init(\n                IERC20Upgradeable(pool.rewardToken),\n                name,\n                name\n            );\n        return rewardDistToken;\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _rewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (TimelockRewardDistributionTokenImpl)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(\n                pool.stakingToken,\n                pool.rewardToken,\n                uint256(2) /* small nonce to change tokens */\n            )\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(newTimelockRewardDistTokenImpl),\n            salt\n        );\n        return TimelockRewardDistributionTokenImpl(tokenAddr);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _oldRewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (IRewardDistributionToken)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(1))\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(rewardDistTokenImpl),\n            salt\n        );\n        return IRewardDistributionToken(tokenAddr);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _unusedRewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (IRewardDistributionToken)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken)\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(rewardDistTokenImpl),\n            salt\n        );\n        return IRewardDistributionToken(tokenAddr);\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function retrieveTokens(\n        uint256 vaultId,\n        uint256 amount,\n        address from,\n        address to\n    ) public onlyOwner {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl xSlp = _rewardDistributionTokenAddr(\n            pool\n        );\n        xSlp.burnFrom(from, amount);\n        xSlp.mint(to, amount);\n    }\n}\n"
    },
    "src/v2/NFTXSimpleFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/ReentrancyGuardUpgradeable.sol\";\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./interface/INFTXSimpleFeeDistributor.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXInventoryStaking.sol\";\n\ncontract NFTXSimpleFeeDistributor is\n    INFTXSimpleFeeDistributor,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    bool public distributionPaused;\n\n    address public override nftxVaultFactory;\n    address public override lpStaking;\n    address public override treasury;\n\n    // Total allocation points per vault.\n    uint256 public override allocTotal;\n    FeeReceiver[] public feeReceivers;\n\n    address public override inventoryStaking;\n\n    event UpdateTreasuryAddress(address newTreasury);\n    event UpdateLPStakingAddress(address newLPStaking);\n    event UpdateInventoryStakingAddress(address newInventoryStaking);\n    event UpdateNFTXVaultFactory(address factory);\n    event PauseDistribution(bool paused);\n\n    event AddFeeReceiver(address receiver, uint256 allocPoint);\n    event UpdateFeeReceiverAlloc(address receiver, uint256 allocPoint);\n    event UpdateFeeReceiverAddress(address oldReceiver, address newReceiver);\n    event RemoveFeeReceiver(address receiver);\n\n    function __SimpleFeeDistributor__init__(\n        address _lpStaking,\n        address _treasury\n    ) public override initializer {\n        __Pausable_init();\n        setTreasuryAddress(_treasury);\n        setLPStakingAddress(_lpStaking);\n\n        _addReceiver(0.8 ether, lpStaking, true);\n    }\n\n    function distribute(uint256 vaultId)\n        external\n        virtual\n        override\n        nonReentrant\n    {\n        require(nftxVaultFactory != address(0));\n        address _vault = INFTXVaultFactory(nftxVaultFactory).vault(vaultId);\n\n        uint256 tokenBalance = IERC20Upgradeable(_vault).balanceOf(\n            address(this)\n        );\n\n        if (distributionPaused || allocTotal == 0) {\n            IERC20Upgradeable(_vault).safeTransfer(treasury, tokenBalance);\n            return;\n        }\n\n        uint256 length = feeReceivers.length;\n        uint256 leftover;\n        for (uint256 i; i < length; ++i) {\n            FeeReceiver memory _feeReceiver = feeReceivers[i];\n            uint256 amountToSend = leftover +\n                ((tokenBalance * _feeReceiver.allocPoint) / allocTotal);\n            uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(\n                address(this)\n            );\n            amountToSend = amountToSend > currentTokenBalance\n                ? currentTokenBalance\n                : amountToSend;\n            bool complete = _sendForReceiver(\n                _feeReceiver,\n                vaultId,\n                _vault,\n                amountToSend\n            );\n            if (!complete) {\n                uint256 remaining = IERC20Upgradeable(_vault).allowance(\n                    address(this),\n                    _feeReceiver.receiver\n                );\n                IERC20Upgradeable(_vault).safeApprove(_feeReceiver.receiver, 0);\n                leftover = remaining;\n            } else {\n                leftover = 0;\n            }\n        }\n\n        if (leftover != 0) {\n            uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(\n                address(this)\n            );\n            IERC20Upgradeable(_vault).safeTransfer(\n                treasury,\n                currentTokenBalance\n            );\n        }\n    }\n\n    function addReceiver(\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) external virtual override onlyOwner {\n        _addReceiver(_allocPoint, _receiver, _isContract);\n    }\n\n    function initializeVaultReceivers(uint256 _vaultId) external override {\n        require(msg.sender == nftxVaultFactory, \"FeeReceiver: not factory\");\n        INFTXLPStaking(lpStaking).addPoolForVault(_vaultId);\n        if (inventoryStaking != address(0))\n            INFTXInventoryStaking(inventoryStaking).deployXTokenForVault(\n                _vaultId\n            );\n    }\n\n    function changeReceiverAlloc(uint256 _receiverIdx, uint256 _allocPoint)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        require(\n            _receiverIdx < feeReceivers.length,\n            \"FeeDistributor: Out of bounds\"\n        );\n        FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\n        allocTotal -= feeReceiver.allocPoint;\n        feeReceiver.allocPoint = _allocPoint;\n        allocTotal += _allocPoint;\n        emit UpdateFeeReceiverAlloc(feeReceiver.receiver, _allocPoint);\n    }\n\n    function changeReceiverAddress(\n        uint256 _receiverIdx,\n        address _address,\n        bool _isContract\n    ) public virtual override onlyOwner {\n        FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\n        address oldReceiver = feeReceiver.receiver;\n        feeReceiver.receiver = _address;\n        feeReceiver.isContract = _isContract;\n        emit UpdateFeeReceiverAddress(oldReceiver, _address);\n    }\n\n    function removeReceiver(uint256 _receiverIdx)\n        external\n        virtual\n        override\n        onlyOwner\n    {\n        uint256 arrLength = feeReceivers.length;\n        require(_receiverIdx < arrLength, \"FeeDistributor: Out of bounds\");\n        emit RemoveFeeReceiver(feeReceivers[_receiverIdx].receiver);\n        allocTotal -= feeReceivers[_receiverIdx].allocPoint;\n        // Copy the last element to what is being removed and remove the last element.\n        feeReceivers[_receiverIdx] = feeReceivers[arrLength - 1];\n        feeReceivers.pop();\n    }\n\n    function setTreasuryAddress(address _treasury) public override onlyOwner {\n        require(_treasury != address(0), \"Treasury != address(0)\");\n        treasury = _treasury;\n        emit UpdateTreasuryAddress(_treasury);\n    }\n\n    function setLPStakingAddress(address _lpStaking) public override onlyOwner {\n        require(_lpStaking != address(0), \"LPStaking != address(0)\");\n        lpStaking = _lpStaking;\n        emit UpdateLPStakingAddress(_lpStaking);\n    }\n\n    function setInventoryStakingAddress(address _inventoryStaking)\n        public\n        override\n        onlyOwner\n    {\n        inventoryStaking = _inventoryStaking;\n        emit UpdateInventoryStakingAddress(_inventoryStaking);\n    }\n\n    function setNFTXVaultFactory(address _factory) external override onlyOwner {\n        require(\n            address(nftxVaultFactory) == address(0),\n            \"nftxVaultFactory is immutable\"\n        );\n        nftxVaultFactory = _factory;\n        emit UpdateNFTXVaultFactory(_factory);\n    }\n\n    function pauseFeeDistribution(bool _pause) external onlyOwner {\n        distributionPaused = _pause;\n        emit PauseDistribution(_pause);\n    }\n\n    function rescueTokens(address _address) external override onlyOwner {\n        uint256 balance = IERC20Upgradeable(_address).balanceOf(address(this));\n        IERC20Upgradeable(_address).safeTransfer(msg.sender, balance);\n    }\n\n    function _addReceiver(\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) internal virtual {\n        FeeReceiver memory _feeReceiver = FeeReceiver(\n            _allocPoint,\n            _receiver,\n            _isContract\n        );\n        feeReceivers.push(_feeReceiver);\n        allocTotal += _allocPoint;\n        emit AddFeeReceiver(_receiver, _allocPoint);\n    }\n\n    function _sendForReceiver(\n        FeeReceiver memory _receiver,\n        uint256 _vaultId,\n        address _vault,\n        uint256 amountToSend\n    ) internal virtual returns (bool) {\n        if (_receiver.isContract) {\n            IERC20Upgradeable(_vault).safeIncreaseAllowance(\n                _receiver.receiver,\n                amountToSend\n            );\n\n            bytes memory payload = abi.encodeWithSelector(\n                INFTXLPStaking.receiveRewards.selector,\n                _vaultId,\n                amountToSend\n            );\n            (bool success, ) = address(_receiver.receiver).call(payload);\n\n            // If the allowance has not been spent, it means we can pass it forward to next.\n            return\n                success &&\n                IERC20Upgradeable(_vault).allowance(\n                    address(this),\n                    _receiver.receiver\n                ) ==\n                0;\n        } else {\n            IERC20Upgradeable(_vault).safeTransfer(\n                _receiver.receiver,\n                amountToSend\n            );\n            return true;\n        }\n    }\n}\n"
    },
    "src/v2/NFTXVaultFactoryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./proxy/UpgradeableBeacon.sol\";\nimport \"./proxy/BeaconProxy.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\nimport \"./NFTXVaultUpgradeable.sol\";\n\n// Authors: @0xKiwi_ and @alexgausman.\n\ncontract NFTXVaultFactoryUpgradeable is\n    PausableUpgradeable,\n    UpgradeableBeacon,\n    INFTXVaultFactory\n{\n    uint256 private NOT_USED1; // Removed, no longer needed.\n    address public override zapContract; // No longer needed, but keeping for compatibility.\n    address public override feeDistributor;\n    address public override eligibilityManager;\n\n    mapping(uint256 => address) private NOT_USED3; // Removed, no longer needed.\n    mapping(address => address[]) _vaultsForAsset;\n\n    address[] internal vaults;\n\n    // v1.0.1\n    mapping(address => bool) public override excludedFromFees;\n\n    // v1.0.2\n    struct VaultFees {\n        bool active;\n        uint64 mintFee;\n        uint64 randomRedeemFee;\n        uint64 targetRedeemFee;\n        uint64 randomSwapFee;\n        uint64 targetSwapFee;\n    }\n    mapping(uint256 => VaultFees) private _vaultFees;\n    uint64 public override factoryMintFee;\n    uint64 public override factoryRandomRedeemFee;\n    uint64 public override factoryTargetRedeemFee;\n    uint64 public override factoryRandomSwapFee;\n    uint64 public override factoryTargetSwapFee;\n\n    // v1.0.3\n    mapping(address => bool) public override zapContracts;\n\n    function __NFTXVaultFactory_init(\n        address _vaultImpl,\n        address _feeDistributor\n    ) public override initializer {\n        __Pausable_init();\n        // We use a beacon proxy so that every child contract follows the same implementation code.\n        __UpgradeableBeacon__init(_vaultImpl);\n        setFeeDistributor(_feeDistributor);\n        setFactoryFees(0.1 ether, 0.05 ether, 0.1 ether, 0.05 ether, 0.1 ether);\n    }\n\n    function createVault(\n        string memory name,\n        string memory symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) external virtual override returns (uint256) {\n        onlyOwnerIfPaused(0);\n        require(feeDistributor != address(0), \"NFTX: Fee receiver unset\");\n        require(\n            childImplementation() != address(0),\n            \"NFTX: Vault implementation unset\"\n        );\n        address vaultAddr = deployVault(\n            name,\n            symbol,\n            _assetAddress,\n            is1155,\n            allowAllItems\n        );\n        uint256 _vaultId = vaults.length;\n        _vaultsForAsset[_assetAddress].push(vaultAddr);\n        vaults.push(vaultAddr);\n\n        emit NewVault(_vaultId, vaultAddr, _assetAddress);\n        return _vaultId;\n    }\n\n    function setFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) public virtual override onlyOwner {\n        require(mintFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n\n        factoryMintFee = uint64(mintFee);\n        factoryRandomRedeemFee = uint64(randomRedeemFee);\n        factoryTargetRedeemFee = uint64(targetRedeemFee);\n        factoryRandomSwapFee = uint64(randomSwapFee);\n        factoryTargetSwapFee = uint64(targetSwapFee);\n\n        emit UpdateFactoryFees(\n            mintFee,\n            randomRedeemFee,\n            targetRedeemFee,\n            randomSwapFee,\n            targetSwapFee\n        );\n    }\n\n    function setVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) public virtual override {\n        if (msg.sender != owner()) {\n            address vaultAddr = vaults[vaultId];\n            require(msg.sender == vaultAddr, \"Not from vault\");\n        }\n        require(mintFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n\n        _vaultFees[vaultId] = VaultFees(\n            true,\n            uint64(mintFee),\n            uint64(randomRedeemFee),\n            uint64(targetRedeemFee),\n            uint64(randomSwapFee),\n            uint64(targetSwapFee)\n        );\n        emit UpdateVaultFees(\n            vaultId,\n            mintFee,\n            randomRedeemFee,\n            targetRedeemFee,\n            randomSwapFee,\n            targetSwapFee\n        );\n    }\n\n    function disableVaultFees(uint256 vaultId) public virtual override {\n        if (msg.sender != owner()) {\n            address vaultAddr = vaults[vaultId];\n            require(msg.sender == vaultAddr, \"Not vault\");\n        }\n        delete _vaultFees[vaultId];\n        emit DisableVaultFees(vaultId);\n    }\n\n    function setFeeDistributor(\n        address _feeDistributor\n    ) public virtual override onlyOwner {\n        require(_feeDistributor != address(0));\n        emit NewFeeDistributor(feeDistributor, _feeDistributor);\n        feeDistributor = _feeDistributor;\n    }\n\n    function setZapContract(\n        address _zapContract,\n        bool _excluded\n    ) public virtual override onlyOwner {\n        emit UpdatedZapContract(_zapContract, _excluded);\n        zapContracts[_zapContract] = _excluded;\n    }\n\n    function setFeeExclusion(\n        address _excludedAddr,\n        bool excluded\n    ) public virtual override onlyOwner {\n        emit FeeExclusion(_excludedAddr, excluded);\n        excludedFromFees[_excludedAddr] = excluded;\n    }\n\n    function setEligibilityManager(\n        address _eligibilityManager\n    ) external virtual override onlyOwner {\n        emit NewEligibilityManager(eligibilityManager, _eligibilityManager);\n        eligibilityManager = _eligibilityManager;\n    }\n\n    function vaultFees(\n        uint256 vaultId\n    )\n        external\n        view\n        virtual\n        override\n        returns (uint256, uint256, uint256, uint256, uint256)\n    {\n        VaultFees memory fees = _vaultFees[vaultId];\n        if (fees.active) {\n            return (\n                uint256(fees.mintFee),\n                uint256(fees.randomRedeemFee),\n                uint256(fees.targetRedeemFee),\n                uint256(fees.randomSwapFee),\n                uint256(fees.targetSwapFee)\n            );\n        }\n\n        return (\n            uint256(factoryMintFee),\n            uint256(factoryRandomRedeemFee),\n            uint256(factoryTargetRedeemFee),\n            uint256(factoryRandomSwapFee),\n            uint256(factoryTargetSwapFee)\n        );\n    }\n\n    function isLocked(\n        uint256 lockId\n    ) external view virtual override returns (bool) {\n        return isPaused[lockId];\n    }\n\n    function vaultsForAsset(\n        address assetAddress\n    ) external view virtual override returns (address[] memory) {\n        return _vaultsForAsset[assetAddress];\n    }\n\n    function vault(\n        uint256 vaultId\n    ) external view virtual override returns (address) {\n        return vaults[vaultId];\n    }\n\n    function allVaults()\n        external\n        view\n        virtual\n        override\n        returns (address[] memory)\n    {\n        return vaults;\n    }\n\n    function numVaults() external view virtual override returns (uint256) {\n        return vaults.length;\n    }\n\n    function deployVault(\n        string memory name,\n        string memory symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) internal returns (address) {\n        address newBeaconProxy = address(new BeaconProxy(address(this), \"\"));\n        NFTXVaultUpgradeable(newBeaconProxy).__NFTXVault_init(\n            name,\n            symbol,\n            _assetAddress,\n            is1155,\n            allowAllItems\n        );\n        // Manager for configuration.\n        NFTXVaultUpgradeable(newBeaconProxy).setManager(msg.sender);\n        // Owner for administrative functions.\n        NFTXVaultUpgradeable(newBeaconProxy).transferOwnership(owner());\n        return newBeaconProxy;\n    }\n}\n"
    },
    "src/v2/NFTXVaultUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/OwnableUpgradeable.sol\";\nimport \"./util/ReentrancyGuardUpgradeable.sol\";\nimport \"./util/EnumerableSetUpgradeable.sol\";\nimport \"./token/ERC20FlashMintUpgradeable.sol\";\nimport \"./token/ERC721SafeHolderUpgradeable.sol\";\nimport \"./token/ERC1155SafeHolderUpgradeable.sol\";\nimport \"./token/IERC1155Upgradeable.sol\";\nimport \"./token/IERC721Upgradeable.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/INFTXEligibilityManager.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\n\n// Authors: @0xKiwi_ and @alexgausman.\n\n// TODO: organize using comment blocks\ncontract NFTXVaultUpgradeable is\n    OwnableUpgradeable,\n    ERC20FlashMintUpgradeable,\n    ReentrancyGuardUpgradeable,\n    ERC721SafeHolderUpgradeable,\n    ERC1155SafeHolderUpgradeable,\n    INFTXVault\n{\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n\n    uint256 constant base = 10 ** 18;\n\n    uint256 public override vaultId;\n    address public override manager;\n    address public override assetAddress;\n    INFTXVaultFactory public override vaultFactory;\n    INFTXEligibility public override eligibilityStorage;\n\n    uint256 randNonce;\n    uint256 private UNUSED_FEE1;\n    uint256 private UNUSED_FEE2;\n    uint256 private UNUSED_FEE3;\n\n    bool public override is1155;\n    bool public override allowAllItems;\n    bool public override enableMint;\n    bool public override enableRandomRedeem;\n    bool public override enableTargetRedeem;\n\n    EnumerableSetUpgradeable.UintSet holdings;\n    mapping(uint256 => uint256) quantity1155;\n\n    bool public override enableRandomSwap;\n    bool public override enableTargetSwap;\n\n    function __NFTXVault_init(\n        string memory _name,\n        string memory _symbol,\n        address _assetAddress,\n        bool _is1155,\n        bool _allowAllItems\n    ) public virtual override initializer {\n        __Ownable_init();\n        __ERC20_init(_name, _symbol);\n        require(_assetAddress != address(0), \"Asset != address(0)\");\n        assetAddress = _assetAddress;\n        vaultFactory = INFTXVaultFactory(msg.sender);\n        vaultId = vaultFactory.numVaults();\n        is1155 = _is1155;\n        allowAllItems = _allowAllItems;\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\n        setVaultFeatures(\n            true /*enableMint*/,\n            true /*enableRandomRedeem*/,\n            true /*enableTargetRedeem*/,\n            true /*enableRandomSwap*/,\n            true /*enableTargetSwap*/\n        );\n    }\n\n    function finalizeVault() external virtual override {\n        setManager(address(0));\n    }\n\n    // Added in v1.0.3.\n    function setVaultMetadata(\n        string calldata name_,\n        string calldata symbol_\n    ) external virtual override {\n        onlyPrivileged();\n        _setMetadata(name_, symbol_);\n    }\n\n    function setVaultFeatures(\n        bool _enableMint,\n        bool _enableRandomRedeem,\n        bool _enableTargetRedeem,\n        bool _enableRandomSwap,\n        bool _enableTargetSwap\n    ) public virtual override {\n        onlyPrivileged();\n        enableMint = _enableMint;\n        enableRandomRedeem = _enableRandomRedeem;\n        enableTargetRedeem = _enableTargetRedeem;\n        enableRandomSwap = _enableRandomSwap;\n        enableTargetSwap = _enableTargetSwap;\n\n        emit EnableMintUpdated(_enableMint);\n        emit EnableRandomRedeemUpdated(_enableRandomRedeem);\n        emit EnableTargetRedeemUpdated(_enableTargetRedeem);\n        emit EnableRandomSwapUpdated(_enableRandomSwap);\n        emit EnableTargetSwapUpdated(_enableTargetSwap);\n    }\n\n    function setFees(\n        uint256 _mintFee,\n        uint256 _randomRedeemFee,\n        uint256 _targetRedeemFee,\n        uint256 _randomSwapFee,\n        uint256 _targetSwapFee\n    ) public virtual override {\n        onlyPrivileged();\n        vaultFactory.setVaultFees(\n            vaultId,\n            _mintFee,\n            _randomRedeemFee,\n            _targetRedeemFee,\n            _randomSwapFee,\n            _targetSwapFee\n        );\n    }\n\n    function disableVaultFees() public virtual override {\n        onlyPrivileged();\n        vaultFactory.disableVaultFees(vaultId);\n    }\n\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\n    // a similar interface.\n    function deployEligibilityStorage(\n        uint256 moduleIndex,\n        bytes calldata initData\n    ) external virtual override returns (address) {\n        onlyPrivileged();\n        require(\n            address(eligibilityStorage) == address(0),\n            \"NFTXVault: eligibility already set\"\n        );\n        INFTXEligibilityManager eligManager = INFTXEligibilityManager(\n            vaultFactory.eligibilityManager()\n        );\n        address _eligibility = eligManager.deployEligibility(\n            moduleIndex,\n            initData\n        );\n        eligibilityStorage = INFTXEligibility(_eligibility);\n        // Toggle this to let the contract know to check eligibility now.\n        allowAllItems = false;\n        emit EligibilityDeployed(moduleIndex, _eligibility);\n        return _eligibility;\n    }\n\n    // // This function allows for the manager to set their own arbitrary eligibility contract.\n    // // Once eligiblity is set, it cannot be unset or changed.\n    // Disabled for launch.\n    // function setEligibilityStorage(address _newEligibility) public virtual {\n    //     onlyPrivileged();\n    //     require(\n    //         address(eligibilityStorage) == address(0),\n    //         \"NFTXVault: eligibility already set\"\n    //     );\n    //     eligibilityStorage = INFTXEligibility(_newEligibility);\n    //     // Toggle this to let the contract know to check eligibility now.\n    //     allowAllItems = false;\n    //     emit CustomEligibilityDeployed(address(_newEligibility));\n    // }\n\n    // The manager has control over options like fees and features\n    function setManager(address _manager) public virtual override {\n        onlyPrivileged();\n        manager = _manager;\n        emit ManagerSet(_manager);\n    }\n\n    function mint(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\n    ) external virtual override returns (uint256) {\n        return mintTo(tokenIds, amounts, msg.sender);\n    }\n\n    function mintTo(\n        uint256[] memory tokenIds,\n        uint256[] memory amounts /* ignored for ERC721 vaults */,\n        address to\n    ) public virtual override nonReentrant returns (uint256) {\n        onlyOwnerIfPaused(1);\n        require(enableMint, \"Minting not enabled\");\n        // Take the NFTs.\n        uint256 count = receiveNFTs(tokenIds, amounts);\n\n        // Mint to the user.\n        _mint(to, base * count);\n        uint256 totalFee = mintFee() * count;\n        _chargeAndDistributeFees(to, totalFee);\n\n        emit Minted(tokenIds, amounts, to);\n        return count;\n    }\n\n    function redeem(\n        uint256 amount,\n        uint256[] calldata specificIds\n    ) external virtual override returns (uint256[] memory) {\n        return redeemTo(amount, specificIds, msg.sender);\n    }\n\n    function redeemTo(\n        uint256 amount,\n        uint256[] memory specificIds,\n        address to\n    ) public virtual override nonReentrant returns (uint256[] memory) {\n        onlyOwnerIfPaused(2);\n        require(\n            amount == specificIds.length || enableRandomRedeem,\n            \"NFTXVault: Random redeem not enabled\"\n        );\n        require(\n            specificIds.length == 0 || enableTargetRedeem,\n            \"NFTXVault: Target redeem not enabled\"\n        );\n\n        // We burn all from sender and mint to fee receiver to reduce costs.\n        _burn(msg.sender, base * amount);\n\n        // Pay the tokens + toll.\n        (\n            ,\n            uint256 _randomRedeemFee,\n            uint256 _targetRedeemFee,\n            ,\n\n        ) = vaultFees();\n        uint256 totalFee = (_targetRedeemFee * specificIds.length) +\n            (_randomRedeemFee * (amount - specificIds.length));\n        _chargeAndDistributeFees(msg.sender, totalFee);\n\n        // Withdraw from vault.\n        uint256[] memory redeemedIds = withdrawNFTsTo(amount, specificIds, to);\n        emit Redeemed(redeemedIds, specificIds, to);\n        return redeemedIds;\n    }\n\n    function swap(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\n        uint256[] calldata specificIds\n    ) external virtual override returns (uint256[] memory) {\n        return swapTo(tokenIds, amounts, specificIds, msg.sender);\n    }\n\n    function swapTo(\n        uint256[] memory tokenIds,\n        uint256[] memory amounts /* ignored for ERC721 vaults */,\n        uint256[] memory specificIds,\n        address to\n    ) public virtual override nonReentrant returns (uint256[] memory) {\n        onlyOwnerIfPaused(3);\n        uint256 count;\n        if (is1155) {\n            for (uint256 i; i < tokenIds.length; ++i) {\n                uint256 amount = amounts[i];\n                require(amount != 0, \"NFTXVault: transferring < 1\");\n                count += amount;\n            }\n        } else {\n            count = tokenIds.length;\n        }\n\n        require(\n            count == specificIds.length || enableRandomSwap,\n            \"NFTXVault: Random swap disabled\"\n        );\n        require(\n            specificIds.length == 0 || enableTargetSwap,\n            \"NFTXVault: Target swap disabled\"\n        );\n\n        (, , , uint256 _randomSwapFee, uint256 _targetSwapFee) = vaultFees();\n        uint256 totalFee = (_targetSwapFee * specificIds.length) +\n            (_randomSwapFee * (count - specificIds.length));\n        _chargeAndDistributeFees(msg.sender, totalFee);\n\n        // Give the NFTs first, so the user wont get the same thing back, just to be nice.\n        uint256[] memory ids = withdrawNFTsTo(count, specificIds, to);\n\n        receiveNFTs(tokenIds, amounts);\n\n        emit Swapped(tokenIds, amounts, specificIds, ids, to);\n        return ids;\n    }\n\n    function flashLoan(\n        IERC3156FlashBorrowerUpgradeable receiver,\n        address token,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        onlyOwnerIfPaused(4);\n        return super.flashLoan(receiver, token, amount, data);\n    }\n\n    function mintFee() public view virtual override returns (uint256) {\n        (uint256 _mintFee, , , , ) = vaultFactory.vaultFees(vaultId);\n        return _mintFee;\n    }\n\n    function randomRedeemFee() public view virtual override returns (uint256) {\n        (, uint256 _randomRedeemFee, , , ) = vaultFactory.vaultFees(vaultId);\n        return _randomRedeemFee;\n    }\n\n    function targetRedeemFee() public view virtual override returns (uint256) {\n        (, , uint256 _targetRedeemFee, , ) = vaultFactory.vaultFees(vaultId);\n        return _targetRedeemFee;\n    }\n\n    function randomSwapFee() public view virtual override returns (uint256) {\n        (, , , uint256 _randomSwapFee, ) = vaultFactory.vaultFees(vaultId);\n        return _randomSwapFee;\n    }\n\n    function targetSwapFee() public view virtual override returns (uint256) {\n        (, , , , uint256 _targetSwapFee) = vaultFactory.vaultFees(vaultId);\n        return _targetSwapFee;\n    }\n\n    function vaultFees()\n        public\n        view\n        virtual\n        override\n        returns (uint256, uint256, uint256, uint256, uint256)\n    {\n        return vaultFactory.vaultFees(vaultId);\n    }\n\n    function allValidNFTs(\n        uint256[] memory tokenIds\n    ) public view virtual override returns (bool) {\n        if (allowAllItems) {\n            return true;\n        }\n\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\n        if (address(_eligibilityStorage) == address(0)) {\n            return false;\n        }\n        return _eligibilityStorage.checkAllEligible(tokenIds);\n    }\n\n    function nftIdAt(\n        uint256 holdingsIndex\n    ) external view virtual override returns (uint256) {\n        return holdings.at(holdingsIndex);\n    }\n\n    // Added in v1.0.3.\n    function allHoldings()\n        external\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = holdings.length();\n        uint256[] memory idArray = new uint256[](len);\n        for (uint256 i; i < len; ++i) {\n            idArray[i] = holdings.at(i);\n        }\n        return idArray;\n    }\n\n    // Added in v1.0.3.\n    function totalHoldings() external view virtual override returns (uint256) {\n        return holdings.length();\n    }\n\n    // Added in v1.0.3.\n    function version() external pure returns (string memory) {\n        return \"v1.0.5\";\n    }\n\n    // We set a hook to the eligibility module (if it exists) after redeems in case anything needs to be modified.\n    function afterRedeemHook(uint256[] memory tokenIds) internal virtual {\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\n        if (address(_eligibilityStorage) == address(0)) {\n            return;\n        }\n        _eligibilityStorage.afterRedeemHook(tokenIds);\n    }\n\n    function receiveNFTs(\n        uint256[] memory tokenIds,\n        uint256[] memory amounts\n    ) internal virtual returns (uint256) {\n        require(allValidNFTs(tokenIds), \"NFTXVault: not eligible\");\n        uint256 length = tokenIds.length;\n        if (is1155) {\n            // This is technically a check, so placing it before the effect.\n            IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n                msg.sender,\n                address(this),\n                tokenIds,\n                amounts,\n                \"\"\n            );\n\n            uint256 count;\n            for (uint256 i; i < length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                uint256 amount = amounts[i];\n                require(amount != 0, \"NFTXVault: transferring < 1\");\n                if (quantity1155[tokenId] == 0) {\n                    holdings.add(tokenId);\n                }\n                quantity1155[tokenId] += amount;\n                count += amount;\n            }\n            return count;\n        } else {\n            address _assetAddress = assetAddress;\n            for (uint256 i; i < length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                // We may already own the NFT here so we check in order:\n                // Does the vault own it?\n                //   - If so, check if its in holdings list\n                //      - If so, we reject. This means the NFT has already been claimed for.\n                //      - If not, it means we have not yet accounted for this NFT, so we continue.\n                //   -If not, we \"pull\" it from the msg.sender and add to holdings.\n                transferFromERC721(_assetAddress, tokenId);\n                holdings.add(tokenId);\n            }\n            return length;\n        }\n    }\n\n    function withdrawNFTsTo(\n        uint256 amount,\n        uint256[] memory specificIds,\n        address to\n    ) internal virtual returns (uint256[] memory) {\n        bool _is1155 = is1155;\n        address _assetAddress = assetAddress;\n        uint256[] memory redeemedIds = new uint256[](amount);\n        uint256 specificLength = specificIds.length;\n        for (uint256 i; i < amount; ++i) {\n            // This will always be fine considering the validations made above.\n            uint256 tokenId = i < specificLength\n                ? specificIds[i]\n                : getRandomTokenIdFromVault();\n            redeemedIds[i] = tokenId;\n\n            if (_is1155) {\n                quantity1155[tokenId] -= 1;\n                if (quantity1155[tokenId] == 0) {\n                    holdings.remove(tokenId);\n                }\n\n                IERC1155Upgradeable(_assetAddress).safeTransferFrom(\n                    address(this),\n                    to,\n                    tokenId,\n                    1,\n                    \"\"\n                );\n            } else {\n                holdings.remove(tokenId);\n                transferERC721(_assetAddress, to, tokenId);\n            }\n        }\n        afterRedeemHook(redeemedIds);\n        return redeemedIds;\n    }\n\n    function _chargeAndDistributeFees(\n        address user,\n        uint256 amount\n    ) internal virtual {\n        // Do not charge fees if the zap contract is calling\n        // Added in v1.0.3. Changed to mapping in v1.0.5.\n\n        INFTXVaultFactory _vaultFactory = vaultFactory;\n\n        if (_vaultFactory.excludedFromFees(msg.sender)) {\n            return;\n        }\n\n        // Mint fees directly to the distributor and distribute.\n        if (amount > 0) {\n            address feeDistributor = _vaultFactory.feeDistributor();\n            // Changed to a _transfer() in v1.0.3.\n            _transfer(user, feeDistributor, amount);\n            INFTXFeeDistributor(feeDistributor).distribute(vaultId);\n        }\n    }\n\n    function transferERC721(\n        address assetAddr,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Changed in v1.0.4.\n            data = abi.encodeWithSignature(\n                \"transfer(address,uint256)\",\n                to,\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            data = abi.encodeWithSignature(\n                \"transferPunk(address,uint256)\",\n                to,\n                tokenId\n            );\n        } else {\n            // Default.\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                address(this),\n                to,\n                tokenId\n            );\n        }\n        (bool success, bytes memory returnData) = address(assetAddr).call(data);\n        require(success, string(returnData));\n    }\n\n    function transferFromERC721(\n        address assetAddr,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                msg.sender,\n                address(this),\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            // Fix here for frontrun attack. Added in v1.0.2.\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                tokenId\n            );\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\n                .staticcall(punkIndexToAddress);\n            address nftOwner = abi.decode(result, (address));\n            require(\n                checkSuccess && nftOwner == msg.sender,\n                \"Not the NFT owner\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n        } else {\n            // Default.\n            // Allow other contracts to \"push\" into the vault, safely.\n            // If we already have the token requested, make sure we don't have it in the list to prevent duplicate minting.\n            if (\n                IERC721Upgradeable(assetAddress).ownerOf(tokenId) ==\n                address(this)\n            ) {\n                require(\n                    !holdings.contains(tokenId),\n                    \"Trying to use an owned NFT\"\n                );\n                return;\n            } else {\n                data = abi.encodeWithSignature(\n                    \"safeTransferFrom(address,address,uint256)\",\n                    msg.sender,\n                    address(this),\n                    tokenId\n                );\n            }\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    function getRandomTokenIdFromVault() internal virtual returns (uint256) {\n        uint256 randomIndex = uint256(\n            keccak256(\n                abi.encodePacked(\n                    blockhash(block.number - 1),\n                    randNonce,\n                    block.coinbase,\n                    block.difficulty,\n                    block.timestamp\n                )\n            )\n        ) % holdings.length();\n        ++randNonce;\n        return holdings.at(randomIndex);\n    }\n\n    function onlyPrivileged() internal view {\n        if (manager == address(0)) {\n            require(msg.sender == owner(), \"Not owner\");\n        } else {\n            require(msg.sender == manager, \"Not manager\");\n        }\n    }\n\n    function onlyOwnerIfPaused(uint256 lockId) internal view {\n        require(\n            !vaultFactory.isLocked(lockId) || msg.sender == owner(),\n            \"Paused\"\n        );\n    }\n}\n"
    },
    "src/v2/other/TimelockExcludeList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../util/Ownable.sol\";\n\ncontract TimelockExcludeList is Ownable {\n    mapping(address => bool) public excludeFromAll;\n    mapping(address => mapping(uint256 => bool)) public excludeFromVault;\n\n    event ExcludeFromAllSet(address, bool);\n    event ExcludeFromVaultSet(address, uint256, bool);\n\n    function isExcludedFromAll(address addr) public view returns (bool) {\n        return excludeFromAll[addr];\n    }\n\n    function isExcludedFromVault(address addr, uint256 vaultId)\n        public\n        view\n        returns (bool)\n    {\n        return excludeFromVault[addr][vaultId];\n    }\n\n    function isExcluded(address addr, uint256 vaultId)\n        external\n        view\n        returns (bool)\n    {\n        return isExcludedFromAll(addr) || isExcludedFromVault(addr, vaultId);\n    }\n\n    function setExcludeFromAll(address addr, bool setting) external onlyOwner {\n        excludeFromAll[addr] = setting;\n        emit ExcludeFromAllSet(addr, setting);\n    }\n\n    function setExcludeFromVault(\n        address addr,\n        uint256 vaultId,\n        bool setting\n    ) external onlyOwner {\n        excludeFromVault[addr][vaultId] = setting;\n        emit ExcludeFromVaultSet(addr, vaultId, setting);\n    }\n}\n"
    },
    "src/v2/proxy/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Proxy.sol\";\nimport \"./IBeacon.sol\";\nimport \"../util/Address.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy {\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 private constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(\n            _BEACON_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)\n        );\n        _setBeacon(beacon, data);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address beacon) {\n        bytes32 slot = _BEACON_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            beacon := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation()\n        internal\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return IBeacon(_beacon()).childImplementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        require(\n            Address.isContract(beacon),\n            \"BeaconProxy: beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(beacon).childImplementation()),\n            \"BeaconProxy: beacon implementation is not a contract\"\n        );\n        bytes32 slot = _BEACON_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, beacon)\n        }\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(\n                _implementation(),\n                data,\n                \"BeaconProxy: function call failed\"\n            );\n        }\n    }\n}\n"
    },
    "src/v2/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\n            )\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "src/v2/proxy/Create2BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/Address.sol\";\nimport \"./Proxy.sol\";\nimport \"./IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n * Slightly modified to allow using beacon proxies with Create2.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract Create2BeaconProxy is Proxy {\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 private constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor() payable {\n        assert(\n            _BEACON_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)\n        );\n        _setBeacon(msg.sender, \"\");\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address beacon) {\n        bytes32 slot = _BEACON_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            beacon := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation()\n        internal\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return IBeacon(_beacon()).childImplementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        require(\n            Address.isContract(beacon),\n            \"BeaconProxy: beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(beacon).childImplementation()),\n            \"BeaconProxy: beacon implementation is not a contract\"\n        );\n        bytes32 slot = _BEACON_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, beacon)\n        }\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(\n                _implementation(),\n                data,\n                \"BeaconProxy: function call failed\"\n            );\n        }\n    }\n}\n"
    },
    "src/v2/proxy/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function childImplementation() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function upgradeChildTo(address newImplementation) external;\n}\n"
    },
    "src/v2/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            _initializing || !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "src/v2/proxy/MultiProxyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/Ownable.sol\";\nimport \"../interface/IAdminUpgradeabilityProxy.sol\";\n\ncontract MultiProxyController is Ownable {\n    struct Proxy {\n        string name;\n        IAdminUpgradeabilityProxy proxy;\n        address impl;\n    }\n\n    Proxy[] private proxies;\n\n    event ProxyAdded(string name, address proxy);\n    event ProxyRemoved(uint256 index);\n    event ProxyAdminChanged(uint256 index, address newAdmin);\n\n    constructor(string[] memory _names, address[] memory _proxies) Ownable() {\n        uint256 length = _proxies.length;\n        require(_names.length == length, \"Not equal length\");\n        for (uint256 i; i < length; i++) {\n            addProxy(_names[i], _proxies[i]);\n        }\n    }\n\n    function upgradeProxyTo(uint256 index, address newImpl) public onlyOwner {\n        require(index < proxies.length, \"Out of bounds\");\n        proxies[index].proxy.upgradeTo(newImpl);\n    }\n\n    function changeProxyAdmin(uint256 index, address newAdmin)\n        public\n        onlyOwner\n    {\n        require(index < proxies.length, \"Out of bounds\");\n        proxies[index].proxy.changeAdmin(newAdmin);\n        emit ProxyAdminChanged(index, newAdmin);\n    }\n\n    function addProxy(string memory name, address proxy) public onlyOwner {\n        IAdminUpgradeabilityProxy _proxy = IAdminUpgradeabilityProxy(proxy);\n        proxies.push(Proxy(name, _proxy, address(0)));\n        emit ProxyAdded(name, proxy);\n    }\n\n    function removeProxy(uint256 index) public onlyOwner {\n        // Preferably want to maintain order to reduce chance of mistake.\n        uint256 length = proxies.length;\n        if (index >= length) return;\n\n        for (uint256 i = index; i < length - 1; ++i) {\n            proxies[i] = proxies[i + 1];\n        }\n        proxies.pop();\n        emit ProxyRemoved(index);\n    }\n\n    function changeAllAdmins(address newAdmin) public onlyOwner {\n        uint256 length = proxies.length;\n        for (uint256 i; i < length; ++i) {\n            changeProxyAdmin(i, newAdmin);\n        }\n    }\n\n    function changeAllAdmins(\n        uint256 start,\n        uint256 count,\n        address newAdmin\n    ) public onlyOwner {\n        require(start + count <= proxies.length, \"Out of bounds\");\n        for (uint256 i = start; i < start + count; ++i) {\n            changeProxyAdmin(i, newAdmin);\n        }\n    }\n\n    function getName(uint256 index) public view returns (string memory) {\n        return proxies[index].name;\n    }\n\n    function getAdmin(uint256 index) public view returns (address) {\n        return proxies[index].proxy.admin();\n    }\n\n    function getImpl(uint256 index) public view returns (address) {\n        return proxies[index].proxy.implementation();\n    }\n\n    function getAllProxiesInfo() public view returns (string[] memory) {\n        uint256 length = proxies.length;\n        string[] memory proxyInfos = new string[](length);\n        for (uint256 i; i < length; ++i) {\n            Proxy memory _proxy = proxies[i];\n            proxyInfos[i] = string(\n                abi.encodePacked(uint2str(i), \": \", _proxy.name)\n            );\n        }\n        return proxyInfos;\n    }\n\n    function getAllProxies() public view returns (address[] memory) {\n        uint256 length = proxies.length;\n        address[] memory proxyInfos = new address[](length);\n        for (uint256 i; i < length; ++i) {\n            proxyInfos[i] = address(proxies[i].proxy);\n        }\n        return proxyInfos;\n    }\n\n    function getAllImpls() public view returns (address[] memory) {\n        uint256 length = proxies.length;\n        address[] memory proxyInfos = new address[](length);\n        for (uint256 i; i < length; ++i) {\n            proxyInfos[i] = address(proxies[i].proxy.implementation());\n        }\n        return proxyInfos;\n    }\n\n    function uint2str(uint256 _i)\n        internal\n        pure\n        returns (string memory _uintAsString)\n    {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (_i != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "src/v2/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(\n                gas(),\n                implementation,\n                0,\n                calldatasize(),\n                0,\n                0\n            )\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "src/v2/proxy/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../util/Address.sol\";\nimport \"../util/OwnableUpgradeable.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, OwnableUpgradeable {\n    address private _childImplementation;\n\n    /**\n     * @dev Emitted when the child implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed childImplementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    function __UpgradeableBeacon__init(address childImplementation_)\n        public\n        initializer\n    {\n        _setChildImplementation(childImplementation_);\n    }\n\n    /**\n     * @dev Returns the current child implementation address.\n     */\n    function childImplementation()\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _childImplementation;\n    }\n\n    function implementation() public view virtual override returns (address) {\n        return _childImplementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newChildImplementation` must be a contract.\n     */\n    function upgradeChildTo(address newChildImplementation)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        _setChildImplementation(newChildImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newChildImplementation` must be a contract.\n     */\n    function _setChildImplementation(address newChildImplementation) private {\n        require(\n            Address.isContract(newChildImplementation),\n            \"UpgradeableBeacon: child implementation is not a contract\"\n        );\n        _childImplementation = newChildImplementation;\n        emit Upgraded(newChildImplementation);\n    }\n}\n"
    },
    "src/v2/StakingTokenProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/OwnableUpgradeable.sol\";\nimport \"./token/IERC20Metadata.sol\";\n\n// Author: 0xKiwi.\n\ncontract StakingTokenProvider is OwnableUpgradeable {\n    address public uniLikeExchange;\n    address public defaultPairedToken;\n    string public defaultPrefix;\n    mapping(address => address) public pairedToken;\n    mapping(address => string) public pairedPrefix;\n\n    event NewDefaultPaired(address oldPaired, address newPaired);\n    event NewPairedTokenForVault(\n        address vaultToken,\n        address oldPairedtoken,\n        address newPairedToken\n    );\n\n    // This is an address provder to allow us to abstract out what liquidity\n    // our vault tokens should be paired with.\n    function __StakingTokenProvider_init(\n        address _uniLikeExchange,\n        address _defaultPairedtoken,\n        string memory _defaultPrefix\n    ) public initializer {\n        __Ownable_init();\n        require(_uniLikeExchange != address(0), \"Cannot be address(0)\");\n        require(_defaultPairedtoken != address(0), \"Cannot be address(0)\");\n        uniLikeExchange = _uniLikeExchange;\n        defaultPairedToken = _defaultPairedtoken;\n        defaultPrefix = _defaultPrefix;\n    }\n\n    function setPairedTokenForVaultToken(\n        address _vaultToken,\n        address _newPairedToken,\n        string calldata _newPrefix\n    ) external onlyOwner {\n        require(_newPairedToken != address(0), \"Cannot be address(0)\");\n        emit NewPairedTokenForVault(\n            _vaultToken,\n            pairedToken[_vaultToken],\n            _newPairedToken\n        );\n        pairedToken[_vaultToken] = _newPairedToken;\n        pairedPrefix[_vaultToken] = _newPrefix;\n    }\n\n    function setDefaultPairedToken(\n        address _newDefaultPaired,\n        string calldata _newDefaultPrefix\n    ) external onlyOwner {\n        emit NewDefaultPaired(defaultPairedToken, _newDefaultPaired);\n        defaultPairedToken = _newDefaultPaired;\n        defaultPrefix = _newDefaultPrefix;\n    }\n\n    function stakingTokenForVaultToken(address _vaultToken)\n        external\n        view\n        returns (address)\n    {\n        address _pairedToken = pairedToken[_vaultToken];\n        if (_pairedToken == address(0)) {\n            _pairedToken = defaultPairedToken;\n        }\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\n    }\n\n    function nameForStakingToken(address _vaultToken)\n        external\n        view\n        returns (string memory)\n    {\n        string memory _pairedPrefix = pairedPrefix[_vaultToken];\n        if (bytes(_pairedPrefix).length == 0) {\n            _pairedPrefix = defaultPrefix;\n        }\n        address _pairedToken = pairedToken[_vaultToken];\n        if (_pairedToken == address(0)) {\n            _pairedToken = defaultPairedToken;\n        }\n\n        string memory symbol1 = IERC20Metadata(_vaultToken).symbol();\n        string memory symbol2 = IERC20Metadata(_pairedToken).symbol();\n        return string(abi.encodePacked(_pairedPrefix, symbol1, symbol2));\n    }\n\n    function pairForVaultToken(address _vaultToken, address _pairedToken)\n        external\n        view\n        returns (address)\n    {\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "src/v2/testing/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "src/v2/testing/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "src/v2/testing/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Receiver.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/v2/testing/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}"
    },
    "src/v2/testing/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "src/v2/testing/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "src/v2/testing/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "src/v2/testing/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/v2/testing/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "src/v2/testing/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "src/v2/testing/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/v2/testing/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "src/v2/token/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155HolderUpgradeable is ERC1155ReceiverUpgradeable {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "src/v2/token/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/ERC165Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is\n    ERC165Upgradeable,\n    IERC1155ReceiverUpgradeable\n{\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Upgradeable, IERC165Upgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/v2/token/ERC1155SafeHolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155SafeHolderUpgradeable is ERC1155ReceiverUpgradeable {\n    function onERC1155Received(\n        address /** operator */,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address /** operator */,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "src/v2/token/ERC20FlashMintUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"../interface/IERC3156Upgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\n\n/**\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * Adds the {flashLoan} method, which provides flash loan support at the token\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\n */\nabstract contract ERC20FlashMintUpgradeable is\n    Initializable,\n    ERC20Upgradeable,\n    IERC3156FlashLenderUpgradeable\n{\n    function __ERC20FlashMint_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20FlashMint_init_unchained();\n    }\n\n    function __ERC20FlashMint_init_unchained() internal initializer {}\n\n    bytes32 private constant RETURN_VALUE =\n        keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    /**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amont of token that can be loaned.\n     */\n    function maxFlashLoan(address token)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param amount The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function flashFee(address token, uint256 amount)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(token == address(this), \"ERC20FlashMint: wrong token\");\n        // silence warning about unused variable without the addition of bytecode.\n        amount;\n        return 0;\n    }\n\n    /**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * amount + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param amount The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` is the flash loan was successfull.\n     */\n    function flashLoan(\n        IERC3156FlashBorrowerUpgradeable receiver,\n        address token,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        uint256 fee = flashFee(token, amount);\n        _mint(address(receiver), amount);\n        require(\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) ==\n                RETURN_VALUE,\n            \"ERC20FlashMint: invalid return value\"\n        );\n        uint256 currentAllowance = allowance(address(receiver), address(this));\n        require(\n            currentAllowance >= amount + fee,\n            \"ERC20FlashMint: allowance does not allow refund\"\n        );\n        _approve(\n            address(receiver),\n            address(this),\n            currentAllowance - amount - fee\n        );\n        _burn(address(receiver), amount + fee);\n        return true;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/v2/token/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"../util/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"./IERC20Metadata.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is\n    Initializable,\n    ContextUpgradeable,\n    IERC20Upgradeable,\n    IERC20Metadata\n{\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_)\n        internal\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\n        internal\n        initializer\n    {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function _setMetadata(string memory name_, string memory symbol_) internal {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    uint256[45] private __gap;\n}\n"
    },
    "src/v2/token/ERC721HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721ReceiverUpgradeable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721HolderUpgradeable is IERC721ReceiverUpgradeable {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "src/v2/token/ERC721SafeHolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721ReceiverUpgradeable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721SafeHolderUpgradeable is IERC721ReceiverUpgradeable {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address /** operator */,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "src/v2/token/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "src/v2/token/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 value\n    );\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(\n        address indexed account,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/v2/token/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "src/v2/token/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "src/v2/token/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "src/v2/token/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/v2/token/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IWETH {\n    function balanceOf(address account) external view returns (uint256);\n\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "src/v2/token/TimelockRewardDistributionTokenImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/OwnableUpgradeable.sol\";\nimport \"../util/SafeMathUpgradeable.sol\";\nimport \"../util/SafeMathInt.sol\";\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\n\n/// @title Reward-Paying Token (renamed from Dividend)\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute a target token\n///  to token holders as dividends and allows token holders to withdraw their dividends.\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\ncontract TimelockRewardDistributionTokenImpl is\n    OwnableUpgradeable,\n    ERC20Upgradeable\n{\n    using SafeMathUpgradeable for uint256;\n    using SafeMathInt for int256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public target;\n\n    // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\n    // For more discussion about choosing the value of `magnitude`,\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n    uint256 internal constant magnitude = 2**128;\n\n    uint256 internal magnifiedRewardPerShare;\n\n    // About dividendCorrection:\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\n    //   `dividendOf(_user)` should not be changed,\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\n    mapping(address => int256) internal magnifiedRewardCorrections;\n    mapping(address => uint256) internal withdrawnRewards;\n\n    mapping(address => uint256) internal timelock;\n\n    event Timelocked(address user, uint256 amount, uint256 until);\n\n    function __TimelockRewardDistributionToken_init(\n        IERC20Upgradeable _target,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        __Ownable_init();\n        __ERC20_init(_name, _symbol);\n        target = _target;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            allowance(sender, _msgSender()).sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function mint(address account, uint256 amount) public virtual onlyOwner {\n        _mint(account, amount);\n    }\n\n    function timelockMint(\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) public virtual onlyOwner {\n        uint256 timelockFinish = block.timestamp + timelockLength;\n        timelock[account] = timelockFinish;\n        emit Timelocked(account, amount, timelockFinish);\n        _mint(account, amount);\n    }\n\n    function timelockUntil(address account) public view returns (uint256) {\n        return timelock[account];\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, without deducting from the caller's\n     * allowance. Dangerous.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     */\n    function burnFrom(address account, uint256 amount)\n        public\n        virtual\n        onlyOwner\n    {\n        _burn(account, amount);\n    }\n\n    /// @notice Distributes target to token holders as dividends.\n    /// @dev It reverts if the total supply of tokens is 0.\n    /// It emits the `RewardsDistributed` event if the amount of received target is greater than 0.\n    /// About undistributed target tokens:\n    ///   In each distribution, there is a small amount of target not distributed,\n    ///     the magnified amount of which is\n    ///     `(amount * magnitude) % totalSupply()`.\n    ///   With a well-chosen `magnitude`, the amount of undistributed target\n    ///     (de-magnified) in a distribution can be less than 1 wei.\n    ///   We can actually keep track of the undistributed target in a distribution\n    ///     and try to distribute it in the next distribution,\n    ///     but keeping track of such data on-chain costs much more than\n    ///     the saved target, so we don't do that.\n    function distributeRewards(uint256 amount) external virtual onlyOwner {\n        require(totalSupply() > 0, \"RewardDist: 0 supply\");\n        require(amount > 0, \"RewardDist: 0 amount\");\n\n        // Because we receive the tokens from the staking contract, we assume the tokens have been received.\n        magnifiedRewardPerShare = magnifiedRewardPerShare.add(\n            (amount).mul(magnitude) / totalSupply()\n        );\n\n        emit RewardsDistributed(msg.sender, amount);\n    }\n\n    /// @notice Withdraws the target distributed to the sender.\n    /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn target is greater than 0.\n    function withdrawReward(address user) external onlyOwner {\n        uint256 _withdrawableReward = withdrawableRewardOf(user);\n        if (_withdrawableReward > 0) {\n            withdrawnRewards[user] = withdrawnRewards[user].add(\n                _withdrawableReward\n            );\n            target.safeTransfer(user, _withdrawableReward);\n            emit RewardWithdrawn(user, _withdrawableReward);\n        }\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function dividendOf(address _owner) public view returns (uint256) {\n        return withdrawableRewardOf(_owner);\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function withdrawableRewardOf(address _owner)\n        internal\n        view\n        returns (uint256)\n    {\n        return accumulativeRewardOf(_owner).sub(withdrawnRewards[_owner]);\n    }\n\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\n    function withdrawnRewardOf(address _owner) public view returns (uint256) {\n        return withdrawnRewards[_owner];\n    }\n\n    /// @notice View the amount of dividend in wei that an address has earned in total.\n    /// @dev accumulativeRewardOf(_owner) = withdrawableRewardOf(_owner) + withdrawnRewardOf(_owner)\n    /// = (magnifiedRewardPerShare * balanceOf(_owner) + magnifiedRewardCorrections[_owner]) / magnitude\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\n    function accumulativeRewardOf(address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            magnifiedRewardPerShare\n                .mul(balanceOf(_owner))\n                .toInt256()\n                .add(magnifiedRewardCorrections[_owner])\n                .toUint256Safe() / magnitude;\n    }\n\n    /// @dev Internal function that transfer tokens from one address to another.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param from The address to transfer from.\n    /// @param to The address to transfer to.\n    /// @param value The amount to be transferred.\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(block.timestamp > timelock[from], \"User locked\");\n        super._transfer(from, to, value);\n\n        int256 _magCorrection = magnifiedRewardPerShare.mul(value).toInt256();\n        magnifiedRewardCorrections[from] = magnifiedRewardCorrections[from].add(\n            _magCorrection\n        );\n        magnifiedRewardCorrections[to] = magnifiedRewardCorrections[to].sub(\n            _magCorrection\n        );\n    }\n\n    /// @dev Internal function that mints tokens to an account.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param account The account that will receive the created tokens.\n    /// @param value The amount that will be created.\n    function _mint(address account, uint256 value) internal override {\n        super._mint(account, value);\n\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\n            account\n        ].sub((magnifiedRewardPerShare.mul(value)).toInt256());\n    }\n\n    /// @dev Internal function that burns an amount of the token of a given account.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param account The account whose tokens will be burnt.\n    /// @param value The amount that will be burnt.\n    function _burn(address account, uint256 value) internal override {\n        require(block.timestamp > timelock[account], \"User locked\");\n        super._burn(account, value);\n\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\n            account\n        ].add((magnifiedRewardPerShare.mul(value)).toInt256());\n    }\n\n    /// @dev This event MUST emit when target is distributed to token holders.\n    /// @param from The address which sends target to this contract.\n    /// @param weiAmount The amount of distributed target in wei.\n    event RewardsDistributed(address indexed from, uint256 weiAmount);\n\n    /// @dev This event MUST emit when an address withdraws their dividend.\n    /// @param to The address which withdraws target from this contract.\n    /// @param weiAmount The amount of withdrawn target in wei.\n    event RewardWithdrawn(address indexed to, uint256 weiAmount);\n}\n"
    },
    "src/v2/token/XTokenUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/OwnableUpgradeable.sol\";\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"../token/ERC20Upgradeable.sol\";\n\n// XTokens let uou come in with some vault tokens, and leave with more! The longer you stay, the more vault tokens you get.\n//\n// This contract handles swapping to and from xSushi, SushiSwap's staking token.\ncontract XTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 internal constant MAX_TIMELOCK = 2592000;\n    IERC20Upgradeable public baseToken;\n\n    mapping(address => uint256) internal timelock;\n\n    event Timelocked(address user, uint256 until);\n\n    function __XToken_init(\n        address _baseToken,\n        string memory name,\n        string memory symbol\n    ) public initializer {\n        __Ownable_init();\n        // string memory _name = INFTXInventoryStaking(msg.sender).nftxVaultFactory().vault();\n        __ERC20_init(name, symbol);\n        baseToken = IERC20Upgradeable(_baseToken);\n    }\n\n    // Needs to be called BEFORE new base tokens are deposited.\n    function mintXTokens(\n        address account,\n        uint256 _amount,\n        uint256 timelockLength\n    ) external onlyOwner returns (uint256) {\n        // Gets the amount of Base Token locked in the contract\n        uint256 totalBaseToken = baseToken.balanceOf(address(this));\n        // Gets the amount of xTokens in existence\n        uint256 totalShares = totalSupply();\n        // If no xTokens exist, mint it 1:1 to the amount put in\n        if (totalShares == 0 || totalBaseToken == 0) {\n            _timelockMint(account, _amount, timelockLength);\n            return _amount;\n        }\n        // Calculate and mint the amount of xTokens the base tokens are worth. The ratio will change overtime, as xTokens are burned/minted and base tokens deposited + gained from fees / withdrawn.\n        else {\n            uint256 what = (_amount * totalShares) / totalBaseToken;\n            _timelockMint(account, what, timelockLength);\n            return what;\n        }\n    }\n\n    function burnXTokens(address who, uint256 _share)\n        external\n        onlyOwner\n        returns (uint256)\n    {\n        // Gets the amount of xToken in existence\n        uint256 totalShares = totalSupply();\n        // Calculates the amount of base tokens the xToken is worth\n        uint256 what = (_share * baseToken.balanceOf(address(this))) /\n            totalShares;\n        _burn(who, _share);\n        baseToken.safeTransfer(who, what);\n        return what;\n    }\n\n    function timelockAccount(address account, uint256 timelockLength)\n        public\n        virtual\n        onlyOwner\n    {\n        require(timelockLength < MAX_TIMELOCK, \"Too long lock\");\n        uint256 timelockFinish = block.timestamp + timelockLength;\n        if (timelockFinish > timelock[account]) {\n            timelock[account] = timelockFinish;\n            emit Timelocked(account, timelockFinish);\n        }\n    }\n\n    function _burn(address who, uint256 amount) internal override {\n        require(block.timestamp > timelock[who], \"User locked\");\n        super._burn(who, amount);\n    }\n\n    function timelockUntil(address account) public view returns (uint256) {\n        return timelock[account];\n    }\n\n    function _timelockMint(\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) internal virtual {\n        timelockAccount(account, timelockLength);\n        _mint(account, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(block.timestamp > timelock[from], \"User locked\");\n        super._transfer(from, to, value);\n    }\n}\n"
    },
    "src/v2/util/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/v2/util/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {}\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/v2/util/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(\n            address(this).balance >= amount,\n            \"Create2: insufficient balance\"\n        );\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash)\n        internal\n        view\n        returns (address)\n    {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "src/v2/util/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value)\n        private\n        view\n        returns (bool)\n    {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index)\n        private\n        view\n        returns (bytes32)\n    {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index)\n        internal\n        view\n        returns (bytes32)\n    {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value)\n        internal\n        returns (bool)\n    {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index)\n        internal\n        view\n        returns (uint256)\n    {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "src/v2/util/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n}\n"
    },
    "src/v2/util/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../testing/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "src/v2/util/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"./ContextUpgradeable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "src/v2/util/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\n\ncontract PausableUpgradeable is OwnableUpgradeable {\n    function __Pausable_init() internal initializer {\n        __Ownable_init();\n    }\n\n    event SetPaused(uint256 lockId, bool paused);\n    event SetIsGuardian(address addr, bool isGuardian);\n\n    mapping(address => bool) public isGuardian;\n    mapping(uint256 => bool) public isPaused;\n\n    // 0 : createVault\n    // 1 : mint\n    // 2 : redeem\n    // 3 : swap\n    // 4 : flashloan\n\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\n        require(!isPaused[lockId] || msg.sender == owner(), \"Paused\");\n    }\n\n    function unpause(uint256 lockId) public virtual onlyOwner {\n        isPaused[lockId] = false;\n        emit SetPaused(lockId, false);\n    }\n\n    function pause(uint256 lockId) public virtual {\n        require(isGuardian[msg.sender], \"Can't pause\");\n        isPaused[lockId] = true;\n        emit SetPaused(lockId, true);\n    }\n\n    function setIsGuardian(address addr, bool _isGuardian)\n        public\n        virtual\n        onlyOwner\n    {\n        isGuardian[addr] = _isGuardian;\n        emit SetIsGuardian(addr, _isGuardian);\n    }\n}\n"
    },
    "src/v2/util/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "src/v2/util/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "src/v2/util/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../testing/IERC20.sol\";\nimport \"../testing/IERC20Permit.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(\n            nonceAfter == nonceBefore + 1,\n            \"SafeERC20: permit did not succeed\"\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "src/v2/util/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\nimport \"../token/IERC20Upgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\n        private\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "src/v2/util/SafeMathInt.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title SafeMathInt\n * @dev Math operations with safety checks that revert on error\n * @dev SafeMath adapted for int256\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\n */\nlibrary SafeMathInt {\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when multiplying INT256_MIN with -1\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\n        require(!(a == -2**255 && b == -1) && !(b == -2**255 && a == -1));\n\n        int256 c = a * b;\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing INT256_MIN by -1\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\n        require(!(a == -2**255 && b == -1) && (b > 0));\n\n        return a / b;\n    }\n\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n\n        return a - b;\n    }\n\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n"
    },
    "src/v2/util/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "src/v2/util/SushiHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ncontract SushiHelper {\n\n  /**\n   * @notice Calculates the CREATE2 address for a sushi pair without making any\n   * external calls.\n   * \n   * @return pair Address of our token pair\n   */\n\n  function pairFor(address sushiRouterFactory, address tokenA, address tokenB) external view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouterFactory,\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n\n  /**\n   * @notice Returns sorted token addresses, used to handle return values from pairs sorted in\n   * this order.\n   */\n\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n}\n"
    },
    "src/v2/zaps/NFTXMarketplace0xZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/INFTXVault.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../testing/IERC1155.sol\";\nimport \"../testing/ERC721Holder.sol\";\nimport \"../testing/ERC1155Holder.sol\";\nimport \"../util/Ownable.sol\";\nimport \"../util/ReentrancyGuard.sol\";\nimport \"../util/SafeERC20.sol\";\n\n\n/**\n * @notice A partial WETH interface.\n */\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n}\n\n\n/**\n * @notice Sets up a marketplace zap to interact with the 0x protocol. The 0x contract that\n * is hit later on handles the token conversion based on parameters that are sent from the\n * frontend.\n * \n * @author Twade\n */\n\ncontract NFTXMarketplace0xZap is Ownable, ReentrancyGuard, ERC721Holder, ERC1155Holder {\n\n  using SafeERC20 for IERC20;\n\n  /// @notice Allows zap to be paused\n  bool public paused = false;\n\n  /// @notice Sets our 0x swap target\n  address payable private immutable swapTarget;\n  \n  /// @notice An interface for the WETH contract\n  IWETH public immutable WETH;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXVaultFactory public immutable nftxFactory;\n  address public immutable feeDistributor;\n\n  /// @notice The vToken threshold below which dust is sent to feeDistributor, else back to the user\n  uint256 public dustThreshold;\n\n  /// @notice A mapping of NFTX Vault IDs to their address corresponding vault contract address\n  mapping(uint256 => address) public nftxVaultAddresses;\n\n  // Set a constant address for specific contracts that need special logic\n  address constant CRYPTO_PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n  /// @notice Emitted by the `buyAndRedeem` function.\n  /// @param count The number of tokens affected by the event\n  /// @param ethSpent The amount of ETH spent in the buy\n  /// @param to The user affected by the event\n  event Buy(uint256 count, uint256 ethSpent, address to);\n\n  /// @notice Emitted by the `mintAndSell` functions.\n  /// @param count The number of tokens affected by the event\n  /// @param ethReceived The amount of ETH received in the sell\n  /// @param to The user affected by the event\n  event Sell(uint256 count, uint256 ethReceived, address to);\n\n  /// @notice Emitted by the `buyAndSwap` functions.\n  /// @param count The number of tokens affected by the event\n  /// @param ethSpent The amount of ETH spent in the swap\n  /// @param to The user affected by the event\n  event Swap(uint256 count, uint256 ethSpent, address to);\n\n  /// @notice Emitted when dust is returned after a transaction.\n  /// @param ethAmount Amount of ETH returned to user\n  /// @param vTokenAmount Amount of vToken returned to user\n  /// @param to The user affected by the event\n  event DustReturned(uint256 ethAmount, uint256 vTokenAmount, address to);\n\n\n  /**\n   * @notice Initialises our zap by setting contract addresses onto their\n   * respective interfaces.\n   * \n   * @param _nftxFactory NFTX Vault Factory contract address\n   * @param _WETH WETH contract address\n   * @param _swapTarget The swap target specified by the 0x protocol\n   */\n\n  constructor(address _nftxFactory, address _WETH, address payable _swapTarget, uint256 _dustThreshold) Ownable() ReentrancyGuard() {\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\n    WETH = IWETH(_WETH);\n    swapTarget = _swapTarget;\n    feeDistributor = INFTXVaultFactory(_nftxFactory).feeDistributor();\n    dustThreshold = _dustThreshold;\n  }\n\n\n  /**\n   * @notice Mints tokens from our NFTX vault and sells them on 0x.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of ETH from the tx\n   */\n\n  function mintAndSell721(\n    uint256 vaultId,\n    uint256[] calldata ids,\n    bytes calldata swapCallData,\n    address payable to\n  ) external nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have been provided IDs\n    require(ids.length != 0, 'Must send IDs');\n\n    // Mint our 721s against the vault\n    address vault = _mint721(vaultId, ids);\n\n    // Sell our vault token for WETH\n    uint256 amount = _fillQuote(vault, address(WETH), swapCallData);\n\n    // convert WETH to ETH and send to `to`\n    _transferAllWETH(to);\n\n    // Emit our sale event\n    emit Sell(ids.length, amount, to);\n\n    // Handle vault token dust\n    _transferDust(vault, false);\n  }\n\n\n  /**\n   * @notice Purchases vault tokens from 0x with WETH and then swaps the tokens for\n   * either random or specific token IDs from the vault. The specified recipient will\n   * receive the ERC721 tokens, as well as any WETH dust that is left over from the tx.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn An array of random token IDs to be minted\n   * @param specificIds An array of any specific token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of the token IDs from the tx\n   */\n\n  function buyAndSwap721(\n    uint256 vaultId, \n    uint256[] calldata idsIn, \n    uint256[] calldata specificIds,\n    bytes calldata swapCallData,\n    address payable to\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have been provided IDs\n    require(idsIn.length != 0, 'Must send IDs');\n\n    // Check that we have a message value sent\n    require(msg.value > 0, 'Invalid amount');\n\n    // Wrap ETH into WETH for our contract from the sender\n    WETH.deposit{value: msg.value}();\n\n    // Get our NFTX vault\n    address vault = _vaultAddress(vaultId);\n\n    // Buy enough vault tokens to fuel our buy\n    uint256 amount = _fillQuote(address(WETH), vault, swapCallData);\n\n    // Swap our tokens for the IDs requested\n    _swap721(vaultId, idsIn, specificIds, to);\n    emit Swap(idsIn.length, amount, to);\n\n    // Transfer dust ETH to sender and handle vault token dust\n    _transferDust(vault, true);\n  }\n\n\n  /**\n   * @notice Purchases vault tokens from 0x with WETH and then redeems the tokens for\n   * either random or specific token IDs from the vault. The specified recipient will\n   * receive the ERC721 tokens, as well as any WETH dust that is left over from the tx.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param amount The number of tokens to buy\n   * @param specificIds An array of any specific token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of the token IDs from the tx\n   */\n\n  function buyAndRedeem(\n    uint256 vaultId,\n    uint256 amount,\n    uint256[] calldata specificIds, \n    bytes calldata swapCallData,\n    address payable to\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have an amount specified\n    require(amount > 0, 'Must send amount');\n\n    // Wrap ETH into WETH for our contract from the sender\n    WETH.deposit{value: msg.value}();\n\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Buy vault tokens that will cover our transaction\n    uint256 quoteAmount = _fillQuote(address(WETH), vault, swapCallData);\n\n    // check if received sufficient vault tokens\n    require(quoteAmount >= amount * 1e18, 'Insufficient vault tokens');\n\n    // Redeem token IDs from the vault\n    _redeem(vaultId, amount, specificIds, to);\n    emit Buy(amount, quoteAmount, to);\n\n    // Transfer dust ETH to sender and handle vault token dust\n    _transferDust(vault, true);\n  }\n\n\n  /**\n   * @notice Mints tokens from our NFTX vault and sells them on 0x.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   * @param amounts The number of the corresponding ID to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of ETH from the tx\n   */\n\n  function mintAndSell1155(\n    uint256 vaultId,\n    uint256[] calldata ids,\n    uint256[] calldata amounts,\n    bytes calldata swapCallData,\n    address payable to\n  ) external nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Get a sum of the total number of IDs we have sent up, and validate that\n    // the data sent through is valid.\n    (, uint totalAmount) = _validate1155Ids(ids, amounts);\n\n    // Mint our 1155s against the vault\n    address vault = _mint1155(vaultId, ids, amounts);\n\n    // Sell our vault token for WETH\n    uint256 amount = _fillQuote(vault, address(WETH), swapCallData);\n\n    // convert WETH to ETH and send to `to`\n    _transferAllWETH(to);\n\n    // Emit our sale event\n    emit Sell(totalAmount, amount, to);\n\n    // Handle vault token dust\n    _transferDust(vault, false);\n  }\n\n\n  /**\n   * @notice Purchases vault tokens from 0x with WETH and then swaps the tokens for\n   * either random or specific token IDs from the vault. The specified recipient will\n   * receive the ERC1155 tokens, as well as any WETH dust that is left over from the tx.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn An array of random token IDs to be minted\n   * @param specificIds An array of any specific token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of token IDs from the tx\n   */\n\n  function buyAndSwap1155(\n    uint256 vaultId, \n    uint256[] calldata idsIn,\n    uint256[] calldata amounts,\n    uint256[] calldata specificIds,\n    bytes calldata swapCallData,\n    address payable to\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have a message value sent\n    require(msg.value > 0, 'Invalid amount');\n\n    // Get a sum of the total number of IDs we have sent up, and validate that\n    // the data sent through is valid.\n    (, uint totalAmount) = _validate1155Ids(idsIn, amounts);\n\n    // Wrap ETH into WETH for our contract from the sender\n    WETH.deposit{value: msg.value}();\n\n    // Get our NFTX vault\n    address vault = _vaultAddress(vaultId);\n\n    // Buy enough vault tokens to fuel our buy\n    uint256 amount = _fillQuote(address(WETH), vault, swapCallData);\n\n    // Swap our tokens for the IDs requested\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\n    emit Swap(totalAmount, amount, to);\n\n    // Transfer dust ETH to sender and handle vault token dust\n    _transferDust(vault, true);\n  }\n\n\n  /**\n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   */\n\n  function _mint721(uint256 vaultId, uint256[] memory ids) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens from the message sender to the vault\n    address assetAddress = INFTXVault(vault).assetAddress();\n    uint256 length = ids.length;\n\n    for (uint256 i; i < length;) {\n      transferFromERC721(assetAddress, ids[i], vault);\n\n      if (assetAddress == CRYPTO_PUNKS) {\n        _approveERC721(assetAddress, ids[i], vault);\n      }\n\n      unchecked { ++i; }\n    }\n\n    // Mint our tokens from the vault to this contract\n    uint256[] memory emptyIds;\n    INFTXVault(vault).mint(ids, emptyIds);\n\n    return vault;\n  }\n\n\n  /**\n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   * @param amounts An array of amounts whose indexes map to the ids array\n   */\n\n  function _mint1155(uint256 vaultId, uint256[] memory ids, uint256[] memory amounts) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens from the message sender to the vault\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \"\");\n    IERC1155(assetAddress).setApprovalForAll(vault, true);\n\n    // Mint our tokens from the vault to this contract\n    INFTXVault(vault).mint(ids, amounts);\n\n    return vault;\n  }\n\n\n  /**\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn An array of token IDs to be minted\n   * @param idsOut An array of token IDs to be redeemed\n   * @param to The recipient of the idsOut from the tx\n   */\n\n  function _swap721(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens to zap\n    address assetAddress = INFTXVault(vault).assetAddress();\n    uint256 length = idsIn.length;\n\n    for (uint256 i; i < length;) {\n      transferFromERC721(assetAddress, idsIn[i], vault);\n\n      if (assetAddress == CRYPTO_PUNKS) {\n        _approveERC721(assetAddress, idsIn[i], vault);\n      }\n\n      unchecked { ++i; }\n    }\n\n    // Swap our tokens\n    uint256[] memory emptyIds;\n    INFTXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\n\n    return vault;\n  }\n\n\n  /**\n   * @notice Swaps 1155 tokens, transferring them from the recipient to this contract, and\n   * then sending them to the NFTX vault, that sends them to the recipient.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn The IDs owned by the sender to be swapped\n   * @param amounts The number of each corresponding ID being swapped\n   * @param idsOut The requested IDs to be swapped for\n   * @param to The recipient of the swapped tokens\n   * \n   * @return address The address of the NFTX vault\n   */\n\n  function _swap1155(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory amounts,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155(assetAddress).safeBatchTransferFrom(msg.sender, address(this), idsIn, amounts, \"\");\n    IERC1155(assetAddress).setApprovalForAll(vault, true);\n    INFTXVault(vault).swapTo(idsIn, amounts, idsOut, to);\n    \n    return vault;\n  }\n\n\n  /**\n   * @notice Redeems tokens from a vault to a recipient.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param amount The number of tokens to be redeemed\n   * @param specificIds Specified token IDs if desired, otherwise will be _random_\n   * @param to The recipient of the token\n   */\n\n  function _redeem(uint256 vaultId, uint256 amount, uint256[] memory specificIds, address to) internal {\n    INFTXVault(_vaultAddress(vaultId)).redeemTo(amount, specificIds, to);\n  }\n\n\n  /**\n   * @notice Transfers our ERC721 tokens to a specified recipient.\n   * \n   * @param assetAddr Address of the asset being transferred\n   * @param tokenId The ID of the token being transferred\n   * @param to The address the token is being transferred to\n   */\n\n  function transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    bytes memory data;\n\n    if (assetAddr == CRYPTO_PUNKS) {\n      // Fix here for frontrun attack.\n      bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n      (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n      (address nftOwner) = abi.decode(result, (address));\n      require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\n      data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n      // We push to the vault to avoid an unneeded transfer.\n      data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n\n  /**\n   * @notice Approves our ERC721 tokens to be transferred.\n   * \n   * @dev This is only required to provide special logic for Cryptopunks.\n   * \n   * @param assetAddr Address of the asset being transferred\n   * @param tokenId The ID of the token being transferred\n   * @param to The address the token is being transferred to\n   */\n\n  function _approveERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    if (assetAddr != CRYPTO_PUNKS) {\n      return;\n    }\n\n    bytes memory data = abi.encodeWithSignature(\"offerPunkForSaleToAddress(uint256,uint256,address)\", tokenId, 0, to);\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n\n  /**\n   * @notice Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\n   * \n   * @dev Must attach ETH equal to the `value` field from the API response.\n   * \n   * @param sellToken The `sellTokenAddress` field from the API response\n   * @param buyToken The `buyTokenAddress` field from the API response\n   * @param swapCallData The `data` field from the API response\n   */\n\n  function _fillQuote(\n    address sellToken,\n    address buyToken,\n    bytes calldata swapCallData\n  ) internal returns (uint256) {\n    // Track our balance of the buyToken to determine how much we've bought.\n    uint256 boughtAmount = IERC20(buyToken).balanceOf(address(this));\n\n    // Give `swapTarget` an infinite allowance to spend this contract's `sellToken`.\n    // Note that for some tokens (e.g., USDT, KNC), you must first reset any existing\n    // allowance to 0 before being able to update it.\n    require(IERC20(sellToken).approve(swapTarget, type(uint256).max), 'Unable to approve contract');\n\n    // Call the encoded swap function call on the contract at `swapTarget`\n    (bool success,) = swapTarget.call(swapCallData);\n    require(success, 'SWAP_CALL_FAILED');\n\n    // Use our current buyToken balance to determine how much we've bought.\n    return IERC20(buyToken).balanceOf(address(this)) - boughtAmount;\n  }\n\n\n  /**\n   * @notice Transfers remaining ETH to msg.sender.\n   * And transfers vault token dust to feeDistributor if below dustThreshold, else to msg.sender \n   * \n   * @param vault Address of the vault token\n   * @param isWETHDust Checks and transfers WETH dust if boolean is true\n   */\n\n  function _transferDust(address vault, bool isWETHDust) internal {\n    uint256 remaining;\n    if(isWETHDust) {\n      remaining = _transferAllWETH(msg.sender);\n    }\n\n    uint256 dustBalance = IERC20(vault).balanceOf(address(this));\n    address dustRecipient;\n    if(dustBalance > 0) {\n      if (dustBalance > dustThreshold) {\n        dustRecipient = msg.sender;\n      } else {\n        dustRecipient = feeDistributor;\n      }\n\n      IERC20(vault).transfer(dustRecipient, dustBalance);\n    }\n\n    emit DustReturned(remaining, dustBalance, dustRecipient);\n  }\n\n  function _transferAllWETH(address recipient) internal returns(uint256 amount) {\n    amount = WETH.balanceOf(address(this));\n    if (amount > 0) {\n      // Unwrap our WETH into ETH and transfer it to the recipient\n      WETH.withdraw(amount);\n      (bool success, ) = payable(recipient).call{value: amount}(\"\");\n      require(success, \"Unable to send unwrapped WETH\");\n    }\n  }\n\n\n  /**\n   * @notice Allows 1155 IDs and amounts to be validated.\n   * \n   * @param ids The IDs of the 1155 tokens.\n   * @param amounts The number of each corresponding token to process.\n   * \n   * @return totalIds The number of different IDs being sent.\n   * @return totalAmount The total number of IDs being processed.\n   */\n\n  function _validate1155Ids(\n    uint[] calldata ids,\n    uint[] calldata amounts\n  ) internal pure returns (\n    uint totalIds,\n    uint totalAmount\n  ) {\n    totalIds = ids.length;\n\n    // Check that we have been provided IDs\n    require(totalIds != 0, 'Must send IDs');\n    require(totalIds <= amounts.length, 'Must define amounts against IDs');\n\n    // Sum the amounts for our emitted events\n    for (uint i; i < totalIds;) {\n      require(amounts[i] > 0, 'Invalid 1155 amount');\n\n      unchecked {\n        totalAmount += amounts[i];\n        ++i;\n      }\n    }\n  }\n\n\n  /**\n   * @notice Maps a cached NFTX vault address against a vault ID.\n   * \n   * @param vaultId The ID of the NFTX vault\n   */\n\n  function _vaultAddress(uint256 vaultId) internal returns (address) {\n    if (nftxVaultAddresses[vaultId] == address(0)) {\n      nftxVaultAddresses[vaultId] = nftxFactory.vault(vaultId);\n    }\n\n    require(nftxVaultAddresses[vaultId] != address(0), 'Vault does not exist');\n\n    return nftxVaultAddresses[vaultId];\n  }\n\n\n  /**\n   * @notice Allows our zap to be paused to prevent any processing.\n   * \n   * @param _paused New pause state\n   */\n\n  function pause(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  /**\n   * @notice Allows owner to modify dustThreshold value\n   * \n   * @param _dustThreshold New dustThreshold\n   */\n\n  function setDustThreshold(uint256 _dustThreshold) external onlyOwner {\n    dustThreshold = _dustThreshold;\n  }\n\n\n  /**\n   * @notice Allows our owner to withdraw and tokens in the contract.\n   * \n   * @param token The address of the token to be rescued\n   */\n\n  function rescue(address token) external onlyOwner {\n    if (token == address(0)) {\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n      require(success, \"Address: unable to send value\");\n    } else {\n      IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n    }\n  }\n\n\n  /**\n   * @notice A modifier that only allows the owner to interact with the function\n   * if the contract is paused. If the contract is not paused then anyone can\n   * interact with the function.\n   */\n\n  modifier onlyOwnerIfPaused() {\n    require(!paused || msg.sender == owner(), \"Zap is paused\");\n    _;\n  }\n\n\n  /**\n   * @notice Allows our contract to receive any assets.\n   */\n\n  receive() external payable {}\n\n}"
    },
    "src/v2/zaps/NFTXMarketplaceZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"../interface/INFTXLPStaking.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../interface/INFTXFeeDistributor.sol\";\nimport \"../interface/INFTXVault.sol\";\nimport \"../interface/IUniswapV2Router01.sol\";\nimport \"../token/ERC721HolderUpgradeable.sol\";\nimport \"../token/ERC1155HolderUpgradeable.sol\";\nimport \"../token/IERC1155Upgradeable.sol\";\n\n// Authors: @0xKiwi_.\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n\n    function balanceOf(address to) external view returns (uint256);\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract NFTXMarketplaceZap is\n    Ownable,\n    ReentrancyGuard,\n    ERC721HolderUpgradeable,\n    ERC1155HolderUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IWETH public immutable WETH;\n    INFTXLPStaking public immutable lpStaking;\n    INFTXVaultFactory public immutable nftxFactory;\n    IUniswapV2Router01 public immutable sushiRouter;\n\n    uint256 constant BASE = 1e18;\n\n    event Buy(uint256 count, uint256 ethSpent, address to);\n    event Sell(uint256 count, uint256 ethReceived, address to);\n    event Swap(uint256 count, uint256 ethSpent, address to);\n\n    constructor(address _nftxFactory, address _sushiRouter)\n        Ownable()\n        ReentrancyGuard()\n    {\n        nftxFactory = INFTXVaultFactory(_nftxFactory);\n        // TODO: remove lpStaking for V3\n        lpStaking = INFTXLPStaking(\n            INFTXFeeDistributor(\n                INFTXVaultFactory(_nftxFactory).feeDistributor()\n            ).lpStaking()\n        );\n        sushiRouter = IUniswapV2Router01(_sushiRouter);\n        WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\n        IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH()))\n            .safeApprove(_sushiRouter, type(uint256).max);\n    }\n\n    function mintAndSell721(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minEthOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n        uint256[] memory amounts = _sellVaultTokenETH(\n            vault,\n            minEthOut,\n            vaultBalance,\n            path,\n            to\n        );\n        emit Sell(ids.length, amounts[amounts.length - 1], to);\n    }\n\n    function mintAndSell721WETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minWethOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n        uint256[] memory amounts = _sellVaultTokenWETH(\n            vault,\n            minWethOut,\n            vaultBalance,\n            path,\n            to\n        );\n        emit Sell(ids.length, amounts[amounts.length - 1], to);\n    }\n\n    function buyAndSwap721(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata specificIds,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(idsIn.length != 0);\n        WETH.deposit{value: msg.value}();\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (idsIn.length - specificIds.length));\n        uint256[] memory amounts = _buyVaultToken(redeemFees, msg.value, path);\n        _swap721(vaultId, idsIn, specificIds, to);\n\n        emit Swap(idsIn.length, amounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        WETH.withdraw(remaining);\n        (bool success, ) = payable(to).call{value: remaining}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function buyAndSwap721WETH(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata specificIds,\n        uint256 maxWethIn,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(idsIn.length != 0);\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            maxWethIn\n        );\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (idsIn.length - specificIds.length));\n        uint256[] memory amounts = _buyVaultToken(redeemFees, maxWethIn, path);\n        _swap721(vaultId, idsIn, specificIds, to);\n\n        emit Swap(idsIn.length, amounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n    }\n\n    function buyAndSwap1155(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata amounts,\n        uint256[] calldata specificIds,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        uint256 length = idsIn.length;\n        require(length != 0);\n        WETH.deposit{value: msg.value}();\n        uint256 count;\n        for (uint256 i; i < length; ++i) {\n            uint256 amount = amounts[i];\n            require(amount > 0, \"Transferring < 1\");\n            count += amount;\n        }\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (count - specificIds.length));\n        uint256[] memory swapAmounts = _buyVaultToken(\n            redeemFees,\n            msg.value,\n            path\n        );\n        _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n        emit Swap(count, swapAmounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        WETH.withdraw(remaining);\n        (bool success, ) = payable(to).call{value: remaining}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function buyAndSwap1155WETH(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata amounts,\n        uint256[] calldata specificIds,\n        uint256 maxWethIn,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(idsIn.length != 0);\n        uint256 count;\n        for (uint256 i = 0; i < idsIn.length; i++) {\n            uint256 amount = amounts[i];\n            require(amount > 0, \"Transferring < 1\");\n            count += amount;\n        }\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (count - specificIds.length));\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            maxWethIn\n        );\n        uint256[] memory swapAmounts = _buyVaultToken(\n            redeemFees,\n            maxWethIn,\n            path\n        );\n        _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n        emit Swap(count, swapAmounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        WETH.transfer(to, remaining);\n    }\n\n    function buyAndRedeem(\n        uint256 vaultId,\n        uint256 amount,\n        uint256[] calldata specificIds,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(amount != 0);\n        WETH.deposit{value: msg.value}();\n        (, uint256 randomRedeemFee, uint256 targetRedeemFee, , ) = nftxFactory\n            .vaultFees(vaultId);\n        uint256 totalFee = (targetRedeemFee * specificIds.length) +\n            (randomRedeemFee * (amount - specificIds.length));\n        uint256[] memory amounts = _buyVaultToken(\n            (amount * BASE) + totalFee,\n            msg.value,\n            path\n        );\n        _redeem(vaultId, amount, specificIds, to);\n\n        emit Buy(amount, amounts[0], to);\n\n        uint256 remaining = WETH.balanceOf(address(this));\n        if (remaining != 0) {\n            WETH.withdraw(remaining);\n            (bool success, ) = payable(to).call{value: remaining}(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        }\n    }\n\n    function buyAndRedeemWETH(\n        uint256 vaultId,\n        uint256 amount,\n        uint256[] calldata specificIds,\n        uint256 maxWethIn,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(amount != 0);\n        uint256 totalFee;\n        {\n            (\n                ,\n                uint256 randomRedeemFee,\n                uint256 targetRedeemFee,\n                ,\n\n            ) = nftxFactory.vaultFees(vaultId);\n            totalFee =\n                (targetRedeemFee * specificIds.length) +\n                (randomRedeemFee * (amount - specificIds.length));\n        }\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            maxWethIn\n        );\n        uint256[] memory amounts = _buyVaultToken(\n            (amount * BASE) + totalFee,\n            maxWethIn,\n            path\n        );\n        _redeem(vaultId, amount, specificIds, to);\n        emit Buy(amount, amounts[0], to);\n\n        uint256 remaining = WETH.balanceOf(address(this));\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n    }\n\n    function mintAndSell1155(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        uint256 minWethOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultTokenBalance) = _mint1155(\n            vaultId,\n            ids,\n            amounts\n        );\n        uint256[] memory uniAmounts = _sellVaultTokenETH(\n            vault,\n            minWethOut,\n            vaultTokenBalance,\n            path,\n            to\n        );\n\n        uint256 count;\n        uint256 length = ids.length;\n        for (uint256 i; i < length; ++i) {\n            count += amounts[i];\n        }\n        emit Sell(count, uniAmounts[uniAmounts.length - 1], to);\n    }\n\n    function mintAndSell1155WETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        uint256 minWethOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultTokenBalance) = _mint1155(\n            vaultId,\n            ids,\n            amounts\n        );\n        _sellVaultTokenWETH(vault, minWethOut, vaultTokenBalance, path, to);\n\n        uint256 count;\n        uint256 length = ids.length;\n        for (uint256 i; i < length; ++i) {\n            count += amounts[i];\n        }\n        emit Sell(count, amounts[amounts.length - 1], to);\n    }\n\n    function _mint721(uint256 vaultId, uint256[] memory ids)\n        internal\n        returns (address, uint256)\n    {\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        uint256 length = ids.length;\n        for (uint256 i; i < length; ++i) {\n            transferFromERC721(assetAddress, ids[i], vault);\n            approveERC721(assetAddress, vault, ids[i]);\n        }\n        uint256[] memory emptyIds;\n        INFTXVault(vault).mint(ids, emptyIds);\n        uint256 count = ids.length;\n        uint256 balance = (count * BASE) -\n            (count * INFTXVault(vault).mintFee());\n\n        return (vault, balance);\n    }\n\n    function _swap721(\n        uint256 vaultId,\n        uint256[] memory idsIn,\n        uint256[] memory idsOut,\n        address to\n    ) internal returns (address) {\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        uint256 length = idsIn.length;\n        for (uint256 i; i < length; ++i) {\n            transferFromERC721(assetAddress, idsIn[i], vault);\n            approveERC721(assetAddress, vault, idsIn[i]);\n        }\n        uint256[] memory emptyIds;\n        INFTXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\n\n        return (vault);\n    }\n\n    function _swap1155(\n        uint256 vaultId,\n        uint256[] memory idsIn,\n        uint256[] memory amounts,\n        uint256[] memory idsOut,\n        address to\n    ) internal returns (address) {\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            idsIn,\n            amounts,\n            \"\"\n        );\n        IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n        INFTXVault(vault).swapTo(idsIn, amounts, idsOut, to);\n\n        return (vault);\n    }\n\n    function _redeem(\n        uint256 vaultId,\n        uint256 amount,\n        uint256[] memory specificIds,\n        address to\n    ) internal {\n        address vault = nftxFactory.vault(vaultId);\n        INFTXVault(vault).redeemTo(amount, specificIds, to);\n    }\n\n    function _mint1155(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal returns (address, uint256) {\n        address vault = nftxFactory.vault(vaultId);\n        require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            ids,\n            amounts,\n            \"\"\n        );\n        IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n\n        uint256 count = INFTXVault(vault).mint(ids, amounts);\n        uint256 balance = (count * BASE) -\n            (INFTXVault(vault).mintFee() * count);\n\n        return (vault, balance);\n    }\n\n    function _buyVaultToken(\n        uint256 minTokenOut,\n        uint256 maxWethIn,\n        address[] calldata path\n    ) internal returns (uint256[] memory) {\n        uint256[] memory amounts = sushiRouter.swapTokensForExactTokens(\n            minTokenOut,\n            maxWethIn,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        return amounts;\n    }\n\n    function _sellVaultTokenWETH(\n        address vault,\n        uint256 minWethOut,\n        uint256 maxTokenIn,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory) {\n        IERC20Upgradeable(vault).safeApprove(address(sushiRouter), maxTokenIn);\n        uint256[] memory amounts = sushiRouter.swapExactTokensForTokens(\n            maxTokenIn,\n            minWethOut,\n            path,\n            to,\n            block.timestamp\n        );\n\n        return amounts;\n    }\n\n    function _sellVaultTokenETH(\n        address vault,\n        uint256 minEthOut,\n        uint256 maxTokenIn,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory) {\n        IERC20Upgradeable(vault).safeApprove(address(sushiRouter), maxTokenIn);\n        uint256[] memory amounts = sushiRouter.swapExactTokensForETH(\n            maxTokenIn,\n            minEthOut,\n            path,\n            to,\n            block.timestamp\n        );\n\n        return amounts;\n    }\n\n    function transferFromERC721(\n        address assetAddr,\n        uint256 tokenId,\n        address to\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            // Fix here for frontrun attack. Added in v1.0.2.\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                tokenId\n            );\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\n                .staticcall(punkIndexToAddress);\n            address nftOwner = abi.decode(result, (address));\n            require(\n                checkSuccess && nftOwner == msg.sender,\n                \"Not the NFT owner\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n        } else {\n            // Default.\n            // We push to the vault to avoid an unneeded transfer.\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    function approveERC721(\n        address assetAddr,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // // Cryptokitties.\n            // data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\n            // No longer needed to approve with pushing.\n            return;\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            data = abi.encodeWithSignature(\n                \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n                tokenId,\n                0,\n                to\n            );\n        } else {\n            // No longer needed to approve with pushing.\n            return;\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address tokenA, address tokenB)\n        internal\n        view\n        returns (address pair)\n    {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            sushiRouter.factory(),\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    function rescue(address token) external onlyOwner {\n        if (token == address(0)) {\n            (bool success, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        } else {\n            IERC20Upgradeable(token).safeTransfer(\n                msg.sender,\n                IERC20Upgradeable(token).balanceOf(address(this))\n            );\n        }\n    }\n\n    receive() external payable {\n        require(msg.sender == address(WETH), \"Only WETH\");\n    }\n}\n"
    },
    "src/v2/zaps/NFTXStakingZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"../interface/INFTXLPStaking.sol\";\nimport \"../interface/INFTXInventoryStaking.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../interface/INFTXVault.sol\";\nimport \"../interface/INFTXSimpleFeeDistributor.sol\";\nimport \"../interface/IUniswapV2Router01.sol\";\nimport \"../interface/ITimelockExcludeList.sol\";\nimport \"../token/ERC721HolderUpgradeable.sol\";\nimport \"../token/ERC1155HolderUpgradeable.sol\";\nimport \"../token/IERC1155Upgradeable.sol\";\n\n// Authors: @0xKiwi_.\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract NFTXStakingZap is\n    Ownable,\n    ReentrancyGuard,\n    ERC721HolderUpgradeable,\n    ERC1155HolderUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IWETH public immutable WETH;\n    INFTXLPStaking public lpStaking;\n    INFTXInventoryStaking public inventoryStaking;\n    INFTXVaultFactory public immutable nftxFactory;\n    IUniswapV2Router01 public immutable sushiRouter;\n    ITimelockExcludeList public timelockExcludeList;\n\n    uint256 public lpLockTime = 48 hours;\n    uint256 public inventoryLockTime = 7 days;\n    uint256 constant BASE = 1e18;\n\n    event UserStaked(\n        uint256 vaultId,\n        uint256 count,\n        uint256 lpBalance,\n        uint256 timelockUntil,\n        address sender\n    );\n\n    constructor(address _nftxFactory, address _sushiRouter)\n        Ownable()\n        ReentrancyGuard()\n    {\n        nftxFactory = INFTXVaultFactory(_nftxFactory);\n        sushiRouter = IUniswapV2Router01(_sushiRouter);\n        WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\n        IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH()))\n            .safeApprove(_sushiRouter, type(uint256).max);\n    }\n\n    function assignStakingContracts() public {\n        require(\n            address(lpStaking) == address(0) ||\n                address(inventoryStaking) == address(0),\n            \"not zero\"\n        );\n        // TODO: remove lpStaking for V3\n        lpStaking = INFTXLPStaking(\n            INFTXSimpleFeeDistributor(\n                INFTXVaultFactory(nftxFactory).feeDistributor()\n            ).lpStaking()\n        );\n        inventoryStaking = INFTXInventoryStaking(\n            INFTXSimpleFeeDistributor(\n                INFTXVaultFactory(nftxFactory).feeDistributor()\n            ).inventoryStaking()\n        );\n    }\n\n    function setTimelockExcludeList(address addr) external onlyOwner {\n        timelockExcludeList = ITimelockExcludeList(addr);\n    }\n\n    function setLPLockTime(uint256 newLPLockTime) external onlyOwner {\n        require(newLPLockTime <= 7 days, \"Lock too long\");\n        lpLockTime = newLPLockTime;\n    }\n\n    function setInventoryLockTime(uint256 newInventoryLockTime)\n        external\n        onlyOwner\n    {\n        require(newInventoryLockTime <= 14 days, \"Lock too long\");\n        inventoryLockTime = newInventoryLockTime;\n    }\n\n    function isAddressTimelockExcluded(address addr, uint256 vaultId)\n        public\n        view\n        returns (bool)\n    {\n        if (address(timelockExcludeList) == address(0)) {\n            return false;\n        } else {\n            return timelockExcludeList.isExcluded(addr, vaultId);\n        }\n    }\n\n    function provideInventory721(uint256 vaultId, uint256[] calldata tokenIds)\n        external\n    {\n        uint256 count = tokenIds.length;\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : inventoryLockTime;\n        inventoryStaking.timelockMintFor(\n            vaultId,\n            count * BASE,\n            msg.sender,\n            timelockTime\n        );\n        address xToken = inventoryStaking.vaultXToken(vaultId);\n        uint256 oldBal = IERC20Upgradeable(vault).balanceOf(xToken);\n        uint256[] memory amounts = new uint256[](0);\n        address assetAddress = vault.assetAddress();\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            transferFromERC721(assetAddress, tokenIds[i], address(vault));\n            approveERC721(assetAddress, address(vault), tokenIds[i]);\n        }\n        vault.mintTo(tokenIds, amounts, address(xToken));\n        uint256 newBal = IERC20Upgradeable(vault).balanceOf(xToken);\n        require(newBal == oldBal + count * BASE, \"Incorrect vtokens minted\");\n        uint256 lockEndTime = block.timestamp + timelockTime;\n        emit UserStaked(vaultId, tokenIds.length, 0, lockEndTime, msg.sender);\n    }\n\n    function provideInventory1155(\n        uint256 vaultId,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) external {\n        uint256 length = tokenIds.length;\n        require(length == amounts.length, \"Not equal length\");\n        uint256 count;\n        for (uint256 i; i < length; ++i) {\n            count += amounts[i];\n        }\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : inventoryLockTime;\n        inventoryStaking.timelockMintFor(\n            vaultId,\n            count * BASE,\n            msg.sender,\n            timelockTime\n        );\n        address xToken = inventoryStaking.vaultXToken(vaultId);\n        uint256 oldBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\n        IERC1155Upgradeable nft = IERC1155Upgradeable(vault.assetAddress());\n        nft.safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            tokenIds,\n            amounts,\n            \"\"\n        );\n        nft.setApprovalForAll(address(vault), true);\n        vault.mintTo(tokenIds, amounts, address(xToken));\n        uint256 newBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\n        require(newBal == oldBal + count * BASE, \"Incorrect vtokens minted\");\n        uint256 lockEndTime = block.timestamp + timelockTime;\n        emit UserStaked(vaultId, tokenIds.length, 0, lockEndTime, msg.sender);\n    }\n\n    function addLiquidity721ETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minWethIn\n    ) external payable returns (uint256) {\n        return addLiquidity721ETHTo(vaultId, ids, minWethIn, msg.sender);\n    }\n\n    function addLiquidity721ETHTo(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256 minWethIn,\n        address to\n    ) public payable nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        WETH.deposit{value: msg.value}();\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(\n            vaultId,\n            ids,\n            minWethIn,\n            msg.value,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = msg.value - amountEth;\n        if (remaining != 0) {\n            WETH.withdraw(remaining);\n            (bool success, ) = payable(to).call{value: remaining}(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        }\n\n        return liquidity;\n    }\n\n    function addLiquidity1155ETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        uint256 minEthIn\n    ) external payable returns (uint256) {\n        return\n            addLiquidity1155ETHTo(vaultId, ids, amounts, minEthIn, msg.sender);\n    }\n\n    function addLiquidity1155ETHTo(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minEthIn,\n        address to\n    ) public payable nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        WETH.deposit{value: msg.value}();\n        // Finish this.\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(\n            vaultId,\n            ids,\n            amounts,\n            minEthIn,\n            msg.value,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = msg.value - amountEth;\n        if (remaining != 0) {\n            WETH.withdraw(remaining);\n            (bool success, ) = payable(to).call{value: remaining}(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        }\n\n        return liquidity;\n    }\n\n    function addLiquidity721(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minWethIn,\n        uint256 wethIn\n    ) external returns (uint256) {\n        return addLiquidity721To(vaultId, ids, minWethIn, wethIn, msg.sender);\n    }\n\n    function addLiquidity721To(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    ) public nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            wethIn\n        );\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(\n            vaultId,\n            ids,\n            minWethIn,\n            wethIn,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = wethIn - amountEth;\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n\n        return liquidity;\n    }\n\n    function addLiquidity1155(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minWethIn,\n        uint256 wethIn\n    ) public returns (uint256) {\n        return\n            addLiquidity1155To(\n                vaultId,\n                ids,\n                amounts,\n                minWethIn,\n                wethIn,\n                msg.sender\n            );\n    }\n\n    function addLiquidity1155To(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    ) public nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            wethIn\n        );\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(\n            vaultId,\n            ids,\n            amounts,\n            minWethIn,\n            wethIn,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = wethIn - amountEth;\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n\n        return liquidity;\n    }\n\n    function _addLiquidity721WETH(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(nftxFactory.excludedFromFees(address(this)));\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        uint256 length = ids.length;\n        for (uint256 i; i < length; i++) {\n            transferFromERC721(assetAddress, ids[i], vault);\n            approveERC721(assetAddress, vault, ids[i]);\n        }\n        uint256[] memory emptyIds;\n        INFTXVault(vault).mint(ids, emptyIds);\n        uint256 balance = length * BASE; // We should not be experiencing fees.\n\n        return\n            _addLiquidityAndLock(\n                vaultId,\n                vault,\n                balance,\n                minWethIn,\n                wethIn,\n                to\n            );\n    }\n\n    function _addLiquidity1155WETH(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(nftxFactory.excludedFromFees(address(this)));\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            ids,\n            amounts,\n            \"\"\n        );\n        IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n\n        uint256 count = INFTXVault(vault).mint(ids, amounts);\n        uint256 balance = (count * BASE); // We should not be experiencing fees.\n\n        return\n            _addLiquidityAndLock(\n                vaultId,\n                vault,\n                balance,\n                minWethIn,\n                wethIn,\n                to\n            );\n    }\n\n    function _addLiquidityAndLock(\n        uint256 vaultId,\n        address vault,\n        uint256 minTokenIn,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        // Provide liquidity.\n        IERC20Upgradeable(vault).safeApprove(address(sushiRouter), minTokenIn);\n        (\n            uint256 amountToken,\n            uint256 amountEth,\n            uint256 liquidity\n        ) = sushiRouter.addLiquidity(\n                address(vault),\n                address(WETH),\n                minTokenIn,\n                wethIn,\n                minTokenIn,\n                minWethIn,\n                address(this),\n                block.timestamp\n            );\n\n        // Stake in LP rewards contract\n        IERC20Upgradeable(pairFor(vault, address(WETH))).safeApprove(\n            address(lpStaking),\n            liquidity\n        );\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : lpLockTime;\n        lpStaking.timelockDepositFor(vaultId, to, liquidity, timelockTime);\n\n        uint256 remaining = minTokenIn - amountToken;\n        if (remaining != 0) {\n            IERC20Upgradeable(vault).safeTransfer(to, remaining);\n        }\n\n        uint256 lockEndTime = block.timestamp + timelockTime;\n        emit UserStaked(vaultId, minTokenIn, liquidity, lockEndTime, to);\n        return (amountToken, amountEth, liquidity);\n    }\n\n    function transferFromERC721(\n        address assetAddr,\n        uint256 tokenId,\n        address to\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            // Fix here for frontrun attack. Added in v1.0.2.\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                tokenId\n            );\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\n                .staticcall(punkIndexToAddress);\n            address nftOwner = abi.decode(result, (address));\n            require(\n                checkSuccess && nftOwner == msg.sender,\n                \"Not the NFT owner\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n        } else {\n            // Default.\n            // We push to the vault to avoid an unneeded transfer.\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    function approveERC721(\n        address assetAddr,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            // data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\n            // No longer needed to approve with pushing.\n            return;\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            data = abi.encodeWithSignature(\n                \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n                tokenId,\n                0,\n                to\n            );\n        } else {\n            // No longer needed to approve with pushing.\n            return;\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address tokenA, address tokenB)\n        internal\n        view\n        returns (address pair)\n    {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            sushiRouter.factory(),\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    receive() external payable {\n        require(msg.sender == address(WETH), \"Only WETH\");\n    }\n\n    function rescue(address token) external onlyOwner {\n        if (token == address(0)) {\n            (bool success, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        } else {\n            IERC20Upgradeable(token).safeTransfer(\n                msg.sender,\n                IERC20Upgradeable(token).balanceOf(address(this))\n            );\n        }\n    }\n}\n"
    },
    "src/v2/zaps/NFTXUnstakingInventoryZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/Ownable.sol\";\nimport \"../util/ReentrancyGuard.sol\";\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../interface/INFTXVault.sol\";\nimport \"../interface/IUniswapV2Router01.sol\";\nimport \"../token/IWETH.sol\";\nimport \"../NFTXInventoryStaking.sol\";\n\ncontract NFTXUnstakingInventoryZap is Ownable, ReentrancyGuard {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    INFTXVaultFactory public vaultFactory;\n    NFTXInventoryStaking public inventoryStaking;\n    IUniswapV2Router01 public sushiRouter;\n    IWETH public weth;\n\n    event InventoryUnstaked(\n        uint256 vaultId,\n        uint256 xTokensUnstaked,\n        uint256 numNftsRedeemed,\n        address unstaker\n    );\n\n    function setVaultFactory(address addr) public onlyOwner {\n        vaultFactory = INFTXVaultFactory(addr);\n    }\n\n    function setInventoryStaking(address addr) public onlyOwner {\n        inventoryStaking = NFTXInventoryStaking(addr);\n    }\n\n    function setSushiRouterAndWeth(address sushiRouterAddr) public onlyOwner {\n        sushiRouter = IUniswapV2Router01(sushiRouterAddr);\n        weth = IWETH(sushiRouter.WETH());\n    }\n\n    /**\n     * @param remainingPortionToUnstake Represents the ratio (in 1e18) of the remaining xTokens (left after claiming `numNfts`) balance of user to unstake\n     * if remainingPortionToUnstake = 1e18 => unstake entire user's balance\n     * if remainingPortionToUnstake = 0 => only unstake required xToken balance to claim `numNfts`, nothing extra\n     */\n    function unstakeInventory(\n        uint256 vaultId,\n        uint256 numNfts,\n        uint256 remainingPortionToUnstake\n    ) public payable {\n        require(remainingPortionToUnstake <= 1e18);\n        IERC20Upgradeable vToken = IERC20Upgradeable(\n            vaultFactory.vault(vaultId)\n        );\n        IERC20Upgradeable xToken = IERC20Upgradeable(\n            inventoryStaking.xTokenAddr(address(vToken))\n        );\n\n        uint256 reqVTokens = numNfts * 1e18;\n\n        // calculate `xTokensToPull` to pull\n        uint256 xTokensToPull;\n        uint256 xTokenUserBal = xToken.balanceOf(msg.sender);\n        if (remainingPortionToUnstake == 1e18) {\n            xTokensToPull = xTokenUserBal;\n        } else {\n            uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId); // vTokens per xToken in wei\n            uint256 reqXTokens = (reqVTokens * 1e18) / shareValue;\n\n            // Check for rounding error being 1 less that expected amount\n            if ((reqXTokens * shareValue) / 1e18 < reqVTokens) {\n                reqXTokens += 1;\n            }\n\n            // If the user doesn't have enough xTokens then we just want to pull the\n            // balance of the user.\n            if (xTokenUserBal < reqXTokens) {\n                xTokensToPull = xTokenUserBal;\n            }\n            // If we have zero additional portion to unstake, then we only need to pull the required tokens\n            else if (remainingPortionToUnstake == 0) {\n                xTokensToPull = reqXTokens;\n            }\n            // Otherwise, calculate remaining xTokens to unstake using `remainingPortionToUnstake` ratio\n            else {\n                uint256 remainingXTokens = xToken.balanceOf(msg.sender) -\n                    reqXTokens;\n                xTokensToPull =\n                    reqXTokens +\n                    ((remainingXTokens * remainingPortionToUnstake) / 1e18);\n            }\n        }\n\n        // pull xTokens then unstake for vTokens\n        xToken.safeTransferFrom(msg.sender, address(this), xTokensToPull);\n\n        // If our inventory staking contract has an allowance less that the amount we need\n        // to pull, then we need to approve additional tokens.\n        if (\n            xToken.allowance(address(this), address(inventoryStaking)) <\n            xTokensToPull\n        ) {\n            xToken.approve(address(inventoryStaking), type(uint256).max);\n        }\n\n        uint256 initialVTokenBal = vToken.balanceOf(address(this));\n        // Burn our xTokens to pull in our vTokens\n        inventoryStaking.withdraw(vaultId, xTokensToPull);\n        uint256 vTokensReceived = vToken.balanceOf(address(this)) -\n            initialVTokenBal;\n\n        uint256 missingVToken;\n\n        // If the amount of vTokens generated from our `inventoryStaking.withdraw` call\n        // is not sufficient to fulfill the claim on the specified number of NFTs, then\n        // we determine if we can claim some dust from the contract.\n        if (vTokensReceived < reqVTokens) {\n            // We can calculate the amount of vToken required by the contract to get\n            // it from the withdrawal amount to the amount required based on the number\n            // of NFTs.\n            missingVToken = reqVTokens - vTokensReceived;\n\n            /**\n             * reqVTokens = 1e18\n             * initialVTokenBal = 2\n             * vToken.balanceOf(address(this)) = 1000000000000000001\n             *\n             * 1000000000000000000 - (1000000000000000001 - 2) = 1\n             */\n        }\n\n        // This dust value has to be less that 100 to ensure we aren't just being rinsed\n        // of dust.\n        require(missingVToken < 100, \"not enough vTokens\");\n\n        uint256 dustUsed;\n        if (missingVToken > initialVTokenBal) {\n            // If user has sufficient vTokens to account for missingVToken\n            // then get it from them to this contract\n            if (\n                vToken.balanceOf(msg.sender) >= missingVToken &&\n                vToken.allowance(msg.sender, address(this)) >= missingVToken\n            ) {\n                vToken.safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    missingVToken\n                );\n            } else {\n                // else we swap ETH from this contract to get `missingVToken`\n                address[] memory path = new address[](2);\n                path[0] = address(weth);\n                path[1] = address(vToken);\n                sushiRouter.swapETHForExactTokens{value: 1_000_000_000}(\n                    missingVToken,\n                    path,\n                    address(this),\n                    block.timestamp\n                );\n            }\n        } else {\n            dustUsed = missingVToken;\n        }\n\n        // reedem NFTs with vTokens, if requested\n        if (numNfts > 0) {\n            INFTXVault(address(vToken)).redeemTo(\n                numNfts,\n                new uint256[](0),\n                msg.sender\n            );\n        }\n\n        /**\n         * How this fixes underflow error:\n         * vToken.balanceOf(address(this)) = 1\n         * initialVTokenBal = 2\n         * dustUsed = missingVToken = 1\n         * vTokenRemainder = 1 - (2 - 1) = 0\n         */\n        uint256 vTokenRemainder = vToken.balanceOf(address(this)) -\n            (initialVTokenBal - dustUsed);\n\n        // if vToken remainder more than dust then return to sender.\n        // happens when `remainingPortionToUnstake` is non-zero\n        if (vTokenRemainder > 100) {\n            vToken.safeTransfer(msg.sender, vTokenRemainder);\n        }\n\n        emit InventoryUnstaked(vaultId, xTokensToPull, numNfts, msg.sender);\n    }\n\n    function maxNftsUsingXToken(\n        uint256 vaultId,\n        address staker,\n        address slpToken\n    ) public view returns (uint256 numNfts, bool shortByTinyAmount) {\n        if (inventoryStaking.timelockUntil(vaultId, staker) > block.timestamp) {\n            return (0, false);\n        }\n        address vTokenAddr = vaultFactory.vault(vaultId);\n        address xTokenAddr = inventoryStaking.xTokenAddr(vTokenAddr);\n        IERC20Upgradeable vToken = IERC20Upgradeable(vTokenAddr);\n        IERC20Upgradeable xToken = IERC20Upgradeable(xTokenAddr);\n        IERC20Upgradeable lpPair = IERC20Upgradeable(slpToken);\n\n        uint256 xTokenBal = xToken.balanceOf(staker);\n        uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId);\n        uint256 vTokensA = (xTokenBal * shareValue) / 1e18;\n        uint256 vTokensB = ((xTokenBal * shareValue) / 1e18) + 99;\n\n        uint256 vTokensIntA = vTokensA / 1e18;\n        uint256 vTokensIntB = vTokensB / 1e18;\n\n        if (vTokensIntB > vTokensIntA) {\n            if (\n                vToken.balanceOf(msg.sender) >= 99 &&\n                vToken.allowance(msg.sender, address(this)) >= 99\n            ) {\n                return (vTokensIntB, true);\n            } else if (lpPair.totalSupply() >= 10000) {\n                return (vTokensIntB, true);\n            } else if (vToken.balanceOf(address(this)) >= 99) {\n                return (vTokensIntB, true);\n            } else {\n                return (vTokensIntA, false);\n            }\n        } else {\n            return (vTokensIntA, false);\n        }\n    }\n\n    receive() external payable {}\n\n    function rescue(address token) external onlyOwner {\n        if (token == address(0)) {\n            (bool success, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        } else {\n            IERC20Upgradeable(token).safeTransfer(\n                msg.sender,\n                IERC20Upgradeable(token).balanceOf(address(this))\n            );\n        }\n    }\n}\n"
    },
    "src/v2/zaps/NFTXVaultCreationZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/INFTXInventoryStaking.sol\";\nimport \"../interface/INFTXLPStaking.sol\";\nimport \"../interface/IUniswapV2Router01.sol\";\nimport \"../interface/INFTXVault.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../testing/IERC1155.sol\";\nimport \"../testing/ERC1155Holder.sol\";\nimport \"../util/Ownable.sol\";\nimport \"../util/ReentrancyGuard.sol\";\nimport \"../util/SafeERC20.sol\";\nimport \"../util/SushiHelper.sol\";\n\n\n/**\n * @notice A partial WETH interface.\n */\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n  function approve(address guy, uint wad) external returns (bool);\n}\n\n\n/**\n * @notice An amalgomation of vault creation steps, merged and optimised in\n * a single contract call in an attempt reduce gas costs to the end-user.\n * \n * @author Twade\n */\n\ncontract NFTXVaultCreationZap is Ownable, ReentrancyGuard, ERC1155Holder {\n\n  using SafeERC20 for IERC20;\n\n  /// @notice Allows zap to be paused\n  bool public paused = false;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXVaultFactory public immutable vaultFactory;\n\n  /// @notice Holds the mapping of our sushi router\n  IUniswapV2Router01 public immutable sushiRouter;\n  SushiHelper internal immutable sushiHelper;\n\n  /// @notice An interface for the WETH contract\n  IWETH public immutable WETH;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXInventoryStaking public immutable inventoryStaking;\n  INFTXLPStaking public immutable lpStaking;\n\n  // Set a constant address for specific contracts that need special logic\n  address constant CRYPTO_PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n  /// @notice Basic information pertaining to the vault\n  struct vaultInfo {\n    address assetAddress;      // 20/32\n    bool is1155;               // 21/32\n    bool allowAllItems;        // 22/32\n    string name;               // ??/32\n    string symbol;             // ??/32\n  }\n\n  /// @notice Fee information in 9-decimal format\n  struct vaultFeesConfig {\n    uint32 mintFee;\n    uint32 randomRedeemFee;\n    uint32 targetRedeemFee;\n    uint32 randomSwapFee;\n    uint32 targetSwapFee;\n  }\n\n  /// @notice Reference to the vault's eligibility implementation\n  struct vaultEligibilityStorage {\n    int moduleIndex;\n    bytes initData;\n  }\n\n  /// @notice Valid tokens to be transferred to the vault on creation\n  struct vaultTokens {\n    uint[] assetTokenIds;\n    uint[] assetTokenAmounts;\n\n    // Sushiswap integration for liquidity\n    uint minTokenIn;\n    uint minWethIn;\n    uint wethIn;\n  }\n\n\n  /**\n   * @notice Initialises our zap by setting contract addresses onto their\n   * respective interfaces.\n   */\n\n  constructor(\n    address _vaultFactory,\n    address _inventoryStaking,\n    address _lpStaking,\n    address _sushiRouter,\n    address _sushiHelper,\n    address _weth\n  ) Ownable() ReentrancyGuard() {\n    // Set our staking contracts\n    inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\n    lpStaking = INFTXLPStaking(_lpStaking);\n\n    // Set our NFTX factory contract\n    vaultFactory = INFTXVaultFactory(_vaultFactory);\n\n    // Set our Sushi Router used for liquidity\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n    sushiHelper = SushiHelper(_sushiHelper);\n\n    // Set our chain's WETH contract\n    WETH = IWETH(_weth);\n    // setting infinite approval here to save on subsequent gas costs\n    IWETH(_weth).approve(_sushiRouter, type(uint256).max);\n  }\n\n\n  /**\n   * @notice Creates an NFTX vault, handling any desired settings and tokens.\n   * \n   * @dev Tokens are deposited into the vault prior to fees being sent.\n   * \n   * @param vaultData Basic information about the vault stored in `vaultInfo` struct\n   * @param vaultFeatures A numeric representation of boolean values for features on the vault\n   * @param vaultFees Fee definitions stored in a `vaultFeesConfig` struct\n   * @param eligibilityStorage Eligibility implementation, stored in a `vaultEligibilityStorage` struct\n   * @param assetTokens Tokens to be transferred to the vault in exchange for vault tokens\n   * \n   * @return vaultId_ The numeric ID of the NFTX vault\n   */\n\n  function createVault(\n    vaultInfo calldata vaultData,\n    uint vaultFeatures,\n    vaultFeesConfig calldata vaultFees,\n    vaultEligibilityStorage calldata eligibilityStorage,\n    vaultTokens calldata assetTokens\n  ) external nonReentrant payable returns (uint vaultId_) {\n    // Ensure our zap is not paused\n    require(!paused, 'Zap is paused');\n\n    // Get the amount of starting ETH in the contract\n    uint startingWeth = WETH.balanceOf(address(this));\n\n    // Create our vault skeleton\n    vaultId_ = vaultFactory.createVault(\n      vaultData.name,\n      vaultData.symbol,\n      vaultData.assetAddress,\n      vaultData.is1155,\n      vaultData.allowAllItems\n    );\n\n    // Deploy our vault's xToken\n    inventoryStaking.deployXTokenForVault(vaultId_);\n\n    // Build our vault interface\n    INFTXVault vault = INFTXVault(vaultFactory.vault(vaultId_));\n\n    // If we have a specified eligibility storage, add that on\n    if (eligibilityStorage.moduleIndex >= 0) {\n      vault.deployEligibilityStorage(\n        uint256(eligibilityStorage.moduleIndex),\n        eligibilityStorage.initData\n      );\n    }\n\n    // Mint and stake liquidity into the vault\n    uint length = assetTokens.assetTokenIds.length;\n\n    // If we don't have any tokens to send, we can skip our transfers\n    if (length > 0) {\n      // Determine the token type to alternate our transfer logic\n      if (!vaultData.is1155) {\n        // Iterate over our 721 tokens to transfer them all to our vault\n        for (uint i; i < length;) {\n          _transferFromERC721(vaultData.assetAddress, assetTokens.assetTokenIds[i], address(vault));\n\n          if(vaultData.assetAddress == CRYPTO_PUNKS) {\n            bytes memory data = abi.encodeWithSignature(\n                \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n                assetTokens.assetTokenIds[i],\n                0,\n                address(vault)\n            );\n            (bool success, bytes memory resultData) = vaultData.assetAddress.call(data);\n            require(success, string(resultData));\n          }\n\n          unchecked { ++i; }\n        }\n      } else {\n        // Transfer all of our 1155 tokens to our zap, as the `mintTo` call on our\n        // vault requires the call sender to hold the ERC1155 token.\n        IERC1155(vaultData.assetAddress).safeBatchTransferFrom(\n          msg.sender,\n          address(this),\n          assetTokens.assetTokenIds,\n          assetTokens.assetTokenAmounts,\n          \"\"\n        );\n\n        // Approve our vault to play with our 1155 tokens\n        IERC1155(vaultData.assetAddress).setApprovalForAll(address(vault), true);\n      }\n\n      // We can now mint our asset tokens, giving the vault our tokens and storing them\n      // inside our zap, as we will shortly be staking them. Our zap is excluded from fees,\n      // so there should be no loss in the amount returned.\n      vault.mintTo(assetTokens.assetTokenIds, assetTokens.assetTokenAmounts, address(this));\n\n      // We now have tokens against our provided NFTs that we can now stake through either\n      // inventory or liquidity.\n\n      // Get our vaults base staking token. This is used to calculate the xToken\n      address baseToken = address(vault);\n\n      // We first want to set up our liquidity, as the returned values will be variable\n      if (assetTokens.minTokenIn > 0) {\n        require(msg.value >= assetTokens.wethIn, 'Insufficient msg.value sent for liquidity');\n\n        // Wrap ETH into WETH for our contract from the sender\n        WETH.deposit{value: msg.value}();\n\n        // Convert WETH to vault token\n        require(IERC20(baseToken).balanceOf(address(this)) >= assetTokens.minTokenIn, 'Insufficient tokens acquired for liquidity');\n\n        // Provide liquidity to sushiswap, using the vault tokens and pairing it with the\n        // liquidity amount specified in the call.\n        IERC20(baseToken).safeApprove(address(sushiRouter), assetTokens.minTokenIn);\n        (,, uint256 liquidity) = sushiRouter.addLiquidity(\n          baseToken,\n          address(WETH),\n          assetTokens.minTokenIn,\n          assetTokens.wethIn,\n          assetTokens.minTokenIn,\n          assetTokens.minWethIn,\n          address(this),\n          block.timestamp\n        );\n        IERC20(baseToken).safeApprove(address(sushiRouter), 0);\n\n        // Stake in LP rewards contract \n        address lpToken = sushiHelper.pairFor(sushiRouter.factory(), baseToken, address(WETH));\n        IERC20(lpToken).safeApprove(address(lpStaking), liquidity);\n        lpStaking.timelockDepositFor(vaultId_, msg.sender, liquidity, 48 hours);\n      }\n\n      // Return any token dust to the caller\n      uint256 remainingTokens = IERC20(baseToken).balanceOf(address(this));\n\n      // Any tokens that we have remaining after our liquidity staking are thrown into\n      // inventory to ensure what we don't have any token dust remaining.\n      if (remainingTokens > 0) {\n        // Make a direct timelock mint using the default timelock duration. This sends directly\n        // to our user, rather than via the zap, to avoid the timelock locking the tx.\n        IERC20(baseToken).transfer(inventoryStaking.vaultXToken(vaultId_), remainingTokens);\n        inventoryStaking.timelockMintFor(vaultId_, remainingTokens, msg.sender, 2);\n      }\n    }\n\n    // If we have specified vault features that aren't the default (all enabled)\n    // then update them\n    if (vaultFeatures < 31) {\n      vault.setVaultFeatures(\n        _getBoolean(vaultFeatures, 4),\n        _getBoolean(vaultFeatures, 3),\n        _getBoolean(vaultFeatures, 2),\n        _getBoolean(vaultFeatures, 1),\n        _getBoolean(vaultFeatures, 0)\n      );\n    }\n\n    // Set our vault fees, converting our 9-decimal to 18-decimal\n    vault.setFees(\n      uint256(vaultFees.mintFee) * 10e9,\n      uint256(vaultFees.randomRedeemFee) * 10e9,\n      uint256(vaultFees.targetRedeemFee) * 10e9,\n      uint256(vaultFees.randomSwapFee) * 10e9,\n      uint256(vaultFees.targetSwapFee) * 10e9\n    );\n\n    // Finalise our vault, preventing further edits\n    vault.finalizeVault();\n\n    // Now that all transactions are finished we can return any ETH dust left over\n    // from our liquidity staking.\n    uint remainingWEth = WETH.balanceOf(address(this)) - startingWeth;\n    if (remainingWEth > 0) {\n      WETH.withdraw(remainingWEth);\n      bool sent = payable(msg.sender).send(remainingWEth);\n      require(sent, \"Failed to send Ether\");\n    }\n  }\n\n\n  /**\n   * @notice Transfers our ERC721 tokens to a specified recipient.\n   * \n   * @param assetAddr Address of the asset being transferred\n   * @param tokenId The ID of the token being transferred\n   * @param to The address the token is being transferred to\n   */\n\n  function _transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    bytes memory data;\n\n    if (assetAddr == CRYPTO_PUNKS) {\n      // Fix here for frontrun attack.\n      bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n      (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n      (address nftOwner) = abi.decode(result, (address));\n      require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\n      data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n      // We push to the vault to avoid an unneeded transfer.\n      data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n\n  /**\n   * @notice Reads a boolean at a set character index of a uint.\n   * \n   * @dev 0 and 1 define false and true respectively.\n   * \n   * @param _packedBools A numeric representation of a series of boolean values\n   * @param _boolNumber The character index of the boolean we are looking up\n   *\n   * @return bool The representation of the boolean value\n   */\n\n  function _getBoolean(uint256 _packedBools, uint256 _boolNumber) internal pure returns(bool) {\n    uint256 flag = (_packedBools >> _boolNumber) & uint256(1);\n    return (flag == 1 ? true : false);\n  }\n\n\n  /**\n   * @notice Allows our zap to be paused to prevent any processing.\n   * \n   * @param _paused New pause state\n   */\n\n  function pause(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  receive() external payable {\n    require(msg.sender == address(WETH), \"Only WETH\");\n  }\n\n}\n"
    },
    "src/v2/zaps/NFTXYieldStakingZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/INFTXInventoryStaking.sol\";\nimport \"../interface/INFTXLPStaking.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../interface/IUniswapV2Router01.sol\";\nimport \"../util/Ownable.sol\";\nimport \"../util/ReentrancyGuard.sol\";\nimport \"../util/SafeERC20.sol\";\n\n\n/**\n * @notice A partial WETH interface.\n */\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n  function approve(address guy, uint wad) external returns (bool);\n}\n\n\n/**\n * @notice Allows users to buy and stake tokens into either an inventory or liquidity\n * pool, handling the steps between buying and staking across 0x and sushi.\n * \n * @author Twade\n */\n\ncontract NFTXYieldStakingZap is Ownable, ReentrancyGuard {\n\n  using SafeERC20 for IERC20;\n  \n  /// @notice Allows zap to be paused\n  bool public paused = false;\n\n  /// @notice Sets our 0x swap target\n  address payable private immutable swapTarget;\n \n  /// @notice Holds the mapping of our sushi router\n  IUniswapV2Router01 public immutable sushiRouter;\n\n  /// @notice An interface for the WETH contract\n  IWETH public immutable WETH;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXInventoryStaking public immutable inventoryStaking;\n  INFTXLPStaking public immutable lpStaking;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXVaultFactory public immutable nftxFactory;\n\n  /// @notice A mapping of NFTX Vault IDs to their address corresponding\n  /// vault contract address\n  mapping(uint256 => address) public nftxVaultAddresses;\n\n\n  /**\n   * @notice Initialises our zap and sets our internal addresses that will be referenced\n   * in our contract. This allows for varied addresses based on the network.\n   */\n\n  constructor(\n    address _nftxFactory,\n    address _inventoryStaking,\n    address _lpStaking,\n    address _sushiRouter,\n    address _weth,\n    address payable _swapTarget\n  ) Ownable() ReentrancyGuard() {\n    // Set our staking contracts\n    inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\n    lpStaking = INFTXLPStaking(_lpStaking);\n\n    // Set our NFTX factory contract\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\n\n    // Set our Sushi Router used for liquidity\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n\n    // Set our chain's WETH contract\n    WETH = IWETH(_weth);\n    // setting infinite approval here to save on subsequent gas costs\n    IWETH(_weth).approve(_sushiRouter, type(uint256).max);\n    IWETH(_weth).approve(_swapTarget, type(uint256).max);\n\n    // Set our 0x Swap Target\n    swapTarget = _swapTarget;\n  }\n\n\n  /**\n   * @notice Allows the user to buy and stake tokens against an Inventory. This will\n   * handle the purchase of the vault tokens against 0x and then generate the xToken\n   * against the vault and timelock them.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param swapCallData The `data` field from the 0x API response\n   */\n\n  function buyAndStakeInventory(\n    uint256 vaultId,\n    bytes calldata swapCallData\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Ensure we have tx value\n    require(msg.value > 0, 'Invalid value provided');\n\n    // Get our vaults base staking token. This is used to calculate the xToken\n    address baseToken = _vaultAddress(vaultId);\n    require(baseToken != address(0), 'Invalid vault provided');\n    \n    // Get our start WETH balance\n    uint wethBalance = WETH.balanceOf(address(this));\n\n    // Wrap ETH into WETH for our contract from the sender\n    if (msg.value > 0) {\n      WETH.deposit{value: msg.value}();\n    }\n\n    // Convert WETH to vault token\n    uint256 vaultTokenAmount = _fillQuote(baseToken, swapCallData);\n\n    // Make a direct timelock mint using the default timelock duration. This sends directly\n    // to our user, rather than via the zap, to avoid the timelock locking the tx.\n    IERC20(baseToken).transfer(inventoryStaking.vaultXToken(vaultId), vaultTokenAmount);\n    inventoryStaking.timelockMintFor(vaultId, vaultTokenAmount, msg.sender, 2);\n\n    // Return any left of WETH to the user as ETH\n    uint256 remainingWETH = WETH.balanceOf(address(this)) - wethBalance;\n    if (remainingWETH > 0) {\n      // Unwrap our WETH into ETH and transfer it to the recipient\n      WETH.withdraw(remainingWETH);\n      (bool success, ) = payable(msg.sender).call{value: remainingWETH}(\"\");\n      require(success, \"Unable to send unwrapped WETH\");\n    }\n  }\n\n\n  /**\n   * @notice Allows the user to buy and stake tokens against a Liquidity pool. This will\n   * handle the purchase of the vault tokens against 0x, the liquidity pool supplying via\n   * sushi and then the timelocking against our LP token.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param swapCallData The `data` field from the 0x API response\n   * @param minTokenIn The minimum amount of token to LP\n   * @param minWethIn The minimum amount of ETH (WETH) to LP\n   * @param wethIn The amount of ETH (WETH) supplied\n   */\n\n  function buyAndStakeLiquidity(\n    // Base data\n    uint256 vaultId,\n\n    // 0x integration\n    bytes calldata swapCallData,\n\n    // Sushiswap integration\n    uint256 minTokenIn,\n    uint256 minWethIn,\n    uint256 wethIn\n\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Ensure we have tx value\n    require(msg.value > 0, 'Invalid value provided');\n    require(msg.value > wethIn, 'Insufficient vault sent for pairing');\n\n    // Get our start WETH balance\n    uint wethBalance = WETH.balanceOf(address(this));\n\n    // Wrap ETH into WETH for our contract from the sender\n    if (msg.value > 0) {\n      WETH.deposit{value: msg.value}();\n    }\n\n    // Get our vaults base staking token. This is used to calculate the xToken\n    address baseToken = _vaultAddress(vaultId);\n    require(baseToken != address(0), 'Invalid vault provided');\n\n    // Convert WETH to vault token\n    uint256 vaultTokenAmount = _fillQuote(baseToken, swapCallData);\n    require(vaultTokenAmount > minTokenIn, 'Insufficient tokens acquired');\n\n    // Check WETH balance\n    uint256 WETHAmount = WETH.balanceOf(address(this)) - wethBalance;\n    require(WETHAmount >= wethIn, 'Insufficient WETH remaining');\n\n    // Provide liquidity to sushiswap, using the vault token that we acquired from 0x and\n    // pairing it with the liquidity amount specified in the call.\n    IERC20(baseToken).safeApprove(address(sushiRouter), vaultTokenAmount);\n    (uint256 amountToken, , uint256 liquidity) = sushiRouter.addLiquidity(\n      baseToken,\n      address(WETH),\n      vaultTokenAmount,\n      wethIn,\n      minTokenIn,\n      minWethIn,\n      address(this),\n      block.timestamp\n    );\n\n    // Stake in LP rewards contract \n    address lpToken = pairFor(baseToken, address(WETH));\n    IERC20(lpToken).safeApprove(address(lpStaking), liquidity);\n    lpStaking.timelockDepositFor(vaultId, msg.sender, liquidity, 48 hours);\n    \n    // Return any token dust to the caller\n    uint256 remainingTokens = vaultTokenAmount - amountToken;\n    if (remainingTokens != 0) {\n      IERC20(baseToken).transfer(msg.sender, remainingTokens);\n    }\n\n    // Return any left of WETH to the user as ETH\n    uint256 remainingWETH = WETH.balanceOf(address(this)) - wethBalance;\n    if (remainingWETH > 0) {\n      // Unwrap our WETH into ETH and transfer it to the recipient\n      WETH.withdraw(remainingWETH);\n      (bool success, ) = payable(msg.sender).call{value: remainingWETH}(\"\");\n      require(success, \"Unable to send unwrapped WETH\");\n    }\n  }\n\n\n  /**\n   * @notice Calculates the CREATE2 address for a sushi pair without making any\n   * external calls.\n   * \n   * @return pair Address of our token pair\n   */\n\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouter.factory(),\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n\n  /**\n   * @notice Returns sorted token addresses, used to handle return values from pairs sorted in\n   * this order.\n   */\n\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n\n  /**\n   * @notice Allows our owner to withdraw and tokens in the contract.\n   * \n   * @param token The address of the token to be rescued\n   */\n\n  function rescue(address token) external onlyOwner {\n    if (token == address(0)) {\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n      require(success, \"Address: unable to send value\");\n    } else {\n      IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n    }\n  }\n\n\n  /**\n   * @notice Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\n   *\n   * @param buyToken The `buyTokenAddress` field from the API response\n   * @param swapCallData The `data` field from the API response\n   */\n\n  function _fillQuote(\n    address buyToken,\n    bytes calldata swapCallData\n  ) internal returns (uint256) {\n      // Track our balance of the buyToken to determine how much we've bought.\n      uint256 boughtAmount = IERC20(buyToken).balanceOf(address(this));\n\n      // Call the encoded swap function call on the contract at `swapTarget`\n      (bool success,) = swapTarget.call(swapCallData);\n      require(success, 'SWAP_CALL_FAILED');\n\n      // Use our current buyToken balance to determine how much we've bought.\n      return IERC20(buyToken).balanceOf(address(this)) - boughtAmount;\n  }\n\n\n  /**\n   * @notice Maps a cached NFTX vault address against a vault ID for gas savings on\n   * repeat vault address lookups.\n   * \n   * @param vaultId The ID of the NFTX vault\n   */\n\n  function _vaultAddress(uint256 vaultId) internal returns (address) {\n    if (nftxVaultAddresses[vaultId] == address(0)) {\n      nftxVaultAddresses[vaultId] = nftxFactory.vault(vaultId);\n    }\n\n    require(nftxVaultAddresses[vaultId] != address(0), 'Vault does not exist');\n    return nftxVaultAddresses[vaultId];\n  }\n\n\n  /**\n   * @notice Allows our zap to be paused to prevent any processing.\n   * \n   * @param _paused New pause state\n   */\n\n  function pause(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  /**\n   * @notice A modifier that only allows the owner to interact with the function\n   * if the contract is paused. If the contract is not paused then anyone can\n   * interact with the function.\n   */\n\n  modifier onlyOwnerIfPaused() {\n    require(!paused || msg.sender == owner(), \"Zap is paused\");\n    _;\n  }\n\n\n  /**\n   * @notice Allows our contract to only receive WETH and reject everything else.\n   */\n\n  receive() external payable {\n    require(msg.sender == address(WETH), \"Only WETH\");\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "remappings": [
      "@mocks/=src/mocks/",
      "@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "@src/=src/",
      "@test/=test/",
      "@uni-core/=src/uniswap/v3-core/",
      "@uni-periphery/=src/uniswap/v3-periphery/",
      "@uniswap/lib/=lib/solidity-lib/",
      "@uniswap/v2-core/=lib/v2-core/",
      "@uniswap/v3-core/contracts/=src/uniswap/v3-core/",
      "base64-sol/=src/uniswap/v3-periphery/libraries/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "solidity-lib/=lib/solidity-lib/contracts/",
      "v2-core/=lib/v2-core/contracts/"
    ]
  }
}