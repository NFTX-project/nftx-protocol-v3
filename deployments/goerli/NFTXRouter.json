{
  "address": "0x713d883982338a9AC3Dd2A7960cAF7Df2Aaf499c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "positionManager_",
          "type": "address"
        },
        {
          "internalType": "contract SwapRouter",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "contract IQuoterV2",
          "name": "quoter_",
          "type": "address"
        },
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "nftxVaultFactory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UnableToSendETH",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRYPTO_PUNKS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vtoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vTokensAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIds",
              "type": "uint256[]"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceX96",
              "type": "uint160"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTXRouter.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vtoken",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct INFTXRouter.BuyNFTsParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "buyNFTs",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "computePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "getPoolExists",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vtoken",
          "type": "address"
        }
      ],
      "name": "isVToken0",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftxVaultFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vtoken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "quoteBuyNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethRequired",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoter",
      "outputs": [
        {
          "internalType": "contract IQuoterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "vtoken",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "receiveVTokens",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "uint24",
              "name": "swapPoolFee",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "amount0Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1Min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTXRouter.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract SwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vtoken",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct INFTXRouter.SellNFTsParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "sellNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wethReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2a5b80aaea5fb90b756e4286fad947d56f31a56fc86994dbc5cd04aadcc6cb56",
  "receipt": {
    "to": null,
    "from": "0xb06a64615842CbA9b3Bdb7e6F726F3a5BD20daC2",
    "contractAddress": "0x713d883982338a9AC3Dd2A7960cAF7Df2Aaf499c",
    "transactionIndex": 107,
    "gasUsed": "3442123",
    "logsBloom": "0x
    "blockHash": "0x6e7caed28f80d01a1a6ac2e3688fac1c47c180dbf62891abac89cc04a8a7370d",
    "transactionHash": "0x2a5b80aaea5fb90b756e4286fad947d56f31a56fc86994dbc5cd04aadcc6cb56",
    "logs": [
      {
        "transactionIndex": 107,
        "blockNumber": 8934898,
        "transactionHash": "0x2a5b80aaea5fb90b756e4286fad947d56f31a56fc86994dbc5cd04aadcc6cb56",
        "address": "0x713d883982338a9AC3Dd2A7960cAF7Df2Aaf499c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b06a64615842cba9b3bdb7e6f726f3a5bd20dac2"
        ],
        "data": "0x",
        "logIndex": 177,
        "blockHash": "0x6e7caed28f80d01a1a6ac2e3688fac1c47c180dbf62891abac89cc04a8a7370d"
      }
    ],
    "blockNumber": 8934898,
    "cumulativeGasUsed": "15456679",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C993B148fe48273e0ca8f5189a017024D7E593b",
    "0x7769e8DDCd668218CFf37b91c20f21D8813399b6",
    "0xBAeC994bCCD3Fd06Ab2A4E53f04EaB68Fd8E338e",
    "0x666738678c6FbdE71bb7Ca7B4DD1d41AFF218d7F"
  ],
  "numDeployments": 3,
  "solcInputHash": "6af12fc1ac3060e549b29142ecba5bb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"positionManager_\",\"type\":\"address\"},{\"internalType\":\"contract SwapRouter\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"contract IQuoterV2\",\"name\":\"quoter_\",\"type\":\"address\"},{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"nftxVaultFactory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UnableToSendETH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRYPTO_PUNKS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTXRouter.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vtoken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct INFTXRouter.BuyNFTsParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"buyNFTs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"computePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPoolExists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vtoken\",\"type\":\"address\"}],\"name\":\"isVToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxVaultFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vtoken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteBuyNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"contract IQuoterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vtoken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"receiveVTokens\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint24\",\"name\":\"swapPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTXRouter.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vtoken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct INFTXRouter.SellNFTsParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"sellNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"@apoorvlathey\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteBuyNFTs(address,uint256[],uint24,uint160)\":{\"details\":\"This function is not gas efficient and should _not_ be called on chain.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueTokens(address)\":{\"params\":{\"token\":\"ERC20 token address or address(0) in case of ETH\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NFTX Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity((address,uint256,uint256[],int24,int24,uint24,uint160,uint256))\":{\"notice\":\"User should have given NFT approval to vtoken contract, else revert\"},\"computePool(address,uint24)\":{\"notice\":\"Compute the pool address corresponding to vToken\"},\"getPool(address,uint24)\":{\"notice\":\"Get deployed pool address for vToken. Reverts if pool doesn't exist\"},\"getPoolExists(uint256,uint24)\":{\"notice\":\"Get deployed pool address for vaultId. `exists` is false if pool doesn't exist. `vaultId` must be valid.\"},\"isVToken0(address)\":{\"notice\":\"Checks if vToken is token0 or not\"},\"sellNFTs((address,uint256[],uint256,uint24,uint256,uint160))\":{\"notice\":\"User should have given NFT approval to vtoken contract, else revert\"}},\"notice\":\"Router to facilitate vault tokens minting/burning + addition/removal of concentrated liquidity\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NFTXRouter.sol\":\"NFTXRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[\":@mocks/=src/mocks/\",\":@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@src/=src/\",\":@test/=test/\",\":@uni-core/=src/uniswap/v3-core/\",\":@uni-periphery/=src/uniswap/v3-periphery/\",\":@uniswap/lib/=lib/solidity-lib/\",\":@uniswap/v2-core/=lib/v2-core/\",\":@uniswap/v3-core/contracts/=src/uniswap/v3-core/\",\":base64-sol/=src/uniswap/v3-periphery/libraries/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solidity-lib/=lib/solidity-lib/contracts/\",\":v2-core/=lib/v2-core/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1347943de4d80d3867f468aa1bb575511a37ff0238de9268eb0b0a53dba9ae42\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/NFTXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IUniswapV3Factory} from \\\"@uni-core/interfaces/IUniswapV3Factory.sol\\\";\\nimport {INonfungiblePositionManager} from \\\"@uni-periphery/interfaces/INonfungiblePositionManager.sol\\\";\\nimport {ISwapRouter, SwapRouter} from \\\"@uni-periphery/SwapRouter.sol\\\";\\nimport {IQuoterV2} from \\\"@uni-periphery/interfaces/IQuoterV2.sol\\\";\\nimport {IWETH9} from \\\"@uni-periphery/interfaces/external/IWETH9.sol\\\";\\nimport {PoolAddress} from \\\"@uni-periphery/libraries/PoolAddress.sol\\\";\\n\\nimport {INFTXVaultFactory} from \\\"@src/v2/interface/INFTXVaultFactory.sol\\\";\\nimport {INFTXVault} from \\\"@src/v2/interface/INFTXVault.sol\\\";\\n\\nimport {INFTXRouter} from \\\"./interfaces/INFTXRouter.sol\\\";\\n\\n/**\\n * @title NFTX Router\\n * @author @apoorvlathey\\n *\\n * @notice Router to facilitate vault tokens minting/burning + addition/removal of concentrated liquidity\\n */\\ncontract NFTXRouter is INFTXRouter, Ownable, ERC721Holder {\\n    using SafeERC20 for IERC20;\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    address public immutable override WETH;\\n\\n    // Set a constant address for specific contracts that need special logic\\n    address public constant override CRYPTO_PUNKS =\\n        0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n\\n    INonfungiblePositionManager public immutable override positionManager;\\n    SwapRouter public immutable override router;\\n    IQuoterV2 public immutable override quoter;\\n    INFTXVaultFactory public immutable override nftxVaultFactory;\\n\\n    // TODO: add events for each operation\\n\\n    constructor(\\n        INonfungiblePositionManager positionManager_,\\n        SwapRouter router_,\\n        IQuoterV2 quoter_,\\n        INFTXVaultFactory nftxVaultFactory_\\n    ) {\\n        positionManager = positionManager_;\\n        router = router_;\\n        quoter = quoter_;\\n        nftxVaultFactory = nftxVaultFactory_;\\n\\n        WETH = positionManager_.WETH9();\\n    }\\n\\n    // =============================================================\\n    //                     PUBLIC / EXTERNAL WRITE\\n    // =============================================================\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function addLiquidity(\\n        AddLiquidityParams calldata params\\n    ) external payable override returns (uint256 positionId) {\\n        uint256 vTokensAmount = params.vTokensAmount;\\n        if (vTokensAmount > 0) {\\n            INFTXVault(params.vtoken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                vTokensAmount\\n            );\\n        }\\n\\n        if (params.nftIds.length > 0) {\\n            address assetAddress = INFTXVault(params.vtoken).assetAddress();\\n\\n            // tranfer NFTs from user to the vault\\n            for (uint256 i; i < params.nftIds.length; ) {\\n                _transferFromERC721(\\n                    assetAddress,\\n                    params.nftIds[i],\\n                    params.vtoken\\n                );\\n\\n                if (assetAddress == CRYPTO_PUNKS) {\\n                    _approveCryptoPunkERC721(\\n                        assetAddress,\\n                        params.nftIds[i],\\n                        params.vtoken\\n                    );\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            uint256[] memory emptyIds;\\n            vTokensAmount +=\\n                INFTXVault(params.vtoken).mint(params.nftIds, emptyIds) *\\n                1 ether;\\n        }\\n\\n        INFTXVault(params.vtoken).approve(\\n            address(positionManager),\\n            vTokensAmount\\n        );\\n\\n        bool _isVToken0 = isVToken0(params.vtoken);\\n        (address token0, address token1) = _isVToken0\\n            ? (params.vtoken, WETH)\\n            : (WETH, params.vtoken);\\n\\n        positionManager.createAndInitializePoolIfNecessary(\\n            token0,\\n            token1,\\n            params.fee,\\n            params.sqrtPriceX96\\n        );\\n\\n        // mint position with vtoken and ETH\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        if (_isVToken0) {\\n            amount0Desired = vTokensAmount;\\n            // have a 5000 wei buffer to account for any dust amounts\\n            amount0Min = vTokensAmount > 5000 ? vTokensAmount - 5000 : 0;\\n            amount1Desired = msg.value;\\n        } else {\\n            amount0Desired = msg.value;\\n            amount1Desired = vTokensAmount;\\n            // have a 5000 wei buffer to account for any dust amounts\\n            amount1Min = vTokensAmount > 5000 ? vTokensAmount - 5000 : 0;\\n        }\\n\\n        (positionId, , , ) = positionManager.mint{value: msg.value}(\\n            INonfungiblePositionManager.MintParams({\\n                token0: token0,\\n                token1: token1,\\n                fee: params.fee,\\n                tickLower: params.tickLower,\\n                tickUpper: params.tickUpper,\\n                amount0Desired: amount0Desired,\\n                amount1Desired: amount1Desired,\\n                amount0Min: amount0Min,\\n                amount1Min: amount1Min,\\n                recipient: msg.sender,\\n                deadline: params.deadline\\n            })\\n        );\\n\\n        positionManager.refundETH(msg.sender);\\n        // refund vTokens dust (if any left)\\n        positionManager.sweepToken(params.vtoken, 0, msg.sender);\\n    }\\n\\n    function removeLiquidity(\\n        RemoveLiquidityParams calldata params\\n    ) external override {\\n        // remove liquidity to get vTokens and ETH\\n        positionManager.decreaseLiquidity(\\n            INonfungiblePositionManager.DecreaseLiquidityParams({\\n                tokenId: params.positionId,\\n                liquidity: params.liquidity,\\n                amount0Min: params.amount0Min,\\n                amount1Min: params.amount1Min,\\n                deadline: params.deadline\\n            })\\n        );\\n\\n        // collect vtokens & weth from removing liquidity + earned fees\\n        (uint256 amount0, uint256 amount1) = positionManager.collect(\\n            INonfungiblePositionManager.CollectParams({\\n                tokenId: params.positionId,\\n                recipient: address(this),\\n                amount0Max: type(uint128).max,\\n                amount1Max: type(uint128).max\\n            })\\n        );\\n\\n        bool _isVToken0 = isVToken0(params.vtoken);\\n        (uint256 vTokenAmt, uint256 wethAmt) = _isVToken0\\n            ? (amount0, amount1)\\n            : (amount1, amount0);\\n\\n        if (params.receiveVTokens) {\\n            INFTXVault(params.vtoken).transfer(msg.sender, vTokenAmt);\\n        } else {\\n            // swap decimal part of vTokens to WETH\\n            uint256 fractionalVTokenAmt = vTokenAmt % 1 ether;\\n            if (fractionalVTokenAmt > 0) {\\n                INFTXVault(params.vtoken).approve(\\n                    address(router),\\n                    fractionalVTokenAmt\\n                );\\n                uint256 fractionalWethAmt = router.exactInputSingle(\\n                    ISwapRouter.ExactInputSingleParams({\\n                        tokenIn: address(params.vtoken),\\n                        tokenOut: WETH,\\n                        fee: params.swapPoolFee,\\n                        recipient: address(this),\\n                        deadline: block.timestamp,\\n                        amountIn: fractionalVTokenAmt,\\n                        amountOutMinimum: 0,\\n                        sqrtPriceLimitX96: 0\\n                    })\\n                );\\n                wethAmt += fractionalWethAmt;\\n\\n                // burn vTokens to provided tokenIds array\\n                INFTXVault(params.vtoken).redeemTo(\\n                    params.nftIds.length,\\n                    params.nftIds,\\n                    msg.sender\\n                );\\n                uint256 vTokenBurned = params.nftIds.length * 1 ether;\\n\\n                // if more vTokens collected than burned\\n                uint256 vTokenResidue = vTokenAmt -\\n                    fractionalVTokenAmt -\\n                    vTokenBurned;\\n\\n                if (vTokenResidue > 0) {\\n                    INFTXVault(params.vtoken).transfer(\\n                        msg.sender,\\n                        vTokenResidue\\n                    );\\n                }\\n            }\\n        }\\n        // send all ETH to sender\\n        IWETH9(WETH).withdraw(wethAmt);\\n        (bool success, ) = msg.sender.call{value: wethAmt}(\\\"\\\");\\n        if (!success) revert UnableToSendETH();\\n    }\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function sellNFTs(\\n        SellNFTsParams calldata params\\n    ) external override returns (uint256 wethReceived) {\\n        address assetAddress = INFTXVault(params.vtoken).assetAddress();\\n\\n        // tranfer NFTs from user to the vault\\n        for (uint256 i; i < params.nftIds.length; ) {\\n            _transferFromERC721(assetAddress, params.nftIds[i], params.vtoken);\\n\\n            if (assetAddress == CRYPTO_PUNKS) {\\n                _approveCryptoPunkERC721(\\n                    assetAddress,\\n                    params.nftIds[i],\\n                    params.vtoken\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // mint vToken\\n        uint256[] memory emptyIds;\\n        uint256 vTokensAmount = INFTXVault(params.vtoken).mint(\\n            params.nftIds,\\n            emptyIds\\n        ) * 1 ether;\\n\\n        INFTXVault(params.vtoken).approve(address(router), vTokensAmount);\\n\\n        wethReceived = router.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: address(params.vtoken),\\n                tokenOut: WETH,\\n                fee: params.fee,\\n                recipient: address(this),\\n                deadline: params.deadline,\\n                amountIn: vTokensAmount,\\n                amountOutMinimum: params.amountOutMinimum,\\n                sqrtPriceLimitX96: params.sqrtPriceLimitX96\\n            })\\n        );\\n\\n        // convert WETH to ETH & send to user\\n        IWETH9(WETH).withdraw(wethReceived);\\n        (bool success, ) = msg.sender.call{value: wethReceived}(\\\"\\\");\\n        if (!success) revert UnableToSendETH();\\n    }\\n\\n    function buyNFTs(BuyNFTsParams calldata params) external payable override {\\n        uint256 vTokenAmt = params.nftIds.length * 1 ether;\\n\\n        // swap ETH to required vTokens amount\\n        router.exactOutputSingle{value: msg.value}(\\n            ISwapRouter.ExactOutputSingleParams({\\n                tokenIn: WETH,\\n                tokenOut: address(params.vtoken),\\n                fee: params.fee,\\n                recipient: address(this),\\n                deadline: params.deadline,\\n                amountOut: vTokenAmt,\\n                amountInMaximum: msg.value,\\n                sqrtPriceLimitX96: params.sqrtPriceLimitX96\\n            })\\n        );\\n\\n        // unwrap vTokens to tokenIds specified, and send to sender\\n        INFTXVault(params.vtoken).redeemTo(\\n            params.nftIds.length,\\n            params.nftIds,\\n            msg.sender\\n        );\\n\\n        // refund ETH\\n        router.refundETH(msg.sender);\\n    }\\n\\n    // =============================================================\\n    //                        ONLY OWNER WRITE\\n    // =============================================================\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function rescueTokens(IERC20 token) external override onlyOwner {\\n        if (address(token) != address(0)) {\\n            uint256 balance = token.balanceOf(address(this));\\n            token.safeTransfer(msg.sender, balance);\\n        } else {\\n            uint256 balance = address(this).balance;\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n            if (!success) revert UnableToSendETH();\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     PUBLIC / EXTERNAL VIEW\\n    // =============================================================\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function quoteBuyNFTs(\\n        address vtoken,\\n        uint256[] memory nftIds,\\n        uint24 fee,\\n        uint160 sqrtPriceLimitX96\\n    ) external override returns (uint256 ethRequired) {\\n        uint256 vTokenAmt = nftIds.length * 1 ether;\\n\\n        (ethRequired, , , ) = quoter.quoteExactOutputSingle(\\n            IQuoterV2.QuoteExactOutputSingleParams({\\n                tokenIn: WETH,\\n                tokenOut: address(vtoken),\\n                amount: vTokenAmt,\\n                fee: fee,\\n                sqrtPriceLimitX96: sqrtPriceLimitX96\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function getPoolExists(\\n        uint256 vaultId,\\n        uint24 fee\\n    ) external view override returns (address pool, bool exists) {\\n        address vToken_ = nftxVaultFactory.vault(vaultId);\\n        pool = IUniswapV3Factory(router.factory()).getPool(vToken_, WETH, fee);\\n\\n        exists = pool != address(0);\\n    }\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function getPool(\\n        address vToken_,\\n        uint24 fee\\n    ) external view override returns (address pool) {\\n        pool = IUniswapV3Factory(router.factory()).getPool(vToken_, WETH, fee);\\n        if (pool == address(0)) revert();\\n    }\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function computePool(\\n        address vToken_,\\n        uint24 fee\\n    ) external view override returns (address) {\\n        return\\n            PoolAddress.computeAddress(\\n                router.factory(),\\n                PoolAddress.getPoolKey(vToken_, WETH, fee)\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc INFTXRouter\\n     */\\n    function isVToken0(address vtoken) public view override returns (bool) {\\n        return vtoken < WETH;\\n    }\\n\\n    // =============================================================\\n    //                      INTERNAL / PRIVATE\\n    // =============================================================\\n\\n    /**\\n     * @notice Transfers sender's ERC721 tokens to a specified recipient.\\n     *\\n     * @param assetAddr Address of the asset being transferred\\n     * @param tokenId The ID of the token being transferred\\n     * @param to The address the token is being transferred to\\n     */\\n\\n    function _transferFromERC721(\\n        address assetAddr,\\n        uint256 tokenId,\\n        address to\\n    ) internal virtual {\\n        bytes memory data;\\n\\n        if (assetAddr != CRYPTO_PUNKS) {\\n            // We push to the vault to avoid an unneeded transfer.\\n            data = abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256)\\\",\\n                msg.sender,\\n                to,\\n                tokenId\\n            );\\n        } else {\\n            // Fix here for frontrun attack.\\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\\n                \\\"punkIndexToAddress(uint256)\\\",\\n                tokenId\\n            );\\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\\n                .staticcall(punkIndexToAddress);\\n            address nftOwner = abi.decode(result, (address));\\n            require(\\n                checkSuccess && nftOwner == msg.sender,\\n                \\\"Not the NFT owner\\\"\\n            );\\n            data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n        }\\n\\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n        require(success, string(resultData));\\n    }\\n\\n    /**\\n     * @notice Approves our Cryptopunk ERC721 tokens to be transferred.\\n     *\\n     * @dev This is only required to provide special logic for Cryptopunks.\\n     *\\n     * @param assetAddr Address of the asset being transferred\\n     * @param tokenId The ID of the token being transferred\\n     * @param to The address the token is being transferred to\\n     */\\n\\n    function _approveCryptoPunkERC721(\\n        address assetAddr,\\n        uint256 tokenId,\\n        address to\\n    ) internal virtual {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"offerPunkForSaleToAddress(uint256,uint256,address)\\\",\\n            tokenId,\\n            0,\\n            to\\n        );\\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n        require(success, string(resultData));\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x4d65624f8501c50c33911c0694b85d1abb3a87f7a13d49bb678b7cc6c68abc75\",\"license\":\"MIT\"},\"src/interfaces/INFTXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {INonfungiblePositionManager} from \\\"@uni-periphery/interfaces/INonfungiblePositionManager.sol\\\";\\nimport {SwapRouter} from \\\"@uni-periphery/SwapRouter.sol\\\";\\nimport {IQuoterV2} from \\\"@uni-periphery/interfaces/IQuoterV2.sol\\\";\\n\\nimport {INFTXVaultFactory} from \\\"@src/v2/interface/INFTXVaultFactory.sol\\\";\\n\\ninterface INFTXRouter {\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    function WETH() external returns (address);\\n\\n    function CRYPTO_PUNKS() external returns (address);\\n\\n    function positionManager() external returns (INonfungiblePositionManager);\\n\\n    function router() external returns (SwapRouter);\\n\\n    function quoter() external returns (IQuoterV2);\\n\\n    function nftxVaultFactory() external returns (INFTXVaultFactory);\\n\\n    // =============================================================\\n    //                            ERRORS\\n    // =============================================================\\n\\n    error UnableToSendETH();\\n\\n    // =============================================================\\n    //                     PUBLIC / EXTERNAL WRITE\\n    // =============================================================\\n\\n    struct AddLiquidityParams {\\n        address vtoken;\\n        uint256 vTokensAmount; // user can provide just vTokens or NFTs or both\\n        uint256[] nftIds;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint24 fee;\\n        uint160 sqrtPriceX96;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice User should have given NFT approval to vtoken contract, else revert\\n     */\\n    function addLiquidity(\\n        AddLiquidityParams calldata params\\n    ) external payable returns (uint256 positionId);\\n\\n    struct RemoveLiquidityParams {\\n        uint256 positionId;\\n        address vtoken;\\n        uint256[] nftIds;\\n        bool receiveVTokens; // directly receive vTokens, instead of redeeming for NFTs\\n        uint128 liquidity;\\n        uint24 swapPoolFee; // the pool through which the fractional vToken to ETH swap should go through\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params) external;\\n\\n    /**\\n     * @param sqrtPriceLimitX96 the price limit, if reached, stop swapping\\n     */\\n    struct SellNFTsParams {\\n        address vtoken;\\n        uint256[] nftIds;\\n        uint256 deadline;\\n        uint24 fee;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /**\\n     * @notice User should have given NFT approval to vtoken contract, else revert\\n     */\\n    function sellNFTs(\\n        SellNFTsParams calldata params\\n    ) external returns (uint256 wethReceived);\\n\\n    /**\\n     * @param sqrtPriceLimitX96 the price limit, if reached, stop swapping\\n     */\\n    struct BuyNFTsParams {\\n        address vtoken;\\n        uint256[] nftIds;\\n        uint256 deadline;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function buyNFTs(BuyNFTsParams calldata params) external payable;\\n\\n    // =============================================================\\n    //                        ONLY OWNER WRITE\\n    // =============================================================\\n\\n    /**\\n     * @param token ERC20 token address or address(0) in case of ETH\\n     */\\n    function rescueTokens(IERC20 token) external;\\n\\n    // =============================================================\\n    //                     PUBLIC / EXTERNAL VIEW\\n    // =============================================================\\n\\n    /**\\n     * @dev This function is not gas efficient and should _not_ be called on chain.\\n     */\\n    function quoteBuyNFTs(\\n        address vtoken,\\n        uint256[] memory nftIds,\\n        uint24 fee,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 ethRequired);\\n\\n    /**\\n     * @notice Get deployed pool address for vaultId. `exists` is false if pool doesn't exist. `vaultId` must be valid.\\n     */\\n    function getPoolExists(\\n        uint256 vaultId,\\n        uint24 fee\\n    ) external view returns (address pool, bool exists);\\n\\n    /**\\n     * @notice Get deployed pool address for vToken. Reverts if pool doesn't exist\\n     */\\n    function getPool(\\n        address vToken_,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /**\\n     * @notice Compute the pool address corresponding to vToken\\n     */\\n    function computePool(\\n        address vToken_,\\n        uint24 fee\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Checks if vToken is token0 or not\\n     */\\n    function isVToken0(address vtoken) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe306054c6288af86e4d1ae5f52ef1dbf12d7373fab6ff4f8d793534a281d21bf\",\"license\":\"MIT\"},\"src/proxy/Create2BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Proxy} from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n * Slightly modified to allow using beacon proxies with Create2.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract Create2BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor() payable {\\n        assert(\\n            _BEACON_SLOT ==\\n                bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1)\\n        );\\n        _setBeacon(msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return IBeacon(_beacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).implementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(\\n                _implementation(),\\n                data,\\n                \\\"BeaconProxy: function call failed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32caa73caa8b41c29e9a682f3f23ecd53ee42d8ded0afe9a765224677a093a43\",\"license\":\"MIT\"},\"src/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n\\n    function upgradeBeaconTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xe975706d350e8153ed9c4e72697960c683cf3a03e829cda9a44565e9d7ef15b1\",\"license\":\"MIT\"},\"src/uniswap/v3-core/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    function setFeeDistributor(address feeDistributor_) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xf6a3fc828600630c06821e8ee54132beff3bd61e45346cbe29b1bb15a1fd1ed8\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IUniswapV3PoolImmutables} from \\\"./pool/IUniswapV3PoolImmutables.sol\\\";\\nimport {IUniswapV3PoolState} from \\\"./pool/IUniswapV3PoolState.sol\\\";\\nimport {IUniswapV3PoolDerivedState} from \\\"./pool/IUniswapV3PoolDerivedState.sol\\\";\\nimport {IUniswapV3PoolActions} from \\\"./pool/IUniswapV3PoolActions.sol\\\";\\nimport {IUniswapV3PoolOwnerActions} from \\\"./pool/IUniswapV3PoolOwnerActions.sol\\\";\\nimport {IUniswapV3PoolErrors} from \\\"./pool/IUniswapV3PoolErrors.sol\\\";\\nimport {IUniswapV3PoolEvents} from \\\"./pool/IUniswapV3PoolEvents.sol\\\";\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolErrors,\\n    IUniswapV3PoolEvents\\n{\\n    function __UniswapV3PoolUpgradeable_init(\\n        address factory_,\\n        address token0_,\\n        address token1_,\\n        uint24 fee_,\\n        int24 tickSpacing_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x69cedf9041236406e776537943a09d9d86f35f43f6587373c91e3e44602a3374\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Distributes the received vault fees among the current LPs, proportional to their liquidity contribution\\n    /// @dev Can only be called by feeDistributor, after it sends the reward tokens to this pool\\n    /// @param rewardsAmount The amount of reward tokens to distribute\\n    /// @param isToken0 If reward token is token0 then true, else false\\n    function distributeRewards(\\n        uint256 rewardsAmount,\\n        bool isToken0\\n    ) external;\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xb5ca9076df43544e07d32e240bce69527f11bf21c6022960b981150466803af9\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Errors emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolErrors {\\n    error LOK();\\n    error TLU();\\n    error TLM();\\n    error TUM();\\n    error AI();\\n    error M0();\\n    error M1();\\n    error AS();\\n    error IIA();\\n    error L();\\n    error F0();\\n    error F1();\\n}\\n\",\"keccak256\":\"0xf80abf13fb1fafc127ba4e792f240dd8ea7c8c893978cdfd8439c27fae9a037b\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// @return observationIndex The index of the last oracle observation that was written,\\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @return The liquidity at the current price of the pool\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper\\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return liquidity The amount of liquidity in the position,\\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// @return initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x44fa2ce1182f6c2f6bead3d1737804bf7e112252ae86e0f2e92f9b8249603f43\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-core/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.15;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport './interfaces/ISwapRouter.sol';\\nimport './base/PeripheryImmutableState.sol';\\nimport './base/PeripheryValidation.sol';\\nimport './base/PeripheryPaymentsWithFee.sol';\\nimport './base/Multicall.sol';\\nimport './base/SelfPermit.sol';\\nimport './libraries/Path.sol';\\nimport './libraries/PoolAddress.sol';\\nimport './libraries/CallbackValidation.sol';\\nimport './interfaces/external/IWETH9.sol';\\n\\n/// @title Uniswap V3 Swap Router\\n/// @notice Router for stateless execution of swaps against Uniswap V3\\ncontract SwapRouter is\\n    ISwapRouter,\\n    PeripheryImmutableState,\\n    PeripheryValidation,\\n    PeripheryPaymentsWithFee,\\n    Multicall,\\n    SelfPermit\\n{\\n    using Path for bytes;\\n    using SafeCast for uint256;\\n\\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\\n    /// can never actually be this value\\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\\n\\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\n\\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\\n\\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) private view returns (IUniswapV3Pool) {\\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\\n    }\\n\\n    struct SwapCallbackData {\\n        bytes path;\\n        address payer;\\n    }\\n\\n    /// @inheritdoc IUniswapV3SwapCallback\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external override {\\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\\n\\n        (bool isExactInput, uint256 amountToPay) = amount0Delta > 0\\n            ? (tokenIn < tokenOut, uint256(amount0Delta))\\n            : (tokenOut < tokenIn, uint256(amount1Delta));\\n        if (isExactInput) {\\n            pay(tokenIn, data.payer, msg.sender, amountToPay);\\n        } else {\\n            // either initiate the next swap or pay\\n            if (data.path.hasMultiplePools()) {\\n                data.path = data.path.skipToken();\\n                exactOutputInternal(amountToPay, msg.sender, 0, data);\\n            } else {\\n                amountInCached = amountToPay;\\n                tokenIn = tokenOut; // swap in/out because exact output swaps are reversed\\n                pay(tokenIn, data.payer, msg.sender, amountToPay);\\n            }\\n        }\\n    }\\n\\n    /// @dev Performs a single exact input swap\\n    function exactInputInternal(\\n        uint256 amountIn,\\n        address recipient,\\n        uint160 sqrtPriceLimitX96,\\n        SwapCallbackData memory data\\n    ) private returns (uint256 amountOut) {\\n        // allow swapping to the router address with address 0\\n        if (recipient == address(0)) recipient = address(this);\\n\\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\\n\\n        bool zeroForOne = tokenIn < tokenOut;\\n\\n        (int256 amount0, int256 amount1) = getPool(tokenIn, tokenOut, fee).swap(\\n            recipient,\\n            zeroForOne,\\n            amountIn.toInt256(),\\n            sqrtPriceLimitX96 == 0\\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\\n                : sqrtPriceLimitX96,\\n            abi.encode(data)\\n        );\\n\\n        return uint256(-(zeroForOne ? amount1 : amount0));\\n    }\\n\\n    /// @inheritdoc ISwapRouter\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        override\\n        checkDeadline(params.deadline)\\n        returns (uint256 amountOut)\\n    {\\n        amountOut = exactInputInternal(\\n            params.amountIn,\\n            params.recipient,\\n            params.sqrtPriceLimitX96,\\n            SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender})\\n        );\\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\\n    }\\n\\n    /// @inheritdoc ISwapRouter\\n    function exactInput(ExactInputParams memory params)\\n        external\\n        payable\\n        override\\n        checkDeadline(params.deadline)\\n        returns (uint256 amountOut)\\n    {\\n        address payer = msg.sender; // msg.sender pays for the first hop\\n\\n        while (true) {\\n            bool hasMultiplePools = params.path.hasMultiplePools();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            params.amountIn = exactInputInternal(\\n                params.amountIn,\\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\\n                0,\\n                SwapCallbackData({\\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\\n                    payer: payer\\n                })\\n            );\\n\\n            // decide whether to continue or terminate\\n            if (hasMultiplePools) {\\n                payer = address(this); // at this point, the caller has paid\\n                params.path = params.path.skipToken();\\n            } else {\\n                amountOut = params.amountIn;\\n                break;\\n            }\\n        }\\n\\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\\n    }\\n\\n    /// @dev Performs a single exact output swap\\n    function exactOutputInternal(\\n        uint256 amountOut,\\n        address recipient,\\n        uint160 sqrtPriceLimitX96,\\n        SwapCallbackData memory data\\n    ) private returns (uint256 amountIn) {\\n        // allow swapping to the router address with address 0\\n        if (recipient == address(0)) recipient = address(this);\\n\\n        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\\n\\n        bool zeroForOne = tokenIn < tokenOut;\\n\\n        (int256 amount0Delta, int256 amount1Delta) = getPool(tokenIn, tokenOut, fee).swap(\\n            recipient,\\n            zeroForOne,\\n            -amountOut.toInt256(),\\n            sqrtPriceLimitX96 == 0\\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\\n                : sqrtPriceLimitX96,\\n            abi.encode(data)\\n        );\\n\\n        uint256 amountOutReceived;\\n        (amountIn, amountOutReceived) = zeroForOne\\n            ? (uint256(amount0Delta), uint256(-amount1Delta))\\n            : (uint256(amount1Delta), uint256(-amount0Delta));\\n        // it's technically possible to not receive the full output amount,\\n        // so if no price limit has been specified, require this possibility away\\n        if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);\\n    }\\n\\n    /// @inheritdoc ISwapRouter\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        override\\n        checkDeadline(params.deadline)\\n        returns (uint256 amountIn)\\n    {\\n        // avoid an SLOAD by using the swap return data\\n        amountIn = exactOutputInternal(\\n            params.amountOut,\\n            params.recipient,\\n            params.sqrtPriceLimitX96,\\n            SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender})\\n        );\\n\\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\\n        // has to be reset even though we don't use it in the single hop case\\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\n    }\\n\\n    /// @inheritdoc ISwapRouter\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        override\\n        checkDeadline(params.deadline)\\n        returns (uint256 amountIn)\\n    {\\n        // it's okay that the payer is fixed to msg.sender here, as they're only paying for the \\\"final\\\" exact output\\n        // swap, which happens first, and subsequent swaps are paid for within nested callback frames\\n        exactOutputInternal(\\n            params.amountOut,\\n            params.recipient,\\n            0,\\n            SwapCallbackData({path: params.path, payer: msg.sender})\\n        );\\n\\n        amountIn = amountInCached;\\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\n    }\\n}\\n\",\"keccak256\":\"0x073892b17a7d3db3dd1e3129816ab712a342dee5214aaf1fdae0eb47d06f6308\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/base/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.15;\\n\\n/// @title Function for getting block timestamp\\n/// @dev Base contract that is overridden for tests\\nabstract contract BlockTimestamp {\\n    /// @dev Method that exists purely to be overridden for tests\\n    /// @return The current block timestamp\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xec031d21f3edd6dd656900b7575d794a267a2594ac27b881546e2ffb1161c9f9\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/base/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.15;\\npragma abicoder v2;\\n\\nimport '../interfaces/IMulticall.sol';\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4ea1fcc8d797eb11d7162039d83637ea7430f37edfc2c457a1e852ef70ea877\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/base/PeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.15;\\n\\nimport '../interfaces/IPeripheryImmutableState.sol';\\n\\n/// @title Immutable state\\n/// @notice Immutable state used by periphery contracts\\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override factory;\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override WETH9;\\n\\n    constructor(address _factory, address _WETH9) {\\n        factory = _factory;\\n        WETH9 = _WETH9;\\n    }\\n}\\n\",\"keccak256\":\"0xeb81416b3899bbbb1960728c345ddb7b1e13f3ba236243d78de13ac54fcddc07\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/base/PeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../interfaces/IPeripheryPayments.sol';\\nimport '../interfaces/external/IWETH9.sol';\\n\\nimport '../libraries/TransferHelper.sol';\\n\\nimport './PeripheryImmutableState.sol';\\n\\nabstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\\n    receive() external payable {\\n        require(msg.sender == WETH9, 'Not WETH9');\\n    }\\n\\n    /// @inheritdoc IPeripheryPayments\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(WETH9).withdraw(balanceWETH9);\\n            TransferHelper.safeTransferETH(recipient, balanceWETH9);\\n        }\\n    }\\n\\n    /// @inheritdoc IPeripheryPayments\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) public payable override {\\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\\n        require(balanceToken >= amountMinimum, 'Insufficient token');\\n\\n        if (balanceToken > 0) {\\n            TransferHelper.safeTransfer(token, recipient, balanceToken);\\n        }\\n    }\\n\\n    /// @inheritdoc IPeripheryPayments\\n    function refundETH() external payable override {\\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);\\n    }\\n\\n    /// @inheritdoc IPeripheryPayments\\n    function refundETH(address receiver) external payable override {\\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(receiver, address(this).balance);\\n    }\\n\\n    /// @param token The token to pay\\n    /// @param payer The entity that must pay\\n    /// @param recipient The entity that will receive payment\\n    /// @param value The amount to pay\\n    function pay(\\n        address token,\\n        address payer,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        if (token == WETH9 && address(this).balance >= value) {\\n            // pay with WETH9\\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\\n            IWETH9(WETH9).transfer(recipient, value);\\n        } else if (payer == address(this)) {\\n            // pay with tokens already in the contract (for the exact input multihop case)\\n            TransferHelper.safeTransfer(token, recipient, value);\\n        } else {\\n            // pull payment\\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e3234bd8059c6529529b0deccdd49ff41a9b784491b2e7530925477b375ea5\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/base/PeripheryPaymentsWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './PeripheryPayments.sol';\\nimport '../interfaces/IPeripheryPaymentsWithFee.sol';\\n\\nimport '../interfaces/external/IWETH9.sol';\\nimport '../libraries/TransferHelper.sol';\\n\\nabstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {\\n    /// @inheritdoc IPeripheryPaymentsWithFee\\n    function unwrapWETH9WithFee(\\n        uint256 amountMinimum,\\n        address recipient,\\n        uint256 feeBips,\\n        address feeRecipient\\n    ) public payable override {\\n        require(feeBips > 0 && feeBips <= 100);\\n\\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(WETH9).withdraw(balanceWETH9);\\n            uint256 feeAmount = (balanceWETH9 * feeBips) / 10_000;\\n            if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);\\n            TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\\n        }\\n    }\\n\\n    /// @inheritdoc IPeripheryPaymentsWithFee\\n    function sweepTokenWithFee(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient,\\n        uint256 feeBips,\\n        address feeRecipient\\n    ) public payable override {\\n        require(feeBips > 0 && feeBips <= 100);\\n\\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\\n        require(balanceToken >= amountMinimum, 'Insufficient token');\\n\\n        if (balanceToken > 0) {\\n            uint256 feeAmount = (balanceToken * feeBips) / 10_000;\\n            if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\\n            TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x45f7c9f873ab66e588c25a579ad2fe0db90e98a424675551acb3d54e343bcc74\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/base/PeripheryValidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.15;\\n\\nimport './BlockTimestamp.sol';\\n\\nabstract contract PeripheryValidation is BlockTimestamp {\\n    modifier checkDeadline(uint256 deadline) {\\n        require(_blockTimestamp() <= deadline, 'Transaction too old');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdb92575277ee95a5b14f2736eda1cc743ee24977885c1caee6f8fbb6b2714f25\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/base/SelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol';\\n\\nimport '../interfaces/ISelfPermit.sol';\\nimport '../interfaces/external/IERC20PermitAllowed.sol';\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\\n/// that requires an approval in a single transaction.\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xb3357756b67cd51dd55c77a9009830662aef963c8edf0846df6ee686e2269d52\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x3357b065654abb7f4a9ebd184a260bc39efde2afa4e99dca2e72ffc28e9c2984\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `receiver`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH(address receiver) external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xefb0309b3b4407e419bf8b9d80b7838174258bc364a949c493fd0d3ffd25b23c\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/IPeripheryPaymentsWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport './IPeripheryPayments.sol';\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    function unwrapWETH9WithFee(\\n        uint256 amountMinimum,\\n        address recipient,\\n        uint256 feeBips,\\n        address feeRecipient\\n    ) external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    function sweepTokenWithFee(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient,\\n        uint256 feeBips,\\n        address feeRecipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x23ebe0ced112c7ca3869868874b691fcbb50f90c482580dc9ebe718bda34edfc\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\",\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/ISelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.15;\\n\\nimport {IUniswapV3SwapCallback} from '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\nimport {IPeripheryImmutableState} from \\\"./IPeripheryImmutableState.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback, IPeripheryImmutableState {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xadd0e9885b1f703a986500f37dd1b2b03fd1c1e9505f20b689c54f16b63546ba\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/external/IERC20PermitAllowed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Interface for permit\\n/// @notice Interface used by DAI/CHAI for permit\\ninterface IERC20PermitAllowed {\\n    /// @notice Approve the spender to spend some tokens via the holder signature\\n    /// @dev This is the permit interface used by DAI and CHAI\\n    /// @param holder The address of the token holder, the token owner\\n    /// @param spender The address of the token spender\\n    /// @param nonce The holder's nonce, increases at each call to permit\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8c4c1b8e724e0a78cb691d703dd37cd91b8bd6600537fb227807a194025a792d\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/interfaces/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xfec32491485cbd9ce047b9219d6386b55900835f1844e8fd490837e2ee2d48c9\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xe78ae657b6c570ba9b200c7cbf1247a12dbce044aad00f55593ba5260df9a021\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/libraries/CallbackValidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\nimport './PoolAddress.sol';\\n\\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\\nlibrary CallbackValidation {\\n    /// @notice Returns the address of a valid Uniswap V3 Pool\\n    /// @param factory The contract address of the Uniswap V3 factory\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The V3 pool contract address\\n    function verifyCallback(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal view returns (IUniswapV3Pool pool) {\\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\\n    }\\n\\n    /// @notice Returns the address of a valid Uniswap V3 Pool\\n    /// @param factory The contract address of the Uniswap V3 factory\\n    /// @param poolKey The identifying key of the V3 pool\\n    /// @return pool The V3 pool contract address\\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\\n        internal\\n        view\\n        returns (IUniswapV3Pool pool)\\n    {\\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\\n        require(msg.sender == address(pool));\\n    }\\n}\\n\",\"keccak256\":\"0x02bb02c6d9aea54901f7f94a6ef9a158d8bca49087f4b62f34d1a43761b4712f\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {Create2Upgradeable} from \\\"@openzeppelin-upgradeable/contracts/utils/Create2Upgradeable.sol\\\";\\nimport {Create2BeaconProxy} from \\\"@src/proxy/Create2BeaconProxy.sol\\\";\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant BEACON_CODE_HASH =\\n        keccak256(type(Create2BeaconProxy).creationCode);\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(\\n        address factory,\\n        PoolKey memory key\\n    ) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = Create2Upgradeable.computeAddress(\\n            keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n            BEACON_CODE_HASH,\\n            factory\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x29a85b60419d5b799e94db7bac924664cd6ae66083bdb93905f7891365502eb3\",\"license\":\"GPL-2.0-or-later\"},\"src/uniswap/v3-periphery/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x32821db2a308f45fe9fe64a3c9c7413626ea5aa8eb884a31256b3c19296597d2\",\"license\":\"GPL-2.0-or-later\"},\"src/v2/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"src/v2/interface/INFTXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"./INFTXVaultFactory.sol\\\";\\nimport \\\"./INFTXEligibility.sol\\\";\\n\\n// TODO: organize using comment blocks\\ninterface INFTXVault is IERC20Upgradeable {\\n    function manager() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function eligibilityStorage() external view returns (INFTXEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees()\\n        external\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n    event EnableRandomSwapUpdated(bool enabled);\\n    event EnableTargetSwapUpdated(bool enabled);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(\\n        string memory name_,\\n        string memory symbol_\\n    ) external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(\\n        uint256 amount,\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(\\n        uint256[] calldata tokenIds\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7a16086f8385181df9f1fa2c3c6e3556e19c3511f33e84df4d94a057347c7dc\",\"license\":\"MIT\"},\"src/v2/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function zapContracts(address addr) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event UpdatedZapContract(address zap, bool excluded);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract, bool _excluded) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0xb6d64ca7f387cb11b1a345add3556c21d2b3c9fa9b8d8645a3312bcbb33ce9bb\",\"license\":\"MIT\"},\"src/v2/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0x9992f3a4f9a6162af7eb1ef2267eb6c7e2af32f1acd623eab1aa732e315720fe\",\"license\":\"MIT\"},\"src/v2/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162003fe138038062003fe1833981016040819052620000359162000145565b6200004033620000dc565b6001600160a01b0380851660a081905284821660c05283821660e05290821661010052604080516312a9293f60e21b81529051634aa4a4fc916004808201926020929091908290030181865afa1580156200009f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c59190620001ad565b6001600160a01b031660805250620001d492505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200014257600080fd5b50565b600080600080608085870312156200015c57600080fd5b845162000169816200012c565b60208601519094506200017c816200012c565b60408601519093506200018f816200012c565b6060860151909250620001a2816200012c565b939692955090935050565b600060208284031215620001c057600080fd5b8151620001cd816200012c565b9392505050565b60805160a05160c05160e05161010051613cf6620002eb600039600081816102f401526106be01526000818161042101526109420152600081816104c60152818161075301528181610be901528181610c81015281816116ed015281816118ff01528181611cac01528181611d32015281816120f5015261223e0152600081816103590152818161118b015281816112a3015281816113df0152818161153e015281816115ac0152818161196b0152611b140152600081816103eb01528181610511015281816107f5015281816108bc01528181610cc701528181610dd20152818161122f015281816112740152818161172901528181611d8f015281816120160152818161219701526122c80152613cf66000f3fe6080604052600436106200017e5760003560e01c80637ca3d2f811620000cf578063c8a28184116200007d578063f2fde38b1162000060578063f2fde38b146200048d578063f887ea4014620004b2578063f932e32a14620004e857600080fd5b8063c8a281841462000443578063de6a4abf146200046857600080fd5b80639519cc2b11620000b25780639519cc2b14620003b2578063ad5c464814620003d7578063c6bbd5a7146200040d57600080fd5b80637ca3d2f8146200037b5780638da5cb5b146200039257600080fd5b80631d328136116200012d5780636efdf4ce11620001105780636efdf4ce1462000316578063715018a6146200032d578063791b98bc146200034557600080fd5b80631d328136146200029d5780633801daf114620002e057600080fd5b806306eba352116200016257806306eba35214620001fb578063089be64c146200022f578063150b7a02146200025457600080fd5b8062ae3bf8146200018b5780630500a30e14620001b257600080fd5b366200018657005b600080fd5b3480156200019857600080fd5b50620001b0620001aa36600462002b75565b62000549565b005b348015620001bf57600080fd5b50620001d7620001d136600462002bae565b620006b7565b604080516001600160a01b0390931683529015156020830152015b60405180910390f35b3480156200020857600080fd5b50620002206200021a36600462002c5b565b6200088e565b604051908152602001620001f2565b3480156200023c57600080fd5b50620002206200024e36600462002d37565b620009c0565b3480156200026157600080fd5b50620002836200027336600462002d75565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001620001f2565b348015620002aa57600080fd5b50620002c773b47e3cd837ddf8e4c57f05d70ab865de6e193bbb81565b6040516001600160a01b039091168152602001620001f2565b348015620002ed57600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b620002206200032736600462002e46565b62000ead565b3480156200033a57600080fd5b50620001b062001659565b3480156200035257600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b620001b06200038c36600462002e85565b620016c3565b3480156200039f57600080fd5b506000546001600160a01b0316620002c7565b348015620003bf57600080fd5b50620001b0620003d136600462002ec3565b62001969565b348015620003e457600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156200041a57600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156200045057600080fd5b50620002c76200046236600462002f02565b620020f1565b3480156200047557600080fd5b50620002c76200048736600462002f02565b62002236565b3480156200049a57600080fd5b50620001b0620004ac36600462002b75565b620022fb565b348015620004bf57600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b348015620004f557600080fd5b50620005386200050736600462002b75565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691161090565b6040519015158152602001620001f2565b6000546001600160a01b03163314620005a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381161562000643576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801562000601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000627919062002f33565b90506200063f6001600160a01b0383163383620023e0565b5050565b6040514790600090339083908381818185875af1925050503d806000811462000689576040519150601f19603f3d011682016040523d82523d6000602084013e6200068e565b606091505b5050905080620006b15760405163260e7d5b60e11b815260040160405180910390fd5b50505b50565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381a36fb6866040518263ffffffff1660e01b81526004016200070b91815260200190565b602060405180830381865afa15801562000729573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200074f919062002f4d565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d6919062002f4d565b604051630b4c774160e11b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015262ffffff871660448301529190911690631698ee8290606401602060405180830381865afa15801562000852573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000878919062002f4d565b956001600160a01b038716151595509350505050565b6000808451670de0b6b3a7640000620008a8919062002f83565b6040805160a0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682528981166020830190815282840185815262ffffff8a8116606086019081528a8516608087019081529651635e90b82560e11b81529551851660048701529251841660248601529051604485015290511660648301529151821660848201529192507f0000000000000000000000000000000000000000000000000000000000000000169063bd21704a9060a4016080604051808303816000875af11580156200098c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009b2919062002fa5565b509198975050505050505050565b600080620009d2602084018462002b75565b6001600160a01b0316631ba46cfd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a36919062002f4d565b905060005b62000a4a602085018562002ffb565b905081101562000b155762000a9d8262000a68602087018762002ffb565b8481811062000a7b5762000a7b6200304f565b9050602002013586600001602081019062000a97919062002b75565b62002434565b73b47e3cd837ddf8e4c57f05d70ab865de6e193bba196001600160a01b0383160162000b0c5762000b0c8262000ad7602087018762002ffb565b8481811062000aea5762000aea6200304f565b9050602002013586600001602081019062000b06919062002b75565b6200269c565b60010162000a3b565b506060600062000b29602086018662002b75565b6001600160a01b0316633d5d190c62000b46602088018862002ffb565b856040518463ffffffff1660e01b815260040162000b6793929190620030b5565b6020604051808303816000875af115801562000b87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bad919062002f33565b62000bc190670de0b6b3a764000062002f83565b905062000bd2602086018662002b75565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052919091169063095ea7b3906044016020604051808303816000875af115801562000c44573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c6a919062003121565b506040805161010081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063414bf389908062000cb860208a018a62002b75565b6001600160a01b0390811682527f000000000000000000000000000000000000000000000000000000000000000016602082015260400162000d0160808a0160608b0162003141565b62ffffff168152602001306001600160a01b0316815260200188604001358152602001848152602001886080013581526020018860a001602081019062000d49919062002b75565b6001600160a01b03168152506040518263ffffffff1660e01b815260040162000d7391906200315f565b6020604051808303816000875af115801562000d93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000db9919062002f33565b604051632e1a7d4d60e01b8152600481018290529094507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801562000e1f57600080fd5b505af115801562000e34573d6000803e3d6000fd5b50506040516000925033915086908381818185875af1925050503d806000811462000e7c576040519150601f19603f3d011682016040523d82523d6000602084013e62000e81565b606091505b505090508062000ea45760405163260e7d5b60e11b815260040160405180910390fd5b50505050919050565b60006020820135801562000f485762000eca602084018462002b75565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906323b872dd906064016020604051808303816000875af115801562000f20573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f46919062003121565b505b600062000f59604085018562002ffb565b905011156200116557600062000f73602085018562002b75565b6001600160a01b0316631ba46cfd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fb1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd7919062002f4d565b905060005b62000feb604086018662002ffb565b9050811015620010aa57620010388262001009604088018862002ffb565b848181106200101c576200101c6200304f565b9050602002013587600001602081019062000a97919062002b75565b73b47e3cd837ddf8e4c57f05d70ab865de6e193bba196001600160a01b03831601620010a157620010a18262001072604088018862002ffb565b848181106200108557620010856200304f565b9050602002013587600001602081019062000b06919062002b75565b60010162000fdc565b506060620010bc602086018662002b75565b6001600160a01b0316633d5d190c620010d9604088018862002ffb565b846040518463ffffffff1660e01b8152600401620010fa93929190620030b5565b6020604051808303816000875af11580156200111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001140919062002f33565b6200115490670de0b6b3a764000062002f83565b620011609084620031ce565b925050505b62001174602084018462002b75565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052919091169063095ea7b3906044016020604051808303816000875af1158015620011e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200120c919062003121565b5060006200122262000507602086018662002b75565b90506000808262001263577f00000000000000000000000000000000000000000000000000000000000000006200125d602088018862002b75565b62001294565b62001272602087018762002b75565b7f00000000000000000000000000000000000000000000000000000000000000005b90925090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166313ead5628383620012dc60c08b0160a08c0162003141565b620012ee60e08c0160c08d0162002b75565b6040516001600160e01b031960e087901b1681526001600160a01b039485166004820152928416602484015262ffffff90911660448301529190911660648201526084016020604051808303816000875af115801562001352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001378919062002f4d565b506000806000808615620013b45787935061138888116200139b576000620013a9565b620013a961138889620031e9565b9150349250620013dd565b3493508792506113888811620013cc576000620013da565b620013da61138889620031e9565b90505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166388316456346040518061016001604052808a6001600160a01b03168152602001896001600160a01b031681526020018e60a00160208101906200144c919062003141565b62ffffff1681526020018e60600160208101906200146b919062003203565b60020b81526020018e608001602081019062001488919062003203565b60020b8152602001888152602001878152602001868152602001858152602001336001600160a01b031681526020018e60e001358152506040518363ffffffff1660e01b8152600401620014dd919062003228565b60806040518083038185885af1158015620014fc573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001523919062003310565b505060405163073db96d60e21b8152336004820152919a50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631cf6e5b490602401600060405180830381600087803b1580156200158b57600080fd5b505af1158015620015a0573d6000803e3d6000fd5b50506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063df2ab5bb9050620015e460208d018d62002b75565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260006024820152336044820152606401600060405180830381600087803b1580156200163357600080fd5b505af115801562001648573d6000803e3d6000fd5b505050505050505050505050919050565b6000546001600160a01b03163314620016b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005a0565b620016c160006200270d565b565b6000620016d4602083018362002ffb565b620016e99150670de0b6b3a764000062002f83565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db3e2198346040518061010001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018660000160208101906200176b919062002b75565b6001600160a01b031681526020016200178b608088016060890162003141565b62ffffff168152602001306001600160a01b0316815260200186604001358152602001858152602001348152602001866080016020810190620017cf919062002b75565b6001600160a01b03168152506040518363ffffffff1660e01b8152600401620017f991906200315f565b60206040518083038185885af115801562001818573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200183f919062002f33565b506200184f602083018362002b75565b6001600160a01b0316639d54def66200186c602085018562002ffb565b90506200187d602086018662002ffb565b336040518563ffffffff1660e01b81526004016200189f949392919062003351565b6000604051808303816000875af1158015620018bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018e9919081019062003387565b5060405163073db96d60e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631cf6e5b490602401600060405180830381600087803b1580156200194c57600080fd5b505af115801562001961573d6000803e3d6000fd5b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c49ccbe6040518060a0016040528084600001358152602001846080016020810190620019c2919062003416565b6fffffffffffffffffffffffffffffffff1681526020018460c0013581526020018460e0013581526020018461010001358152506040518263ffffffff1660e01b815260040162001a5a9190600060a082019050825182526fffffffffffffffffffffffffffffffff602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b60408051808303816000875af115801562001a79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a9f919062003436565b5050604080516080810182528235815230602082019081526fffffffffffffffffffffffffffffffff82840181815260608401828152945163fc6f786560e01b81529351600485015291516001600160a01b0390811660248501529151811660448401529251909216606482015260009182917f00000000000000000000000000000000000000000000000000000000000000009091169063fc6f78659060840160408051808303816000875af115801562001b5f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b85919062003436565b9092509050600062001ba262000507604086016020870162002b75565b90506000808262001bb557838562001bb8565b84845b909250905062001bcf60808701606088016200345b565b1562001c645762001be7604087016020880162002b75565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801562001c37573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c5d919062003121565b5062002000565b600062001c7a670de0b6b3a7640000846200347b565b9050801562001ffe5762001c95604088016020890162002b75565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052919091169063095ea7b3906044016020604051808303816000875af115801562001d07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d2d919062003121565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663414bf3896040518061010001604052808b602001602081019062001d80919062002b75565b6001600160a01b0390811682527f000000000000000000000000000000000000000000000000000000000000000016602082015260400162001dc960c08d0160a08e0162003141565b62ffffff168152602001306001600160a01b031681526020014281526020018581526020016000815260200160006001600160a01b03168152506040518263ffffffff1660e01b815260040162001e2191906200315f565b6020604051808303816000875af115801562001e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e67919062002f33565b905062001e758184620031ce565b925062001e896040890160208a0162002b75565b6001600160a01b0316639d54def662001ea660408b018b62002ffb565b905062001eb760408c018c62002ffb565b336040518563ffffffff1660e01b815260040162001ed9949392919062003351565b6000604051808303816000875af115801562001ef9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001f23919081019062003387565b50600062001f3560408a018a62002ffb565b62001f4a9150670de0b6b3a764000062002f83565b905060008162001f5b8588620031e9565b62001f679190620031e9565b9050801562001ffa5762001f8260408b0160208c0162002b75565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801562001fd2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ff8919062003121565b505b5050505b505b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156200206357600080fd5b505af115801562002078573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114620020c0576040519150601f19603f3d011682016040523d82523d6000602084013e620020c5565b606091505b5050905080620020e85760405163260e7d5b60e11b815260040160405180910390fd5b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002152573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002178919062002f4d565b604051630b4c774160e11b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015262ffffff851660448301529190911690631698ee8290606401602060405180830381865afa158015620021f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200221a919062002f4d565b90506001600160a01b0381166200223057600080fd5b92915050565b6000620022f47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200229b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022c1919062002f4d565b620022ee857f00000000000000000000000000000000000000000000000000000000000000008662002775565b620027e1565b9392505050565b6000546001600160a01b03163314620023575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005a0565b6001600160a01b038116620023d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620005a0565b620006b4816200270d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052620006b190849062002892565b60606001600160a01b03841673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb14620024af576040513360248201526001600160a01b03831660448201526064810184905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b179052905062002613565b600083604051602401620024c591815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316630b02f02d60e31b1790525190915060009081906001600160a01b0388169062002510908590620034d1565b600060405180830381855afa9150503d80600081146200254d576040519150601f19603f3d011682016040523d82523d6000602084013e62002552565b606091505b50915091506000818060200190518101906200256f919062002f4d565b90508280156200258757506001600160a01b03811633145b620025d55760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401620005a0565b6040516024810188905260440160408051601f198184030181529190526020810180516001600160e01b031663104c9fd360e31b1790529450505050505b600080856001600160a01b031683604051620026309190620034d1565b6000604051808303816000865af19150503d80600081146200266f576040519150601f19603f3d011682016040523d82523d6000602084013e62002674565b606091505b5091509150818190620020e85760405162461bcd60e51b8152600401620005a09190620034ef565b604051602481018390526000604482018190526001600160a01b03831660648301529060840160408051601f198184030181529181526020820180516001600160e01b031663bf31196f60e01b1790525190915060009081906001600160a01b0387169062002630908590620034d1565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b03161115620027b1579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b0316106200280a57600080fd5b815160208084015160408086015181516001600160a01b0395861694810194909452939091169082015262ffffff9091166060820152620022f4906080016040516020818303038152906040528051906020012060405180602001620028709062002b51565b6020820181038252601f19601f8201166040525080519060200120856200297e565b6000620028e9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620029a89092919063ffffffff16565b805190915015620006b157808060200190518101906200290a919062003121565b620006b15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401620005a0565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6060620029b98484600085620029c1565b949350505050565b60608247101562002a3b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401620005a0565b6001600160a01b0385163b62002a945760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620005a0565b600080866001600160a01b0316858760405162002ab29190620034d1565b60006040518083038185875af1925050503d806000811462002af1576040519150601f19603f3d011682016040523d82523d6000602084013e62002af6565b606091505b509150915062002b0882828662002b13565b979650505050505050565b6060831562002b24575081620022f4565b82511562002b355782518084602001fd5b8160405162461bcd60e51b8152600401620005a09190620034ef565b6107c5806200352583390190565b6001600160a01b0381168114620006b457600080fd5b60006020828403121562002b8857600080fd5b8135620022f48162002b5f565b803562ffffff8116811462002ba957600080fd5b919050565b6000806040838503121562002bc257600080fd5b8235915062002bd46020840162002b95565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562002c1f5762002c1f62002bdd565b604052919050565b600067ffffffffffffffff82111562002c445762002c4462002bdd565b5060051b60200190565b803562002ba98162002b5f565b6000806000806080858703121562002c7257600080fd5b843562002c7f8162002b5f565b935060208581013567ffffffffffffffff81111562002c9d57600080fd5b8601601f8101881362002caf57600080fd5b803562002cc662002cc08262002c27565b62002bf3565b81815260059190911b8201830190838101908a83111562002ce657600080fd5b928401925b8284101562002d065783358252928401929084019062002ceb565b809750505050505062002d1c6040860162002b95565b915062002d2c6060860162002c4e565b905092959194509250565b60006020828403121562002d4a57600080fd5b813567ffffffffffffffff81111562002d6257600080fd5b820160c08185031215620022f457600080fd5b6000806000806080858703121562002d8c57600080fd5b843562002d998162002b5f565b935060208581013562002dac8162002b5f565b935060408601359250606086013567ffffffffffffffff8082111562002dd157600080fd5b818801915088601f83011262002de657600080fd5b81358181111562002dfb5762002dfb62002bdd565b62002e0f601f8201601f1916850162002bf3565b9150808252898482850101111562002e2657600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121562002e5957600080fd5b813567ffffffffffffffff81111562002e7157600080fd5b82016101008185031215620022f457600080fd5b60006020828403121562002e9857600080fd5b813567ffffffffffffffff81111562002eb057600080fd5b820160a08185031215620022f457600080fd5b60006020828403121562002ed657600080fd5b813567ffffffffffffffff81111562002eee57600080fd5b82016101208185031215620022f457600080fd5b6000806040838503121562002f1657600080fd5b823562002f238162002b5f565b915062002bd46020840162002b95565b60006020828403121562002f4657600080fd5b5051919050565b60006020828403121562002f6057600080fd5b8151620022f48162002b5f565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161562002fa05762002fa062002f6d565b500290565b6000806000806080858703121562002fbc57600080fd5b84519350602085015162002fd08162002b5f565b604086015190935063ffffffff8116811462002feb57600080fd5b6060959095015193969295505050565b6000808335601e198436030181126200301357600080fd5b83018035915067ffffffffffffffff8211156200302f57600080fd5b6020019150600581901b36038213156200304857600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156200309857600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000620030cb60408301858762003065565b82810360208481019190915284518083528582019282019060005b818110156200310457845183529383019391830191600101620030e6565b509098975050505050505050565b8015158114620006b457600080fd5b6000602082840312156200313457600080fd5b8151620022f48162003112565b6000602082840312156200315457600080fd5b620022f48262002b95565b61010081016200223082846001600160a01b0380825116835280602083015116602084015262ffffff60408301511660408401528060608301511660608401526080820151608084015260a082015160a084015260c082015160c08401528060e08301511660e0840152505050565b60008219821115620031e457620031e462002f6d565b500190565b600082821015620031fe57620031fe62002f6d565b500390565b6000602082840312156200321657600080fd5b81358060020b8114620022f457600080fd5b81516001600160a01b03168152610160810160208301516200325560208401826001600160a01b03169052565b5060408301516200326d604084018262ffffff169052565b50606083015162003283606084018260020b9052565b50608083015162003299608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151620032e0828501826001600160a01b03169052565b505061014092830151919092015290565b6fffffffffffffffffffffffffffffffff81168114620006b457600080fd5b600080600080608085870312156200332757600080fd5b8451935060208501516200333b81620032f1565b6040860151606090960151949790965092505050565b8481526060602082015260006200336d60608301858762003065565b90506001600160a01b038316604083015295945050505050565b600060208083850312156200339b57600080fd5b825167ffffffffffffffff811115620033b357600080fd5b8301601f81018513620033c557600080fd5b8051620033d662002cc08262002c27565b81815260059190911b82018301908381019087831115620033f657600080fd5b928401925b8284101562002b0857835182529284019290840190620033fb565b6000602082840312156200342957600080fd5b8135620022f481620032f1565b600080604083850312156200344a57600080fd5b505080516020909101519092909150565b6000602082840312156200346e57600080fd5b8135620022f48162003112565b6000826200349957634e487b7160e01b600052601260045260246000fd5b500690565b60005b83811015620034bb578181015183820152602001620034a1565b83811115620034cb576000848401525b50505050565b60008251620034e58184602087016200349e565b9190910192915050565b6020815260008251806020840152620035108160408501602087016200349e565b601f01601f1916919091016040019291505056fe608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516103c1565b6000805160206107848339815191521461004b5761004b6103e6565b61006a336040518060200160405280600081525061006f60201b60201c565b6104a0565b6100828261021b60201b6100291760201c565b6100e15760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610155826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014691906103fc565b61021b60201b6100291760201c565b6101c75760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100d8565b600080516020610784833981519152828155815115610216576102146101eb61022a565b836040518060600160405280602181526020016107a4602191396102a860201b6100381760201c565b505b505050565b6001600160a01b03163b151590565b60006102426000805160206107848339815191525490565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a391906103fc565b905090565b60606001600160a01b0384163b6103105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100d8565b600080856001600160a01b03168560405161032b9190610451565b600060405180830381855af49150503d8060008114610366576040519150601f19603f3d011682016040523d82523d6000602084013e61036b565b606091505b50909250905061037c828286610388565b925050505b9392505050565b60608315610397575081610381565b8251156103a75782518084602001fd5b8160405162461bcd60e51b81526004016100d8919061046d565b6000828210156103e157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561040e57600080fd5b81516001600160a01b038116811461038157600080fd5b60005b83811015610440578181015183820152602001610428565b838111156102145750506000910152565b60008251610463818460208701610425565b9190910192915050565b602081526000825180602084015261048c816040850160208701610425565b601f01601f19169190910160400192915050565b6102d5806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610133565b6101c3565b565b6001600160a01b03163b151590565b60606001600160a01b0384163b6100bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600080856001600160a01b0316856040516100d79190610250565b600060405180830381855af49150503d8060008114610112576040519150601f19603f3d011682016040523d82523d6000602084013e610117565b606091505b50915091506101278282866101e7565b925050505b9392505050565b600061015d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061026c565b905090565b3660008037600080366000845af43d6000803e8080156101e2573d6000f35b3d6000fd5b606083156101f657508161012c565b8251156102065782518084602001fd5b8160405162461bcd60e51b81526004016100b39190610295565b60005b8381101561023b578181015183820152602001610223565b8381111561024a576000848401525b50505050565b60008251610262818460208701610220565b9190910192915050565b60006020828403121561027e57600080fd5b81516001600160a01b038116811461012c57600080fd5b60208152600082518060208401526102b4816040850160208701610220565b601f01601f1916919091016040019291505056fea164736f6c634300080f000aa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564a164736f6c634300080f000a",
  "deployedBytecode": "0x6080604052600436106200017e5760003560e01c80637ca3d2f811620000cf578063c8a28184116200007d578063f2fde38b1162000060578063f2fde38b146200048d578063f887ea4014620004b2578063f932e32a14620004e857600080fd5b8063c8a281841462000443578063de6a4abf146200046857600080fd5b80639519cc2b11620000b25780639519cc2b14620003b2578063ad5c464814620003d7578063c6bbd5a7146200040d57600080fd5b80637ca3d2f8146200037b5780638da5cb5b146200039257600080fd5b80631d328136116200012d5780636efdf4ce11620001105780636efdf4ce1462000316578063715018a6146200032d578063791b98bc146200034557600080fd5b80631d328136146200029d5780633801daf114620002e057600080fd5b806306eba352116200016257806306eba35214620001fb578063089be64c146200022f578063150b7a02146200025457600080fd5b8062ae3bf8146200018b5780630500a30e14620001b257600080fd5b366200018657005b600080fd5b3480156200019857600080fd5b50620001b0620001aa36600462002b75565b62000549565b005b348015620001bf57600080fd5b50620001d7620001d136600462002bae565b620006b7565b604080516001600160a01b0390931683529015156020830152015b60405180910390f35b3480156200020857600080fd5b50620002206200021a36600462002c5b565b6200088e565b604051908152602001620001f2565b3480156200023c57600080fd5b50620002206200024e36600462002d37565b620009c0565b3480156200026157600080fd5b50620002836200027336600462002d75565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001620001f2565b348015620002aa57600080fd5b50620002c773b47e3cd837ddf8e4c57f05d70ab865de6e193bbb81565b6040516001600160a01b039091168152602001620001f2565b348015620002ed57600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b620002206200032736600462002e46565b62000ead565b3480156200033a57600080fd5b50620001b062001659565b3480156200035257600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b620001b06200038c36600462002e85565b620016c3565b3480156200039f57600080fd5b506000546001600160a01b0316620002c7565b348015620003bf57600080fd5b50620001b0620003d136600462002ec3565b62001969565b348015620003e457600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156200041a57600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156200045057600080fd5b50620002c76200046236600462002f02565b620020f1565b3480156200047557600080fd5b50620002c76200048736600462002f02565b62002236565b3480156200049a57600080fd5b50620001b0620004ac36600462002b75565b620022fb565b348015620004bf57600080fd5b50620002c77f000000000000000000000000000000000000000000000000000000000000000081565b348015620004f557600080fd5b50620005386200050736600462002b75565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691161090565b6040519015158152602001620001f2565b6000546001600160a01b03163314620005a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381161562000643576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801562000601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000627919062002f33565b90506200063f6001600160a01b0383163383620023e0565b5050565b6040514790600090339083908381818185875af1925050503d806000811462000689576040519150601f19603f3d011682016040523d82523d6000602084013e6200068e565b606091505b5050905080620006b15760405163260e7d5b60e11b815260040160405180910390fd5b50505b50565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381a36fb6866040518263ffffffff1660e01b81526004016200070b91815260200190565b602060405180830381865afa15801562000729573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200074f919062002f4d565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d6919062002f4d565b604051630b4c774160e11b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015262ffffff871660448301529190911690631698ee8290606401602060405180830381865afa15801562000852573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000878919062002f4d565b956001600160a01b038716151595509350505050565b6000808451670de0b6b3a7640000620008a8919062002f83565b6040805160a0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682528981166020830190815282840185815262ffffff8a8116606086019081528a8516608087019081529651635e90b82560e11b81529551851660048701529251841660248601529051604485015290511660648301529151821660848201529192507f0000000000000000000000000000000000000000000000000000000000000000169063bd21704a9060a4016080604051808303816000875af11580156200098c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009b2919062002fa5565b509198975050505050505050565b600080620009d2602084018462002b75565b6001600160a01b0316631ba46cfd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a36919062002f4d565b905060005b62000a4a602085018562002ffb565b905081101562000b155762000a9d8262000a68602087018762002ffb565b8481811062000a7b5762000a7b6200304f565b9050602002013586600001602081019062000a97919062002b75565b62002434565b73b47e3cd837ddf8e4c57f05d70ab865de6e193bba196001600160a01b0383160162000b0c5762000b0c8262000ad7602087018762002ffb565b8481811062000aea5762000aea6200304f565b9050602002013586600001602081019062000b06919062002b75565b6200269c565b60010162000a3b565b506060600062000b29602086018662002b75565b6001600160a01b0316633d5d190c62000b46602088018862002ffb565b856040518463ffffffff1660e01b815260040162000b6793929190620030b5565b6020604051808303816000875af115801562000b87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bad919062002f33565b62000bc190670de0b6b3a764000062002f83565b905062000bd2602086018662002b75565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052919091169063095ea7b3906044016020604051808303816000875af115801562000c44573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c6a919062003121565b506040805161010081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063414bf389908062000cb860208a018a62002b75565b6001600160a01b0390811682527f000000000000000000000000000000000000000000000000000000000000000016602082015260400162000d0160808a0160608b0162003141565b62ffffff168152602001306001600160a01b0316815260200188604001358152602001848152602001886080013581526020018860a001602081019062000d49919062002b75565b6001600160a01b03168152506040518263ffffffff1660e01b815260040162000d7391906200315f565b6020604051808303816000875af115801562000d93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000db9919062002f33565b604051632e1a7d4d60e01b8152600481018290529094507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801562000e1f57600080fd5b505af115801562000e34573d6000803e3d6000fd5b50506040516000925033915086908381818185875af1925050503d806000811462000e7c576040519150601f19603f3d011682016040523d82523d6000602084013e62000e81565b606091505b505090508062000ea45760405163260e7d5b60e11b815260040160405180910390fd5b50505050919050565b60006020820135801562000f485762000eca602084018462002b75565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906323b872dd906064016020604051808303816000875af115801562000f20573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f46919062003121565b505b600062000f59604085018562002ffb565b905011156200116557600062000f73602085018562002b75565b6001600160a01b0316631ba46cfd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000fb1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd7919062002f4d565b905060005b62000feb604086018662002ffb565b9050811015620010aa57620010388262001009604088018862002ffb565b848181106200101c576200101c6200304f565b9050602002013587600001602081019062000a97919062002b75565b73b47e3cd837ddf8e4c57f05d70ab865de6e193bba196001600160a01b03831601620010a157620010a18262001072604088018862002ffb565b848181106200108557620010856200304f565b9050602002013587600001602081019062000b06919062002b75565b60010162000fdc565b506060620010bc602086018662002b75565b6001600160a01b0316633d5d190c620010d9604088018862002ffb565b846040518463ffffffff1660e01b8152600401620010fa93929190620030b5565b6020604051808303816000875af11580156200111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001140919062002f33565b6200115490670de0b6b3a764000062002f83565b620011609084620031ce565b925050505b62001174602084018462002b75565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052919091169063095ea7b3906044016020604051808303816000875af1158015620011e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200120c919062003121565b5060006200122262000507602086018662002b75565b90506000808262001263577f00000000000000000000000000000000000000000000000000000000000000006200125d602088018862002b75565b62001294565b62001272602087018762002b75565b7f00000000000000000000000000000000000000000000000000000000000000005b90925090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166313ead5628383620012dc60c08b0160a08c0162003141565b620012ee60e08c0160c08d0162002b75565b6040516001600160e01b031960e087901b1681526001600160a01b039485166004820152928416602484015262ffffff90911660448301529190911660648201526084016020604051808303816000875af115801562001352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001378919062002f4d565b506000806000808615620013b45787935061138888116200139b576000620013a9565b620013a961138889620031e9565b9150349250620013dd565b3493508792506113888811620013cc576000620013da565b620013da61138889620031e9565b90505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166388316456346040518061016001604052808a6001600160a01b03168152602001896001600160a01b031681526020018e60a00160208101906200144c919062003141565b62ffffff1681526020018e60600160208101906200146b919062003203565b60020b81526020018e608001602081019062001488919062003203565b60020b8152602001888152602001878152602001868152602001858152602001336001600160a01b031681526020018e60e001358152506040518363ffffffff1660e01b8152600401620014dd919062003228565b60806040518083038185885af1158015620014fc573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001523919062003310565b505060405163073db96d60e21b8152336004820152919a50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631cf6e5b490602401600060405180830381600087803b1580156200158b57600080fd5b505af1158015620015a0573d6000803e3d6000fd5b50506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063df2ab5bb9050620015e460208d018d62002b75565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260006024820152336044820152606401600060405180830381600087803b1580156200163357600080fd5b505af115801562001648573d6000803e3d6000fd5b505050505050505050505050919050565b6000546001600160a01b03163314620016b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005a0565b620016c160006200270d565b565b6000620016d4602083018362002ffb565b620016e99150670de0b6b3a764000062002f83565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db3e2198346040518061010001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018660000160208101906200176b919062002b75565b6001600160a01b031681526020016200178b608088016060890162003141565b62ffffff168152602001306001600160a01b0316815260200186604001358152602001858152602001348152602001866080016020810190620017cf919062002b75565b6001600160a01b03168152506040518363ffffffff1660e01b8152600401620017f991906200315f565b60206040518083038185885af115801562001818573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200183f919062002f33565b506200184f602083018362002b75565b6001600160a01b0316639d54def66200186c602085018562002ffb565b90506200187d602086018662002ffb565b336040518563ffffffff1660e01b81526004016200189f949392919062003351565b6000604051808303816000875af1158015620018bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018e9919081019062003387565b5060405163073db96d60e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631cf6e5b490602401600060405180830381600087803b1580156200194c57600080fd5b505af115801562001961573d6000803e3d6000fd5b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c49ccbe6040518060a0016040528084600001358152602001846080016020810190620019c2919062003416565b6fffffffffffffffffffffffffffffffff1681526020018460c0013581526020018460e0013581526020018461010001358152506040518263ffffffff1660e01b815260040162001a5a9190600060a082019050825182526fffffffffffffffffffffffffffffffff602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b60408051808303816000875af115801562001a79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a9f919062003436565b5050604080516080810182528235815230602082019081526fffffffffffffffffffffffffffffffff82840181815260608401828152945163fc6f786560e01b81529351600485015291516001600160a01b0390811660248501529151811660448401529251909216606482015260009182917f00000000000000000000000000000000000000000000000000000000000000009091169063fc6f78659060840160408051808303816000875af115801562001b5f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b85919062003436565b9092509050600062001ba262000507604086016020870162002b75565b90506000808262001bb557838562001bb8565b84845b909250905062001bcf60808701606088016200345b565b1562001c645762001be7604087016020880162002b75565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801562001c37573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c5d919062003121565b5062002000565b600062001c7a670de0b6b3a7640000846200347b565b9050801562001ffe5762001c95604088016020890162002b75565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052919091169063095ea7b3906044016020604051808303816000875af115801562001d07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d2d919062003121565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663414bf3896040518061010001604052808b602001602081019062001d80919062002b75565b6001600160a01b0390811682527f000000000000000000000000000000000000000000000000000000000000000016602082015260400162001dc960c08d0160a08e0162003141565b62ffffff168152602001306001600160a01b031681526020014281526020018581526020016000815260200160006001600160a01b03168152506040518263ffffffff1660e01b815260040162001e2191906200315f565b6020604051808303816000875af115801562001e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e67919062002f33565b905062001e758184620031ce565b925062001e896040890160208a0162002b75565b6001600160a01b0316639d54def662001ea660408b018b62002ffb565b905062001eb760408c018c62002ffb565b336040518563ffffffff1660e01b815260040162001ed9949392919062003351565b6000604051808303816000875af115801562001ef9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001f23919081019062003387565b50600062001f3560408a018a62002ffb565b62001f4a9150670de0b6b3a764000062002f83565b905060008162001f5b8588620031e9565b62001f679190620031e9565b9050801562001ffa5762001f8260408b0160208c0162002b75565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801562001fd2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ff8919062003121565b505b5050505b505b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156200206357600080fd5b505af115801562002078573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114620020c0576040519150601f19603f3d011682016040523d82523d6000602084013e620020c5565b606091505b5050905080620020e85760405163260e7d5b60e11b815260040160405180910390fd5b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002152573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002178919062002f4d565b604051630b4c774160e11b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015262ffffff851660448301529190911690631698ee8290606401602060405180830381865afa158015620021f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200221a919062002f4d565b90506001600160a01b0381166200223057600080fd5b92915050565b6000620022f47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200229b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022c1919062002f4d565b620022ee857f00000000000000000000000000000000000000000000000000000000000000008662002775565b620027e1565b9392505050565b6000546001600160a01b03163314620023575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005a0565b6001600160a01b038116620023d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620005a0565b620006b4816200270d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052620006b190849062002892565b60606001600160a01b03841673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb14620024af576040513360248201526001600160a01b03831660448201526064810184905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b179052905062002613565b600083604051602401620024c591815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316630b02f02d60e31b1790525190915060009081906001600160a01b0388169062002510908590620034d1565b600060405180830381855afa9150503d80600081146200254d576040519150601f19603f3d011682016040523d82523d6000602084013e62002552565b606091505b50915091506000818060200190518101906200256f919062002f4d565b90508280156200258757506001600160a01b03811633145b620025d55760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401620005a0565b6040516024810188905260440160408051601f198184030181529190526020810180516001600160e01b031663104c9fd360e31b1790529450505050505b600080856001600160a01b031683604051620026309190620034d1565b6000604051808303816000865af19150503d80600081146200266f576040519150601f19603f3d011682016040523d82523d6000602084013e62002674565b606091505b5091509150818190620020e85760405162461bcd60e51b8152600401620005a09190620034ef565b604051602481018390526000604482018190526001600160a01b03831660648301529060840160408051601f198184030181529181526020820180516001600160e01b031663bf31196f60e01b1790525190915060009081906001600160a01b0387169062002630908590620034d1565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b03161115620027b1579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b0316106200280a57600080fd5b815160208084015160408086015181516001600160a01b0395861694810194909452939091169082015262ffffff9091166060820152620022f4906080016040516020818303038152906040528051906020012060405180602001620028709062002b51565b6020820181038252601f19601f8201166040525080519060200120856200297e565b6000620028e9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620029a89092919063ffffffff16565b805190915015620006b157808060200190518101906200290a919062003121565b620006b15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401620005a0565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6060620029b98484600085620029c1565b949350505050565b60608247101562002a3b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401620005a0565b6001600160a01b0385163b62002a945760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620005a0565b600080866001600160a01b0316858760405162002ab29190620034d1565b60006040518083038185875af1925050503d806000811462002af1576040519150601f19603f3d011682016040523d82523d6000602084013e62002af6565b606091505b509150915062002b0882828662002b13565b979650505050505050565b6060831562002b24575081620022f4565b82511562002b355782518084602001fd5b8160405162461bcd60e51b8152600401620005a09190620034ef565b6107c5806200352583390190565b6001600160a01b0381168114620006b457600080fd5b60006020828403121562002b8857600080fd5b8135620022f48162002b5f565b803562ffffff8116811462002ba957600080fd5b919050565b6000806040838503121562002bc257600080fd5b8235915062002bd46020840162002b95565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562002c1f5762002c1f62002bdd565b604052919050565b600067ffffffffffffffff82111562002c445762002c4462002bdd565b5060051b60200190565b803562002ba98162002b5f565b6000806000806080858703121562002c7257600080fd5b843562002c7f8162002b5f565b935060208581013567ffffffffffffffff81111562002c9d57600080fd5b8601601f8101881362002caf57600080fd5b803562002cc662002cc08262002c27565b62002bf3565b81815260059190911b8201830190838101908a83111562002ce657600080fd5b928401925b8284101562002d065783358252928401929084019062002ceb565b809750505050505062002d1c6040860162002b95565b915062002d2c6060860162002c4e565b905092959194509250565b60006020828403121562002d4a57600080fd5b813567ffffffffffffffff81111562002d6257600080fd5b820160c08185031215620022f457600080fd5b6000806000806080858703121562002d8c57600080fd5b843562002d998162002b5f565b935060208581013562002dac8162002b5f565b935060408601359250606086013567ffffffffffffffff8082111562002dd157600080fd5b818801915088601f83011262002de657600080fd5b81358181111562002dfb5762002dfb62002bdd565b62002e0f601f8201601f1916850162002bf3565b9150808252898482850101111562002e2657600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121562002e5957600080fd5b813567ffffffffffffffff81111562002e7157600080fd5b82016101008185031215620022f457600080fd5b60006020828403121562002e9857600080fd5b813567ffffffffffffffff81111562002eb057600080fd5b820160a08185031215620022f457600080fd5b60006020828403121562002ed657600080fd5b813567ffffffffffffffff81111562002eee57600080fd5b82016101208185031215620022f457600080fd5b6000806040838503121562002f1657600080fd5b823562002f238162002b5f565b915062002bd46020840162002b95565b60006020828403121562002f4657600080fd5b5051919050565b60006020828403121562002f6057600080fd5b8151620022f48162002b5f565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161562002fa05762002fa062002f6d565b500290565b6000806000806080858703121562002fbc57600080fd5b84519350602085015162002fd08162002b5f565b604086015190935063ffffffff8116811462002feb57600080fd5b6060959095015193969295505050565b6000808335601e198436030181126200301357600080fd5b83018035915067ffffffffffffffff8211156200302f57600080fd5b6020019150600581901b36038213156200304857600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156200309857600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000620030cb60408301858762003065565b82810360208481019190915284518083528582019282019060005b818110156200310457845183529383019391830191600101620030e6565b509098975050505050505050565b8015158114620006b457600080fd5b6000602082840312156200313457600080fd5b8151620022f48162003112565b6000602082840312156200315457600080fd5b620022f48262002b95565b61010081016200223082846001600160a01b0380825116835280602083015116602084015262ffffff60408301511660408401528060608301511660608401526080820151608084015260a082015160a084015260c082015160c08401528060e08301511660e0840152505050565b60008219821115620031e457620031e462002f6d565b500190565b600082821015620031fe57620031fe62002f6d565b500390565b6000602082840312156200321657600080fd5b81358060020b8114620022f457600080fd5b81516001600160a01b03168152610160810160208301516200325560208401826001600160a01b03169052565b5060408301516200326d604084018262ffffff169052565b50606083015162003283606084018260020b9052565b50608083015162003299608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151620032e0828501826001600160a01b03169052565b505061014092830151919092015290565b6fffffffffffffffffffffffffffffffff81168114620006b457600080fd5b600080600080608085870312156200332757600080fd5b8451935060208501516200333b81620032f1565b6040860151606090960151949790965092505050565b8481526060602082015260006200336d60608301858762003065565b90506001600160a01b038316604083015295945050505050565b600060208083850312156200339b57600080fd5b825167ffffffffffffffff811115620033b357600080fd5b8301601f81018513620033c557600080fd5b8051620033d662002cc08262002c27565b81815260059190911b82018301908381019087831115620033f657600080fd5b928401925b8284101562002b0857835182529284019290840190620033fb565b6000602082840312156200342957600080fd5b8135620022f481620032f1565b600080604083850312156200344a57600080fd5b505080516020909101519092909150565b6000602082840312156200346e57600080fd5b8135620022f48162003112565b6000826200349957634e487b7160e01b600052601260045260246000fd5b500690565b60005b83811015620034bb578181015183820152602001620034a1565b83811115620034cb576000848401525b50505050565b60008251620034e58184602087016200349e565b9190910192915050565b6020815260008251806020840152620035108160408501602087016200349e565b601f01601f1916919091016040019291505056fe608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516103c1565b6000805160206107848339815191521461004b5761004b6103e6565b61006a336040518060200160405280600081525061006f60201b60201c565b6104a0565b6100828261021b60201b6100291760201c565b6100e15760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610155826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014691906103fc565b61021b60201b6100291760201c565b6101c75760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100d8565b600080516020610784833981519152828155815115610216576102146101eb61022a565b836040518060600160405280602181526020016107a4602191396102a860201b6100381760201c565b505b505050565b6001600160a01b03163b151590565b60006102426000805160206107848339815191525490565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a391906103fc565b905090565b60606001600160a01b0384163b6103105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100d8565b600080856001600160a01b03168560405161032b9190610451565b600060405180830381855af49150503d8060008114610366576040519150601f19603f3d011682016040523d82523d6000602084013e61036b565b606091505b50909250905061037c828286610388565b925050505b9392505050565b60608315610397575081610381565b8251156103a75782518084602001fd5b8160405162461bcd60e51b81526004016100d8919061046d565b6000828210156103e157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561040e57600080fd5b81516001600160a01b038116811461038157600080fd5b60005b83811015610440578181015183820152602001610428565b838111156102145750506000910152565b60008251610463818460208701610425565b9190910192915050565b602081526000825180602084015261048c816040850160208701610425565b601f01601f19169190910160400192915050565b6102d5806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610133565b6101c3565b565b6001600160a01b03163b151590565b60606001600160a01b0384163b6100bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600080856001600160a01b0316856040516100d79190610250565b600060405180830381855af49150503d8060008114610112576040519150601f19603f3d011682016040523d82523d6000602084013e610117565b606091505b50915091506101278282866101e7565b925050505b9392505050565b600061015d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061026c565b905090565b3660008037600080366000845af43d6000803e8080156101e2573d6000f35b3d6000fd5b606083156101f657508161012c565b8251156102065782518084602001fd5b8160405162461bcd60e51b81526004016100b39190610295565b60005b8381101561023b578181015183820152602001610223565b8381111561024a576000848401525b50505050565b60008251610262818460208701610220565b9190910192915050565b60006020828403121561027e57600080fd5b81516001600160a01b038116811461012c57600080fd5b60208152600082518060208401526102b4816040850160208701610220565b601f01601f1916919091016040019291505056fea164736f6c634300080f000aa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564a164736f6c634300080f000a",
  "devdoc": {
    "author": "@apoorvlathey",
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteBuyNFTs(address,uint256[],uint24,uint160)": {
        "details": "This function is not gas efficient and should _not_ be called on chain."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueTokens(address)": {
        "params": {
          "token": "ERC20 token address or address(0) in case of ETH"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NFTX Router",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity((address,uint256,uint256[],int24,int24,uint24,uint160,uint256))": {
        "notice": "User should have given NFT approval to vtoken contract, else revert"
      },
      "computePool(address,uint24)": {
        "notice": "Compute the pool address corresponding to vToken"
      },
      "getPool(address,uint24)": {
        "notice": "Get deployed pool address for vToken. Reverts if pool doesn't exist"
      },
      "getPoolExists(uint256,uint24)": {
        "notice": "Get deployed pool address for vaultId. `exists` is false if pool doesn't exist. `vaultId` must be valid."
      },
      "isVToken0(address)": {
        "notice": "Checks if vToken is token0 or not"
      },
      "sellNFTs((address,uint256[],uint256,uint24,uint256,uint160))": {
        "notice": "User should have given NFT approval to vtoken contract, else revert"
      }
    },
    "notice": "Router to facilitate vault tokens minting/burning + addition/removal of concentrated liquidity",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2942,
        "contract": "src/NFTXRouter.sol:NFTXRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}