{
  "address": "0x3Cd6Fc37B2CDC4E7039a2dF096d83F47253f30eF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_merkleReference",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_merkleLeavesURI",
          "type": "string"
        }
      ],
      "name": "NFTXEligibilityInit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "PrecursoryCheckComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "PrecursoryCheckStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_merkleReference",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_merkleLeavesURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_minExpirationTime",
          "type": "uint256"
        }
      ],
      "name": "__NFTXEligibility_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_merkleReference",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_merkleLeavesURI",
          "type": "string"
        }
      ],
      "name": "__NFTXEligibility_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "configData",
          "type": "bytes"
        }
      ],
      "name": "__NFTXEligibility_init_bytes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "afterMintHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "afterRedeemHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "beforeMintHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "beforeRedeemHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "checkAllEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "checkAllIneligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "checkEligible",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkIsEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleLeavesURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleReference",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minExpirationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "processToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "merkleProofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "processTokens",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "requiresProcessing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "validTokenHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb0f4505c6cf821d2ec52297dc9fa9fc006c89a42e79ffb01cbd03f8f28fc571",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0x3Cd6Fc37B2CDC4E7039a2dF096d83F47253f30eF",
    "transactionIndex": 32,
    "gasUsed": "1181069",
    "logsBloom": "0x
    "blockHash": "0x6de55ba2fc3fe064b2cdf0e2ab9292f6a3dc62692feba2e990399c477352d7a4",
    "transactionHash": "0xeb0f4505c6cf821d2ec52297dc9fa9fc006c89a42e79ffb01cbd03f8f28fc571",
    "logs": [],
    "blockNumber": 13482469,
    "cumulativeGasUsed": "5689503",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "28cfca9f7b5d9e5cb55aef2a8f8b4710",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_merkleReference\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_merkleLeavesURI\",\"type\":\"string\"}],\"name\":\"NFTXEligibilityInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"PrecursoryCheckComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"PrecursoryCheckStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_merkleReference\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_merkleLeavesURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_minExpirationTime\",\"type\":\"uint256\"}],\"name\":\"__NFTXEligibility_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_merkleReference\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_merkleLeavesURI\",\"type\":\"string\"}],\"name\":\"__NFTXEligibility_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"configData\",\"type\":\"bytes\"}],\"name\":\"__NFTXEligibility_init_bytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"afterMintHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"afterRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"beforeMintHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"beforeRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkAllEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkAllIneligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkIsEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleLeavesURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleReference\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExpirationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"processToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"processTokens\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"requiresProcessing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validTokenHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Twade\",\"kind\":\"dev\",\"methods\":{\"__NFTXEligibility_init(bytes32,string,string)\":{\"params\":{\"_merkleRoot\":\"The root of our merkle tree\"}},\"__NFTXEligibility_init(bytes32,string,string,uint256)\":{\"params\":{\"_merkleLeavesURI\":\"API endpoint providing unencoded JSON array\",\"_merkleReference\":\"Public name of the merkle eligibility implementation\",\"_merkleRoot\":\"The root of our merkle tree\",\"_minExpirationTime\":\"Minimum number of seconds until ENS expiration\"}},\"__NFTXEligibility_init_bytes(bytes)\":{\"params\":{\"configData\":\"Encoded config data\"}},\"finalized()\":{\"returns\":{\"_0\":\"bool\"}},\"name()\":{\"returns\":{\"_0\":\"string\"}},\"processToken(uint256,bytes32[])\":{\"params\":{\"merkleProof\":\"Merkle proof to validate against the tokenId\",\"tokenId\":\"The ENS token ID being validated\"},\"returns\":{\"isValid\":\"If the token is valid\"}},\"processTokens(uint256[],bytes32[][])\":{\"params\":{\"merkleProofs\":\"Merkle proofs to validate against the corresponding tokenId\",\"tokenIds\":\"The ENS token IDs being validated\"},\"returns\":{\"_0\":\"bool[] If the token at the corresponding index is valid\"}},\"requiresProcessing(uint256,bytes32[])\":{\"details\":\"If this returns `true`, `processToken` should subsequently be run before checking the eligibility of the token.\",\"params\":{\"tokenId\":\"The ENS domain token ID\"},\"returns\":{\"_0\":\"bool If the tokenId requires precursory validation\"}},\"targetAsset()\":{\"returns\":{\"_0\":\"address\"}}},\"title\":\"NFTX ENS Merkle Eligibility\",\"version\":1},\"userdoc\":{\"events\":{\"NFTXEligibilityInit(bytes32,string,string)\":{\"notice\":\"Emitted when our NFTX Eligibility is deployed\"},\"PrecursoryCheckComplete(uint256,bytes32,bool)\":{\"notice\":\"Emitted when a project validity check has been completed\"},\"PrecursoryCheckStarted(uint256,bytes32)\":{\"notice\":\"Emitted when a project validity check is started\"}},\"kind\":\"user\",\"methods\":{\"__NFTXEligibility_init(bytes32,string,string)\":{\"notice\":\"Parameters here should mirror the config struct.\"},\"__NFTXEligibility_init(bytes32,string,string,uint256)\":{\"notice\":\"Parameters here should mirror the config struct.\"},\"__NFTXEligibility_init_bytes(bytes)\":{\"notice\":\"Allow our eligibility module to be initialised with optional config data.\"},\"finalized()\":{\"notice\":\"Confirms that our module has been finalised and won't change.\"},\"merkleLeavesURI()\":{\"notice\":\"URI to JSON list of unencoded token IDs\"},\"merkleReference()\":{\"notice\":\"Merkle reference for any required frontend differentiation\"},\"merkleRoot()\":{\"notice\":\"Merkle proof to validate all eligible domains against\"},\"minExpirationTime()\":{\"notice\":\"Minimum expiration time for ENS domains in seconds\"},\"name()\":{\"notice\":\"The name of our Eligibility Module.\"},\"processToken(uint256,bytes32[])\":{\"notice\":\"This will run a precursory check by encoding the token ID, creating the token hash, and then checking this against our merkle tree.\"},\"processTokens(uint256[],bytes32[][])\":{\"notice\":\"This will run a number of precursory checks by encoding the token ID, creating the token hash, and then checking this against our merkle tree.\"},\"requiresProcessing(uint256,bytes32[])\":{\"notice\":\"Checks if the token requires a precursory validation before it can have it's eligibility determined.\"},\"targetAsset()\":{\"notice\":\"The address of our token asset contract.\"},\"validTokenHashes(bytes32)\":{\"notice\":\"Internal storage of valid and processed tokens\"}},\"notice\":\"Allows vaults to be allow eligibility based ENS domains, allowing for minimum expiration times to be set.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v2/eligibility/NFTXENSMerkleEligibility.sol\":\"NFTXENSMerkleEligibility\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[\":@mocks/=src/mocks/\",\":@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@permit2/=lib/permit2/src/\",\":@src/=src/\",\":@test/=test/\",\":@uni-core/=src/uniswap/v3-core/\",\":@uni-periphery/=src/uniswap/v3-periphery/\",\":@uniswap/lib/=lib/solidity-lib/\",\":@uniswap/v2-core/=lib/v2-core/\",\":@uniswap/v3-core/contracts/=src/uniswap/v3-core/\",\":base64-sol/=src/uniswap/v3-periphery/libraries/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solidity-lib/=lib/solidity-lib/contracts/\",\":solmate/=lib/permit2/lib/solmate/\",\":v2-core/=lib/v2-core/contracts/\"]},\"sources\":{\"src/interfaces/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"src/v2/custom/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"},\"src/v2/eligibility/NFTXENSMerkleEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./NFTXMerkleEligibility.sol\\\";\\n\\nabstract contract ENS {\\n    function nameExpires(uint256 id) public view virtual returns (uint256);\\n}\\n\\n/**\\n * @title NFTX ENS Merkle Eligibility\\n * @author Twade\\n *\\n * @notice Allows vaults to be allow eligibility based ENS domains, allowing for minimum\\n * expiration times to be set.\\n */\\n\\ncontract NFTXENSMerkleEligibility is NFTXMerkleEligibility {\\n    /// @notice Minimum expiration time for ENS domains in seconds\\n    uint public minExpirationTime;\\n\\n    /**\\n     * @notice The name of our Eligibility Module.\\n     *\\n     * @return string\\n     */\\n\\n    function name() public pure virtual override returns (string memory) {\\n        return \\\"ENSMerkleEligibility\\\";\\n    }\\n\\n    /**\\n     * @notice The address of our token asset contract.\\n     *\\n     * @return address\\n     */\\n\\n    function targetAsset() public pure virtual override returns (address) {\\n        return 0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85;\\n    }\\n\\n    /**\\n     * @notice Allow our eligibility module to be initialised with optional\\n     * config data.\\n     *\\n     * @param configData Encoded config data\\n     */\\n\\n    function __NFTXEligibility_init_bytes(\\n        bytes memory configData\\n    ) public virtual override initializer {\\n        (\\n            bytes32 _merkleRoot,\\n            string memory _merkleReference,\\n            string memory _merkleLeavesURI,\\n            uint _minExpirationTime\\n        ) = abi.decode(configData, (bytes32, string, string, uint));\\n\\n        __NFTXEligibility_init(\\n            _merkleRoot,\\n            _merkleReference,\\n            _merkleLeavesURI,\\n            _minExpirationTime\\n        );\\n    }\\n\\n    /**\\n     * @notice Parameters here should mirror the config struct.\\n     *\\n     * @param _merkleRoot The root of our merkle tree\\n     * @param _merkleReference Public name of the merkle eligibility implementation\\n     * @param _merkleLeavesURI API endpoint providing unencoded JSON array\\n     * @param _minExpirationTime Minimum number of seconds until ENS expiration\\n     */\\n\\n    function __NFTXEligibility_init(\\n        bytes32 _merkleRoot,\\n        string memory _merkleReference,\\n        string memory _merkleLeavesURI,\\n        uint _minExpirationTime\\n    ) public initializer {\\n        super.__NFTXEligibility_init(\\n            _merkleRoot,\\n            _merkleReference,\\n            _merkleLeavesURI\\n        );\\n\\n        minExpirationTime = _minExpirationTime;\\n    }\\n\\n    /**\\n     * @notice Checks if a supplied token is eligible; in addition to our core merkle\\n     * eligibility checks we also need to confirm that the ENS domain won't expire within\\n     * a year.\\n     *\\n     * @dev This check requires the token to have already been passed to `processToken`.\\n     *\\n     * @return bool If the tokenId is eligible\\n     */\\n\\n    function _checkIfEligible(\\n        uint tokenId\\n    ) internal view virtual override returns (bool) {\\n        // Get the expiry time of the token ID provided and ensure it has at least\\n        // 365 days left until it expires.\\n        if (\\n            block.timestamp + minExpirationTime >\\n            ENS(targetAsset()).nameExpires(tokenId)\\n        ) {\\n            return false;\\n        }\\n\\n        return super._checkIfEligible(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xdb231f4e96d0312fe718db77d71e4e10b169b91b19f04701bbe0b677243aa243\",\"license\":\"MIT\"},\"src/v2/eligibility/NFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@src/v2/custom/Initializable.sol\\\";\\nimport {INFTXEligibility} from \\\"@src/interfaces/INFTXEligibility.sol\\\";\\n\\n// This is a contract meant to be inherited and overriden to implement eligibility modules.\\nabstract contract NFTXEligibility is INFTXEligibility, Initializable {\\n    function name() public pure virtual override returns (string memory);\\n\\n    function finalized() public view virtual override returns (bool);\\n\\n    function targetAsset() public pure virtual override returns (address);\\n\\n    function __NFTXEligibility_init_bytes(\\n        bytes memory initData\\n    ) public virtual override;\\n\\n    function checkIsEligible(\\n        uint256 tokenId\\n    ) external view virtual override returns (bool) {\\n        return _checkIfEligible(tokenId);\\n    }\\n\\n    function checkEligible(\\n        uint256[] calldata tokenIds\\n    ) external view virtual override returns (bool[] memory) {\\n        uint256 length = tokenIds.length;\\n        bool[] memory eligibile = new bool[](length);\\n        for (uint256 i; i < length; i++) {\\n            eligibile[i] = _checkIfEligible(tokenIds[i]);\\n        }\\n        return eligibile;\\n    }\\n\\n    function checkAllEligible(\\n        uint256[] calldata tokenIds\\n    ) external view virtual override returns (bool) {\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; i++) {\\n            // If any are not eligible, end the loop and return false.\\n            if (!_checkIfEligible(tokenIds[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    // Checks if all provided NFTs are NOT eligible. This is needed for mint requesting where all NFTs\\n    // provided must be ineligible.\\n    function checkAllIneligible(\\n        uint256[] calldata tokenIds\\n    ) external view virtual override returns (bool) {\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; i++) {\\n            // If any are eligible, end the loop and return false.\\n            if (_checkIfEligible(tokenIds[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function beforeMintHook(\\n        uint256[] calldata tokenIds\\n    ) external virtual override {}\\n\\n    function afterMintHook(\\n        uint256[] calldata tokenIds\\n    ) external virtual override {}\\n\\n    function beforeRedeemHook(\\n        uint256[] calldata tokenIds\\n    ) external virtual override {}\\n\\n    function afterRedeemHook(\\n        uint256[] calldata tokenIds\\n    ) external virtual override {}\\n\\n    // Override this to implement your module!\\n    function _checkIfEligible(\\n        uint256 _tokenId\\n    ) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x5e2035010be51cdd6af1639a464516da51d7521b1a78583fbb501ca6e72ca490\",\"license\":\"MIT\"},\"src/v2/eligibility/NFTXMerkleEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./NFTXEligibility.sol\\\";\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\n\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n        for (uint i = 0; i < proof.length; ) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return computedHash == root;\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(\\n        bytes32 a,\\n        bytes32 b\\n    ) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\\n/**\\n * @title NFTX Merkle Eligibility\\n * @author Twade\\n *\\n * @notice Allows vaults to be allow eligibility based on a predefined merkle tree.\\n */\\n\\nabstract contract NFTXMerkleEligibility is NFTXEligibility {\\n    /// @notice Emitted when our NFTX Eligibility is deployed\\n    event NFTXEligibilityInit(\\n        bytes32 merkleRoot,\\n        string _merkleReference,\\n        string _merkleLeavesURI\\n    );\\n\\n    /// @notice Emitted when a project validity check is started\\n    event PrecursoryCheckStarted(uint tokenId, bytes32 requestId);\\n\\n    /// @notice Emitted when a project validity check has been completed\\n    event PrecursoryCheckComplete(\\n        uint tokenId,\\n        bytes32 requestId,\\n        bool isValid\\n    );\\n\\n    /// @notice Internal storage of valid and processed tokens\\n    mapping(bytes32 => bool) public validTokenHashes;\\n    mapping(bytes32 => mapping(bytes32 => bool)) private _processedTokenHashes;\\n\\n    /// @notice Merkle proof to validate all eligible domains against\\n    bytes32 public merkleRoot;\\n\\n    /// @notice Merkle reference for any required frontend differentiation\\n    string public merkleReference;\\n\\n    /// @notice URI to JSON list of unencoded token IDs\\n    string public merkleLeavesURI;\\n\\n    /**\\n     * @notice The name of our Eligibility Module.\\n     *\\n     * @return string\\n     */\\n\\n    function name() public pure virtual override returns (string memory) {}\\n\\n    /**\\n     * @notice Confirms that our module has been finalised and won't change.\\n     *\\n     * @return bool\\n     */\\n\\n    function finalized() public view virtual override returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice The address of our token asset contract.\\n     *\\n     * @return address\\n     */\\n\\n    function targetAsset() public pure virtual override returns (address) {}\\n\\n    /**\\n     * @notice Allow our eligibility module to be initialised with optional\\n     * config data.\\n     *\\n     * @param configData Encoded config data\\n     */\\n\\n    function __NFTXEligibility_init_bytes(\\n        bytes memory configData\\n    ) public virtual override initializer {\\n        (\\n            bytes32 _merkleRoot,\\n            string memory _merkleReference,\\n            string memory _merkleLeavesURI\\n        ) = abi.decode(configData, (bytes32, string, string));\\n\\n        __NFTXEligibility_init(_merkleRoot, _merkleReference, _merkleLeavesURI);\\n    }\\n\\n    /**\\n     * @notice Parameters here should mirror the config struct.\\n     *\\n     * @param _merkleRoot The root of our merkle tree\\n     */\\n\\n    function __NFTXEligibility_init(\\n        bytes32 _merkleRoot,\\n        string memory _merkleReference,\\n        string memory _merkleLeavesURI\\n    ) public initializer {\\n        merkleRoot = _merkleRoot;\\n        merkleReference = _merkleReference;\\n        merkleLeavesURI = _merkleLeavesURI;\\n\\n        emit NFTXEligibilityInit(\\n            _merkleRoot,\\n            _merkleReference,\\n            _merkleLeavesURI\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if a supplied token is eligible, which is defined by our merkle\\n     * tree root assigned at initialisation.\\n     *\\n     * @dev This check requires the token to have already been passed to `processToken`.\\n     *\\n     * @return bool If the tokenId is eligible\\n     */\\n\\n    function _checkIfEligible(\\n        uint tokenId\\n    ) internal view virtual override returns (bool) {\\n        return validTokenHashes[_hashTokenId(tokenId)];\\n    }\\n\\n    /**\\n     * @notice Checks if the token requires a precursory validation before it can have\\n     * it's eligibility determined.\\n     *\\n     * @dev If this returns `true`, `processToken` should subsequently be run before\\n     * checking the eligibility of the token.\\n     *\\n     * @param tokenId The ENS domain token ID\\n     *\\n     * @return bool If the tokenId requires precursory validation\\n     */\\n\\n    function requiresProcessing(\\n        uint tokenId,\\n        bytes32[] calldata merkleProof\\n    ) public view returns (bool) {\\n        // Check if we have a confirmed processing log\\n        return\\n            !_processedTokenHashes[_hashTokenId(tokenId)][\\n                _hashMerkleProof(merkleProof)\\n            ];\\n    }\\n\\n    /**\\n     * @notice This will run a number of precursory checks by encoding the token ID,\\n     * creating the token hash, and then checking this against our merkle tree.\\n     *\\n     * @param tokenIds The ENS token IDs being validated\\n     * @param merkleProofs Merkle proofs to validate against the corresponding tokenId\\n     *\\n     * @return bool[] If the token at the corresponding index is valid\\n     */\\n\\n    function processTokens(\\n        uint[] calldata tokenIds,\\n        bytes32[][] calldata merkleProofs\\n    ) public returns (bool[] memory) {\\n        // Iterate over our process tokens\\n        uint numberOfTokens = tokenIds.length;\\n        bool[] memory isValid = new bool[](numberOfTokens);\\n\\n        // Loop through and process our tokens\\n        for (uint i; i < numberOfTokens; ) {\\n            isValid[i] = processToken(tokenIds[i], merkleProofs[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return isValid;\\n    }\\n\\n    /**\\n     * @notice This will run a precursory check by encoding the token ID, creating the\\n     * token hash, and then checking this against our merkle tree.\\n     *\\n     * @param tokenId The ENS token ID being validated\\n     * @param merkleProof Merkle proof to validate against the tokenId\\n     *\\n     * @return isValid If the token is valid\\n     */\\n\\n    function processToken(\\n        uint tokenId,\\n        bytes32[] calldata merkleProof\\n    ) public returns (bool isValid) {\\n        // If the token has already been processed, just return the validity\\n        if (!requiresProcessing(tokenId, merkleProof)) {\\n            return _checkIfEligible(tokenId);\\n        }\\n\\n        // Get the hashed equivalent of our tokenId\\n        bytes32 tokenHash = _hashTokenId(tokenId);\\n\\n        // Determine if our domain is eligible by traversing our merkle tree\\n        isValid = MerkleProof.verify(merkleProof, merkleRoot, tokenHash);\\n\\n        // Update our token eligibility _only_ if we have been able to confirm that\\n        // it is eligible. This prevents incorrect proofs from bricking a token.\\n        if (isValid) {\\n            validTokenHashes[tokenHash] = isValid;\\n        }\\n\\n        // Confirm that this has been processed\\n        _processedTokenHashes[tokenHash][_hashMerkleProof(merkleProof)] = true;\\n    }\\n\\n    /**\\n     * @notice Hashes the token ID to convert it into the token hash.\\n     *\\n     * @param tokenId The ENS token ID being hashed\\n     *\\n     * @return bytes32 The encrypted token hash\\n     */\\n\\n    function _hashTokenId(uint tokenId) private pure returns (bytes32) {\\n        return keccak256(_tokenString(tokenId));\\n    }\\n\\n    /**\\n     * @notice This will convert a 2d bytes32 array into a bytes32 hash.\\n     *\\n     * @param merkleProofs Merkle proof to encrypted\\n     *\\n     * @return bytes32 The hashed merkle proof\\n     */\\n\\n    function _hashMerkleProof(\\n        bytes32[] memory merkleProofs\\n    ) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(merkleProofs));\\n    }\\n\\n    /**\\n     * @notice Converts a `uint256` to its ASCII `string` decimal representation.\\n     *\\n     * @param value Integer value\\n     *\\n     * @return string String of the integer value\\n     */\\n\\n    function _tokenString(uint256 value) internal pure returns (bytes memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            unchecked {\\n                ++digits;\\n            }\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return buffer;\\n    }\\n}\\n\",\"keccak256\":\"0xe363219f2a30d31bd161039426ac13d184a43b77978390490112e978e96143ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Twade",
    "kind": "dev",
    "methods": {
      "__NFTXEligibility_init(bytes32,string,string)": {
        "params": {
          "_merkleRoot": "The root of our merkle tree"
        }
      },
      "__NFTXEligibility_init(bytes32,string,string,uint256)": {
        "params": {
          "_merkleLeavesURI": "API endpoint providing unencoded JSON array",
          "_merkleReference": "Public name of the merkle eligibility implementation",
          "_merkleRoot": "The root of our merkle tree",
          "_minExpirationTime": "Minimum number of seconds until ENS expiration"
        }
      },
      "__NFTXEligibility_init_bytes(bytes)": {
        "params": {
          "configData": "Encoded config data"
        }
      },
      "finalized()": {
        "returns": {
          "_0": "bool"
        }
      },
      "name()": {
        "returns": {
          "_0": "string"
        }
      },
      "processToken(uint256,bytes32[])": {
        "params": {
          "merkleProof": "Merkle proof to validate against the tokenId",
          "tokenId": "The ENS token ID being validated"
        },
        "returns": {
          "isValid": "If the token is valid"
        }
      },
      "processTokens(uint256[],bytes32[][])": {
        "params": {
          "merkleProofs": "Merkle proofs to validate against the corresponding tokenId",
          "tokenIds": "The ENS token IDs being validated"
        },
        "returns": {
          "_0": "bool[] If the token at the corresponding index is valid"
        }
      },
      "requiresProcessing(uint256,bytes32[])": {
        "details": "If this returns `true`, `processToken` should subsequently be run before checking the eligibility of the token.",
        "params": {
          "tokenId": "The ENS domain token ID"
        },
        "returns": {
          "_0": "bool If the tokenId requires precursory validation"
        }
      },
      "targetAsset()": {
        "returns": {
          "_0": "address"
        }
      }
    },
    "title": "NFTX ENS Merkle Eligibility",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NFTXEligibilityInit(bytes32,string,string)": {
        "notice": "Emitted when our NFTX Eligibility is deployed"
      },
      "PrecursoryCheckComplete(uint256,bytes32,bool)": {
        "notice": "Emitted when a project validity check has been completed"
      },
      "PrecursoryCheckStarted(uint256,bytes32)": {
        "notice": "Emitted when a project validity check is started"
      }
    },
    "kind": "user",
    "methods": {
      "__NFTXEligibility_init(bytes32,string,string)": {
        "notice": "Parameters here should mirror the config struct."
      },
      "__NFTXEligibility_init(bytes32,string,string,uint256)": {
        "notice": "Parameters here should mirror the config struct."
      },
      "__NFTXEligibility_init_bytes(bytes)": {
        "notice": "Allow our eligibility module to be initialised with optional config data."
      },
      "finalized()": {
        "notice": "Confirms that our module has been finalised and won't change."
      },
      "merkleLeavesURI()": {
        "notice": "URI to JSON list of unencoded token IDs"
      },
      "merkleReference()": {
        "notice": "Merkle reference for any required frontend differentiation"
      },
      "merkleRoot()": {
        "notice": "Merkle proof to validate all eligible domains against"
      },
      "minExpirationTime()": {
        "notice": "Minimum expiration time for ENS domains in seconds"
      },
      "name()": {
        "notice": "The name of our Eligibility Module."
      },
      "processToken(uint256,bytes32[])": {
        "notice": "This will run a precursory check by encoding the token ID, creating the token hash, and then checking this against our merkle tree."
      },
      "processTokens(uint256[],bytes32[][])": {
        "notice": "This will run a number of precursory checks by encoding the token ID, creating the token hash, and then checking this against our merkle tree."
      },
      "requiresProcessing(uint256,bytes32[])": {
        "notice": "Checks if the token requires a precursory validation before it can have it's eligibility determined."
      },
      "targetAsset()": {
        "notice": "The address of our token asset contract."
      },
      "validTokenHashes(bytes32)": {
        "notice": "Internal storage of valid and processed tokens"
      }
    },
    "notice": "Allows vaults to be allow eligibility based ENS domains, allowing for minimum expiration times to be set.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29223,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 29226,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 29945,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "validTokenHashes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 29951,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "_processedTokenHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 29954,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 29957,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "merkleReference",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 29960,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "merkleLeavesURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 29280,
        "contract": "src/v2/eligibility/NFTXENSMerkleEligibility.sol:NFTXENSMerkleEligibility",
        "label": "minExpirationTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}